---
title: "Functional Analysis of CGM Data"
author: "Tim Vigers"
format: 
  revealjs:
    scrollable: true
    smaller: true
editor: visual
---

## The Question

-   Do nighttime glucose patterns differ between controls (HC), CF with normal glucose tolerance (CFNGT), CF with abnormal glucose tolerance (CFAGT), and people with CF related diabetes (CFRD)?

```{r}
#| include: false
# Libraries
library(arsenal)
library(tidyverse)
library(lubridate)
library(cgmanalysis)
library(refund)
library(refund.shiny)
library(tidyfun)
# Data import
sleep = read.csv("~/Dropbox/Work/Vigers/CF/Christine Chan/CGM and FDA/Data_Raw/sleep.csv",
                 na.strings = "")
# Get bedtime and wake times
sleep = sleep %>% 
  mutate(Day.1.End = Day.2.Date,Day.2.End = Day.3.Date,Day.3.End = Day.4.Date,
         Day.4.End = Day.5.Date,Day.5.End = Day.6.Date,Day.6.End = Day.7.Date) %>%
  select(Subject.ID:Average.BMI.Z.score,
         matches("Day\\.\\d\\.Date"),
         matches("Day\\.\\d\\.Date"),
         matches("Day\\.\\d\\.Bed.Time"),
         matches("Day\\.\\d\\.Get.Up.Time"))
sleep = sleep %>% 
  pivot_longer(Day.1.Date:Day.7.Get.Up.Time,
               names_to = c("Day",".value"),names_pattern = "Day\\.(.)\\.(.*)") %>%
  filter(!is.na(Bed.Time) & !is.na(Get.Up.Time) & Day < 7) %>%
  mutate(Night.Start = ymd_hm(paste(Date,Bed.Time)),
         Night.End = ymd_hm(paste(Date,Get.Up.Time))+days(1)) %>%
  select(Subject.ID:Average.BMI.Z.score,Day,Night.Start,Night.End)
sleep$Subject.ID = sub("--1","",sleep$Subject.ID)
# Add a day for those going to sleep between 12am - 6am
sleep$Night.Start[hour(sleep$Night.Start) %in% 0:6] = 
  sleep$Night.Start[hour(sleep$Night.Start) %in% 0:6] + days(1)
# Shorter group names
sleep$Combined.Group.Category = 
  factor(sleep$Combined.Group.Category,
         levels = c("Healthy Control",
                    "Cystic Fibrosis Normal Glucose Tolerant",
                    "Cystic Fibrosis Abnormal Glycemia",
                    "Cystic Fibrosis Related Diabetes"),
         labels = c("HC","CF-NGT","CF-AGT","CFRD"),ordered = T)
# HC not on insulin
sleep$CF.Insulin.Use[sleep$Combined.Group.Category == "HC"]="No"
# CGMs
# cleandata("~/Dropbox/Work/Vigers/CF/Christine Chan/CGM and FDA/Data_Raw/CGM",
#           "~/Dropbox/Work/Vigers/CF/Christine Chan/CGM and FDA/Data_Clean/CGM",
#           removegaps = F)
cgms = list.files("~/Dropbox/Work/Vigers/CF/Christine Chan/CGM and FDA/Data_Clean/CGM",
                  full.names = T)
names(cgms) = unlist(lapply(cgms, function(f){
  df = read.csv(f)
  id = strsplit(basename(f)," ")[[1]][1]
  return(id)
}))
# For each actiwatch, pull out the relevant vector of CGM values
sleep = sleep[sleep$Subject.ID %in% names(cgms),]
vecs = apply(sleep,1,function(r){
  # Pull info
  id = as.character(r["Subject.ID"])
  start = ymd_hms(as.character(r["Night.Start"]))
  end = ymd_hms(as.character(r["Night.End"]))
  # Find CGM file
  df = read.csv(cgms[id])
  df$timestamp = round_date(ymd_hms(df$timestamp),"5 minutes")
  # Get the time between sensors
  interval = table(round(diff(df$timestamp)/60))
  interval = names(interval)[which.max(interval)]
  # Put glucose values on time grid, pull glucose values
  times = round_date(seq(start,end,by = paste(interval,"min")),"5 minutes")
  glucs = data.frame(cbind(times,df$sensorglucose[match(times,df$timestamp)]))
  glucs = glucs[,2]
  # Grid sequence for functional data
  arg = seq(0,1,length.out = length(glucs))
  return(list(glucs,arg))
})
# Pull out glucose values and sequences separately
glucs = sapply(vecs,"[[",1)
args = sapply(vecs,"[[",2)
# Find those where all glucose values are missing
keep = sapply(glucs, function(g){!all(is.na(g)) & !is.na(var(g,na.rm = T))})
# Make functional object, add to demographic info
fda_df = sleep %>% select(Subject.ID:Average.BMI.Z.score)
fda_df = fda_df[keep,]
fda_df$Glucose = tfd(glucs[keep],args[keep],interpolate=T)
# Prepare for the refund package (tidyfun still pretty limited)
ys = apply(sleep,1,function(r){
  # Pull info
  id = as.character(r["Subject.ID"])
  start = ymd_hms(as.character(r["Night.Start"]))
  end = ymd_hms(as.character(r["Night.End"]))
  # Find CGM file
  df = read.csv(cgms[id])
  id = paste(as.character(r["Subject.ID"]),as.character(r["Day"]),sep = "_")
  df$timestamp = round_date(ymd_hms(df$timestamp),"5 minutes")
  # Get the time between sensors
  interval = table(round(diff(df$timestamp)/60))
  interval = names(interval)[which.max(interval)]
  # Put glucose values on time grid
  times = round_date(seq(start,end,by = paste(interval,"min")),"5 minutes")
  glucs = df$sensorglucose[match(times,df$timestamp)]
  y = data.frame(".obs"=rep(id,length(glucs)),
                 ".index"=seq(0,1,length.out=length(glucs)),
                 ".value" = glucs)
  return(y)
})
sleep = sleep %>% unite("id_day",Subject.ID,Day,remove = F)
names(ys) = sleep$id_day
# Limit to first day with no missing
sleep = sleep[keep,]
sleep = sleep %>%
  group_by(Subject.ID) %>%
  filter(row_number()==1)
ys = ys[sleep$id_day]
# Combine
ydf = do.call(rbind,ys)
colnames(ydf)[1] = ".id"
# Save
save(ydf,file = "~/Dropbox/Work/Vigers/CF/Christine Chan/CGM and FDA/R_Objects/ydf.Rdata")
```

## What Is Functional Data Analysis (FDA)?

-   Most statistics use some sort of parametric model $p(x|\boldsymbol{\theta})$.
    -   We try to estimate the parameters of *p*.
-   Assume the data are normally distributed $N(\mu,\sigma^2)$.
    -   Can use the sample mean $\bar{x}$ as an estimate of the location parameter $\mu$.
-   Sometimes we do not want to assume a density function in advance.
    -   Interested in estimating $p$ itself.
        -   What is the smooth function that generates our data?

## Goals and Uses

-   The goals of FDA are essentially the same as other areas of statistics:
    1.  Represent data to aid in analysis and to highlight characteristics
    2.  Study patterns and sources of variation
    3.  Explain variation in an outcome using independent variables
-   Common uses of FDA:
    -   Growth data
    -   Imaging data
    -   Wearable device data
    -   Accelerometry (physical activity)
    -   Heart rate
    -   **Continuous glucose monitoring** (CGM)

## Semi- and Non-Parametric Regression

-   The basic linear model is: $y_i= \beta_0+\beta_1 x_i+\epsilon_i$ for $1\leq i \leq n$
-   Each predictor has a simple form
    -   The overall shape is determined by the model rather than the data.
-   The non-parametric version of this model is: $y_i = f(x_i)+\epsilon_i$

## Semi- and Non-Parametric Regression

-   $f(x_i)$ is an arbitrary function.
    -   The only constraint is that $f(x_i)$ must be a smooth function.
    -   This model is much more flexible than parametric.
-   A semi-parametric model essentially uses parametric models for some predictors, and non-parametric models for others.

## Basis Functions

-   How do we represent $f(x)$?
-   If $b_j(x)$ is the $j^{th}$ basis function, then: $$f(x)=\sum_{j=1}^k \beta_j b_j(x)$$
-   Polynomials are a simple form of basis function: $$f(x)=\beta_1+\beta_2x+\beta_3x^2+\beta_4x^3+\beta_5x^4$$ and $$y_i=\beta_1+\beta_2x+\beta_3x^2+\beta_4x^3+\beta_5x^4+\epsilon_i$$

## Our Dataset

```{r results='asis'}
sleep = sleep %>%
  select(Subject.ID:Average.BMI.Z.score) %>% 
  rename(Age = Age,Gender = Gender,Race = Race.Ethnicity,
            Insulin = CF.Insulin.Use,`BMI Z Score`= Average.BMI.Z.score,
            Group = Combined.Group.Category)
t1 = tableby(Group~Age+Gender+Race+Insulin+`BMI Z Score`,data = sleep)
summary(t1)
```

## Spaghetti Plot

This plot includes all days of data, but the following analyses is only the first day due to computing limitations.

```{r}
fda_df %>% 
  ggplot() + 
  geom_spaghetti(aes(tf = Glucose),alpha=0.2) +
  scale_color_discrete(name="") + theme_bw() +
  facet_wrap(~Combined.Group.Category)
```

## FPCA

```{r}
#| eval: false
#| echo: true
# FPCA on irregularly sampled data
fit = fpca.sc(ydata = na.omit(ydf))
```

```{r}
#| include: false
# load("~/Dropbox/Work/Vigers/CF/Christine Chan/CGM and FDA/R_Objects/fpca_sc_fit.Rdata")
```

## Questions for the Group

-   I'm having some trouble running
