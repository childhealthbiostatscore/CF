---
title: "Piecewise Regression for Nutritional Outcomes Pre- and Post-CFTR Modulator"
author: "Tim Vigers"
format: revealjs
editor: visual
bibliography: /Users/timvigers/Dropbox/Miscellaneous/references.bib
csl: /Users/timvigers/GitHub/styles/american-medical-association-alphabetical.csl
cache: false
---

```{r}
#| include: false
# Load libraries, data, etc.
library(DiagrammeR)
library(MultiKink)
library(ggplot2)
library(broom)
library(lmerTest)
library(mcp)
library(knitr)
data("triceps")
cf = read.csv("/Users/timvigers/GitHub/CF/StatNet/data.csv",
              stringsAsFactors = F,na.strings = "")
```

## Study Overview

-   Do vitamin levels change after CFTR modulator start?

-   Registry data through 2021:

    -   Most patients have multiple nutrition measures before and after CFTR modulator start.
    -   A subset of patients were on ivacaftor followed by elexacaftor/tezacaftor/ivacaftor (ETI).

## Study Overview

-   The first approach was to limit the analysis dataset to those with two measures prior to modulator start, and at least one measure after.

    -   Then we did a t test on the differences between measures closest to modulator start.

-   However, this results in a lot of excluded data and it was unclear how to treat those on two different modulators.

-   Piecewise models allow us to use all the data and include all the participants in the same model.

## Piecewise Linear Regression Basics

-   See [module and presentation](https://bookdown.org/tpinto_home/Beyond-Linearity) by Jaroslaw Harezlak & Armando Teixeira-Pinto for the Biostatistics Collaboration of Australia for additional detail.

-   Will use the "triceps" data included in the `MultiKink` R package [@wanMultiKinkEstimationInference2020] because it's a little easier to see the trends.

-   892 measurements of the triceps skin fold.

    -   Interested in modeling changes with age.

------------------------------------------------------------------------

Triceps data:

```{r}
tri.age.plot = ggplot(triceps,aes(x = age,y = triceps)) + geom_point(alpha = 0.6) +
  xlab("Age") + ylab("Triceps") + theme_bw()
tri.age.plot
```

------------------------------------------------------------------------

Add knots at ages 5, 10, and 20:

```{r}
pred1 <- predict(lm(triceps~age, 
                    data = triceps[triceps$age<5,]))
pred2 <- predict(lm(triceps~age, 
                    data = triceps[triceps$age >=5 & triceps$age<10,]))
pred3 <- predict(lm(triceps~age, 
                    data = triceps[triceps$age>=10 & triceps$age<20,]))
pred4 <- predict(lm(triceps~age, 
                    data = triceps[triceps$age>=20,]))
tri.age.plot + 
  geom_line(data=triceps[triceps$age<5,], 
            aes(y = pred1, x=age), size = 1, col="blue") +
  geom_line(data=triceps[triceps$age >=5 & triceps$age<10,], 
            aes(y = pred2, x=age), size = 1, col="blue") +
  geom_line(data=triceps[triceps$age>=10 & triceps$age<20,], 
            aes(y = pred3, x=age), size = 1, col="blue") +
  geom_line(data=triceps[triceps$age>=20,], 
            aes(y = pred4, x=age), size = 1, col="blue") 
```

## Continuity restriction

-   We can adapt the previous model to make sure that the regressions "join up" at each knot:

$$
y = \beta_0 + \beta_1 x+\beta_2(x-k_1)_+\beta_3(x-k_2)_+ +...+ \epsilon
$$

with

$$
(x-k)_+=
\left\{ 
  \begin{array}{ c l }
    0, & \quad \textrm{if } x < k \\
    x-k,                 & \quad \textrm{if } x \geq k 
  \end{array}
\right.
$$

## Manual coding

-   Can add these values by hand easily (using the difference \* an indicator):

```{r}
#| echo: true
# Make new variables
triceps$c5 = (triceps$age-5)*(triceps$age>=5)
triceps$c10 = (triceps$age-10)*(triceps$age>=10)
triceps$c20 = (triceps$age-20)*(triceps$age>=20)
```

-   Examples of what the new variables should look like:

```{r}
kable(triceps[c(which(triceps$age<5)[1],which(triceps$age<10&triceps$age>5)[1],
          which(triceps$age<20&triceps$age>10)[1],
          which(triceps$age>=20)[1]),c("age","c5","c10","c20")],row.names = F)
```

------------------------------------------------------------------------

Plot predicted values:

```{r}
# Linear model
mod = lm(triceps ~ age + c5 + c10 + c20,data = triceps)
# Plot
pred = predict(mod)
tri.age.plot +
  geom_line(data=triceps, 
            aes(y = pred, x=age), size = 1, col="blue") 
```

## Model interpretation

```{r}
kable(tidy(mod),digits = 3)
```

\
The estimates of c5, c10, and c20 indicate change in slope at each respective knot.

## Pre-/Post-CFTR Data

-   Limited to 3 years pre/post

## Vitamin A Plot

```{r}
vita_plot = ggplot(cf,aes(x = Time,y = Vitamin.A,color = factor(Patient.ID))) + 
  geom_point(alpha = 0.6) +
  ylab("Vitamin A") + theme_bw() + theme(legend.position = "none")
```

```{r}
mod = lmer(Vitamin.A ~ Time + c1 + c2 + (1|Patient.ID),data = cf)
```

### To Do

-   Change missing c2 values to 0

-   Write out mixed model with two knots

-   Summarize results

## A Bayesian Approach

-   The `mcp` package provides an easy interface for fitting Bayesian regression models with multiple change points.

## On the triceps data

```{r}
# Define the model
model = list(
  triceps ~ 1 + age,          # intercept + slope
  ~ 0 + age,  # joined slope with 3 change points
  ~ 0 + age,
  ~ 0 + age
)
bayes_fit = mcp(model, data = triceps, sample = "both")
plot(bayes_fit)
```

-   Visually, this approach seems to generally confirm the knots we used earlier.

-   The model results bear this out as well:

```{r}
s = summary(bayes_fit)
kable(s,digits = 3)
```

---

-   `mcp` also allows us to test hypotheses about the location of these knots:

```{r}
hypothesis(bayes_fit, "cp_1 = 5")
hypothesis(bayes_fit, "cp_2 = 10")
hypothesis(bayes_fit, "cp_3 = 20")
```

- None of the hypothesis tests are significant, indicating that the knots found with `mcp` are reasonably close to the ones we pre-specified (the CI on cp_1 is fairly wide though).

---

```{r}
# Define the model
model = list(
  Vitamin.A ~ 1 + Time, # intercept + slope
  ~ 0 + Time  # joined slope
)
fit = mcp(model, data = cf)
plot(fit)
```

-   What does this mean? Why is the change point estimated to be before 0?

---

```{r}
# Dirichlet prior on change point
d_prior = list(
  cp_1 = "dnorm(0,1)"
)
fit_cp_prior = mcp(model, prior = d_prior,data = cf)
plot(fit_cp_prior)
```

---

# References
