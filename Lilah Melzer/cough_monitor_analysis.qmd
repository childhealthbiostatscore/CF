---
title: "Home Nighttime Cough Monitoring"
author: "Tim Vigers"
date: "today"
date-format: long
format:
  html:
    toc: true
    toc-depth: 5
    toc-float: true
    code-fold: true
    self-contained: true
    fig-cap-location: top
    page-layout: full
    theme:
      light: flatly
      dark: darkly
editor: source
---

```{r setup}
#| include: false
library(Hmisc)
library(redcapAPI)
library(tidyverse)
library(rspiro)
library(childsds)
library(arsenal)
library(lmerTest)
library(performance)
```

```{r data import}
#| include: false
# Import from REDCap
unlockREDCap(c(rcon = "Cough Monitor 23-0382"),
  keyring = "API_KEYs",
  envir = 1,
  url = "https://redcap.ucdenver.edu/api/"
)
df <- exportRecordsTyped(rcon)
```

```{r data cleaning}
#| message: false
#| warning: false
# Import use data
start_end <- read.csv("/Users/timvigers/Library/CloudStorage/OneDrive-TheUniversityofColoradoDenver/Vigers/CF/Lilah Melzer/Lilah Cough Monitor/Data_Clean/Start and end dates.csv",
  na.strings = ""
)
start_end$Start <- mdy(start_end$Start)
start_end$End <- mdy(start_end$End)
vacations <- read.csv("/Users/timvigers/Library/CloudStorage/OneDrive-TheUniversityofColoradoDenver/Vigers/CF/Lilah Melzer/Lilah Cough Monitor/Data_Clean/Vacation days.csv",
  na.strings = ""
)
vacations$Vacation.Start <- mdy(vacations$Vacation.Start)
vacations$Vacation.End <- mdy(vacations$Vacation.End)
# Those with end date after the last data pull will just end on the date of the
# pull
pull_date <- mdy("8/28/24")
start_end$End[is.na(start_end$End)] <- pull_date
start_end$End[start_end$End > pull_date] <- pull_date
# Make a grid of everyone's possible dates
dates <- start_end %>%
  rowwise() %>%
  transmute(sid,
    Date = list(seq(Start, End, by = "day"))
  ) %>%
  unnest(Date)
# Import counts
agg_counts <- read.csv(
  "/Users/timvigers/Library/CloudStorage/OneDrive-TheUniversityofColoradoDenver/Vigers/CF/Lilah Melzer/Lilah Cough Monitor/Data_Raw/Cough_w_TotalCounts_0824 - Cough_agg_w_count_0828.csv",
  na.strings = c("", "NMD"), header = F
)
# Format aggregated count data
agg_counts <- data.frame(t(agg_counts))
colnames(agg_counts) <- agg_counts[1, ]
agg_counts$`Date/Device` <- NULL
agg_counts <- agg_counts[-1, ]
colnames(agg_counts)[1] <- "sid"
agg_counts$sid <- sub("FN", "", agg_counts$sid)
# Wide to long, fix dates
agg_counts <- agg_counts %>%
  pivot_longer(
    cols = -one_of("sid"), names_to = "Date", values_to = "Coughs"
  ) %>%
  mutate(
    Date = mdy(Date),
    Coughs = as.numeric(Coughs)
  )
# Merge with all possible dates
agg_counts$sid <- as.numeric(agg_counts$sid)
agg_counts <- left_join(dates, agg_counts)
# Vacations
agg_counts$Vacation <- apply(agg_counts, 1, function(r) {
  id <- as.numeric(r["sid"])
  d <- r["Date"]
  any(d >= vacations$Vacation.Start[vacations$sid == id] &
    d <= vacations$Vacation.End[vacations$sid == id])
})
agg_counts <- agg_counts %>%
  filter(!Vacation | is.na(Vacation)) %>%
  arrange(sid, Date)
agg_counts$Vacation <- NULL
# Sick
sick <- df %>%
  select(sid, pulm_ex_v2, pulm_ex_spec_v2) %>%
  filter(pulm_ex_v2 == "Yes")
sick$pulm_ex_abx_start <- mdy(c("4/17/24", "5/8/24"))
sick$pulm_ex_start <- sick$pulm_ex_abx_start - 7
sick$pulm_ex_end <- sick$pulm_ex_abx_start + 28
# Make a grid of everyone's sick days and merge
sick <- sick %>%
  select(sid, pulm_ex_start, pulm_ex_end) %>%
  rowwise() %>%
  transmute(sid,
    Date = list(seq(pulm_ex_start, pulm_ex_end, by = "day"))
  ) %>%
  unnest(Date) %>%
  mutate(Sick = T)
sick$sid <- as.numeric(sick$sid)
agg_counts <- left_join(agg_counts, sick)
# Format sick column
agg_counts$Sick[is.na(agg_counts$Sick)] <- F
agg_counts$Sick <- factor(agg_counts$Sick,
  levels = c(F, T),
  labels = c("No", "Yes")
)
# Count number of nights
agg_counts <- agg_counts %>%
  group_by(sid) %>%
  mutate(Night = row_number()) %>%
  ungroup()
# Demographics data
df$Diagnosis <- factor(df$redcap_event_name,
  levels = c(
    "Visits (Arm 1: CF)", "Interim (Arm 1: CF)", "Visits (Arm 2: Control)",
    "Interim (Arm 2: Control)"
  ),
  labels = c("CF", "CF", "Non-CF", "Non-CF")
)
df$Diagnosis <- relevel(df$Diagnosis, ref = "Non-CF")
demo <- df %>%
  group_by(sid) %>%
  filter(row_number() == 1) %>%
  select(
    sid, Diagnosis, age_at_consent, height, weight, pre_fev,
    nih_sex:nih_ethnicity, mutation1, mutation2,
    cftr_mod, cftr_mod_type, mucolytic:antih
  )
# Calculate FEV1% - rspiro not accepting NA values for gender, which is really
# annoying
fev1 <- demo %>%
  select(sid, age_at_consent, height, weight, nih_sex, pre_fev) %>%
  filter(nih_sex %in% c("Male", "Female"))
fev1$pre_fev_pp <- pctpred_GLIgl(fev1$age_at_consent, fev1$height / 100,
  factor(fev1$nih_sex, levels = c("Male", "Female")),
  FEV1 = fev1$pre_fev
)
fev1$height_perc <- sds(as.numeric(fev1$height),
  age = fev1$age_at_consent, sex = fev1$nih_sex,
  male = "Male", female = "Female", item = "height2_20", ref = cdc.ref,
  type = "perc"
) * 100
fev1$weight_perc <- sds(as.numeric(fev1$weight),
  age = fev1$age_at_consent, sex = fev1$nih_sex,
  male = "Male", female = "Female", item = "weight2_20", ref = cdc.ref,
  type = "perc"
) * 100
demo <-
  left_join(demo, fev1[, c("sid", "height_perc", "weight_perc", "pre_fev_pp")])
label(demo$pre_fev_pp) <- "Pre-bronchodilator FEV1 % Predicted"
label(demo$height_perc) <- "Height %ile"
label(demo$weight_perc) <- "Weight %ile"
# CF genotype
demo$Genotype <-
  factor(rowSums(demo[, c("mutation1", "mutation2")] == "F508del"),
    levels = c(2, 1, 0),
    labels = c("F508del homozygous", "F508del heterozygous", "No F508del")
  )
demo[, grep("mutation", colnames(demo))] <- NULL
# Add group to counts
agg_counts$Diagnosis <-
  demo$Diagnosis[match(agg_counts$sid, as.numeric(as.character(demo$sid)))]
# Save
write.csv(agg_counts, file = "/Users/timvigers/Library/CloudStorage/OneDrive-TheUniversityofColoradoDenver/Vigers/CF/Lilah Melzer/Lilah Cough Monitor/Data_Clean/cleaned_aggregated_counts.csv", na = "", row.names = F)
# Per night
per_night <- agg_counts %>%
  group_by(sid) %>%
  summarise(
    median_coughs = median(Coughs, na.rm = T),
    nights_data = sum(!is.na(Coughs))
  )
demo$sid <- as.numeric(demo$sid)
demo <- left_join(demo, per_night)
label(demo$median_coughs) <- "Median Coughs per Night"
label(demo$nights_data) <- "Nights With Cough Data"
# Order columns
demo <- demo %>%
  select(sid, height_perc, weight_perc, pre_fev_pp, everything()) %>%
  select(-height, -weight, -pre_fev)
# Set table options for the document
mycontrols <-
  tableby.control(
    numeric.stats = c("N", "Nmiss", "medianq1q3", "range"),
    cat.stats = c("N", "Nmiss", "countpct"),
    numeric.test = "kwt"
  )
```

# Demographics

```{r results='asis'}
#| label: tbl-mean-demo
#| tbl-cap: Participant characteristics
f <- as.formula(paste0("Diagnosis ~", paste0(colnames(demo), collapse = "+")))
f <- update(f, . ~ . - Diagnosis - sid)
t1 <- tableby(f, data = demo, control = mycontrols)
summary(t1, pfootnote = T)
```

# Data for ATS abstract

```{r results='asis'}
per_person <- agg_counts %>%
  group_by(sid, Diagnosis) %>%
  summarise(
    `Nights` = n(),
    `Nights With Data` = sum(!is.na(Coughs)),
    `Prop. Nights With Data` = sum(!is.na(Coughs)) / n(),
    `Median Coughs per Night` = median(Coughs, na.rm = T),
    .groups = "drop"
  )
t2 <- tableby(
  Diagnosis ~ `Nights` + `Nights With Data` + `Prop. Nights With Data` +
    `Median Coughs per Night`,
  data = per_person, control = mycontrols
)
summary(t2, pfootnote = T)
```

# Distribution of coughs

```{r}
#| label: fig-coughs-dist
#| fig-cap: Histogram of Coughs Across All Nights
#| warning: false
ggplot(agg_counts, aes(x = Coughs)) +
  geom_histogram(binwidth = 1)
```

The distribution of coughs per night is extremely skewed, so coughs per night, etc. are reported as medians rather than means.

# Coughs over time (aggregated)

## Plot

```{r}
#| label: fig-coughs-by-night
#| fig-cap: Coughs by nights from start
#| warning: false
ggplot(agg_counts, aes(
  x = Night, y = Coughs, group = factor(sid), color = Diagnosis
)) +
  geom_point(alpha = 0.1) +
  geom_line(alpha = 0.1) +
  geom_smooth(aes(group = Diagnosis))
```

## Model

```{r}
mod <- glmer(Coughs ~ Night + Diagnosis + (Night | sid),
  data = agg_counts, family = "poisson"
)
gtsummary::tbl_regression(mod, exponentiate = T)
# check_model(mod, re_formula = NA, residual_type = "normal")
```

### By sick status

```{r}
mod <- glmer(Coughs ~ Night + Diagnosis + Sick + (Night | sid),
  data = agg_counts, family = "poisson"
)
gtsummary::tbl_regression(mod, exponentiate = T)
# check_model(mod, re_formula = NA, residual_type = "normal")
```
