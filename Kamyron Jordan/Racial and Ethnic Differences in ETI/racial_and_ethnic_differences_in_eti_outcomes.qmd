---
title: "Racial and Ethnic Differences in ETI: Outcomes"
author: "Tim Vigers"
date: "today"
date-format: long
format:
  html:
    toc: true
    toc-depth: 5
    toc-float: true
    number-sections: true
    code-fold: true
    self-contained: true
    fig-cap-location: top
    fig-height: 10
    fig-width: 10
    page-layout: full
    theme:
      light: flatly
      dark: darkly
editor: source
---

```{r setup}
#| include: false
# Libraries
library(tidyverse)
library(lmerTest)
library(splines)
library(ggeffects)
library(gtsummary)
library(ggflowchart)
# Paths
home_dir <- switch(Sys.info()["sysname"],
  "Darwin" = "/Users/timvigers/Library/CloudStorage/OneDrive-TheUniversityofColoradoDenver/Vigers/CF",
  "Windows" = "C:/Users/Tim/OneDrive - The University of Colorado Denver/Vigers/CF",
  "Linux" = "/home/timvigers/OneDrive/Vigers/CF"
)
knitr::opts_knit$set(root.dir = home_dir)
```

```{r data import}
# source("/home/timvigers/GitHub/CF/Kamyron Jordan/Racial and Ethnic Differences in ETI/create_outcomes_dataset.R")
load("./Kamyron Jordan/Racial and Ethnic Differences in ETI/Data_Cleaned/outcomes_dataset.RData")
```

```{r filtering and flowchart}
# Variables for flowchart
n_enc_1 <- nrow(encounter)
n_people_1 <- length(unique(encounter$eDWID))
no_eti_date <- which(is.na(encounter$Modulator_trikafta_first_date))
n_people_no_eti_date <- length(unique(encounter$eDWID[no_eti_date]))
# Remove those without an ETI start date
encounter <- encounter[-no_eti_date, ]
n_enc_2 <- nrow(encounter)
n_people_2 <- length(unique(encounter$eDWID))
# Filter out hospitalizations
hosp <- which(encounter$hospitalized == "Yes" |
  encounter$encounterlocation %in% c("Hospital", "Home IV"))
n_people_hosp <- length(unique(encounter$eDWID[hosp]))
encounter <- encounter[-hosp, ]
n_enc_3 <- nrow(encounter)
n_people_3 <- length(unique(encounter$eDWID))
# Pregnancies
preg <- which(encounter$pregnant == 1)
n_people_preg <- length(unique(encounter$eDWID[preg]))
encounter <- encounter[-preg, ]
n_enc_4 <- nrow(encounter)
n_people_4 <- length(unique(encounter$eDWID))
# Days from ETI start
early <- which(encounter$Days < -365.25 * 3)
n_people_early <- length(unique(encounter$eDWID[early]))
late <- which(encounter$Days > 365.25 * 2)
n_people_late <- length(unique(encounter$eDWID[late]))
encounter <- encounter[-early, ]
encounter <- encounter[-late, ]
n_enc_5 <- nrow(encounter)
n_people_5 <- length(unique(encounter$eDWID))
# Get some summary statistics by participant
t1_participant <- encounter %>%
  group_by(eDWID) %>%
  summarise(
    `Years With Data` = length(unique(reviewyear)),
    `Number of Encounters` = n(),
    `Number of Encounters Pre-ETI` = sum(Days <= 0),
    `Number of Encounters Post-ETI` = sum(Days > 0),
    Age = mean(encounterage, na.rm = T),
    across(all_of(continuous_outcomes), \(x) mean(x, na.rm = TRUE)),
    Race = names(sort(table(Race), decreasing = TRUE))[1],
    Insurance = names(sort(table(Insurance), decreasing = TRUE))[1],
    .groups = "drop"
  )
no_post <- t1_participant$eDWID[t1_participant$`Number of Encounters Post-ETI` == 0]
no_post_visits <- which(encounter$eDWID %in% no_post)
encounter <- encounter[-no_post_visits, ]
n_enc_6 <- nrow(encounter)
n_people_6 <- length(unique(encounter$eDWID))
t1_participant <- t1_participant %>% filter(!eDWID %in% no_post)
# Lung function cutoffs
lower <- 20
upper <- 150
# Remove impossible lung function values
low_fev1 <- which(encounter$gli_fev1_ppred_rn < lower)
high_fev1 <- which(encounter$gli_fev1_ppred_rn > upper)
encounter$gli_fev1_ppred_rn[low_fev1] <- NA
encounter$gli_fev1_ppred_rn[high_fev1] <- NA

low_fvc <- which(encounter$gli_fvc_ppred_rn < lower)
high_fvc <- which(encounter$gli_fvc_ppred_rn > upper)
encounter$gli_fvc_ppred_rn[low_fvc] <- NA
encounter$gli_fvc_ppred_rn[high_fvc] <- NA
```

# Data cleaning

```{r flowchart}
# Make labels
tots1 <- paste0(n_people_1, " People\n", n_enc_1, " Encounters")
no_date <- paste0(
  "No ETI Date:\n", n_people_no_eti_date, " People\n",
  length(no_eti_date), " Encounters"
)
tots2 <- paste0(n_people_2, " People\n", n_enc_2, " Encounters")
hosps <- paste0(
  "Care Episodes:\n", n_people_hosp, " People\n",
  length(hosp), " Encounters"
)
tots3 <- paste0(n_people_3, " People\n", n_enc_3, " Encounters")
pregs <- paste0(
  "Pregnancies:\n", n_people_preg, " People\n",
  length(preg), " Encounters"
)
tots4 <- paste0(n_people_4, " People\n", n_enc_4, " Encounters")
earlies <- paste0(
  "Visits > ", 365.25 * 3, " Days BEFORE ETI:\n", n_people_early, " People\n",
  length(early), " Encounters"
)
lates <- paste0(
  "Visits > ", 365.25 * 2, " Days AFTER ETI:\n", n_people_late, " People\n",
  length(late), " Encounters"
)
tots5 <- paste0(n_people_5, " People\n", n_enc_5, " Encounters")
no_posts <- paste0(
  "No Post-ETI Visits:\n", length(no_post), " People\n",
  length(no_post_visits), " Encounters (Pre-ETI)"
)
tots6 <- paste0(n_people_6, " People\n", n_enc_6, " Encounters")
fev1s <- paste0(
  length(low_fev1), " FEV1 < ", lower, "\n",
  length(high_fev1), " FEV1 > ", upper
)
fvcs <- paste0(
  length(low_fvc), " FVC < ", lower, "\n",
  length(high_fvc), " FVC > ", upper
)
# Assemble the chart!
flow_chart <- tibble(
  from = c(
    tots1, tots1, tots2, tots2, tots3, tots3, tots4, tots4, tots4, tots5,
    tots5, tots6, tots6
  ),
  to = c(
    tots2, no_date, tots3, hosps, tots4, pregs, tots5, earlies, lates, tots6,
    no_posts, fev1s, fvcs
  )
)
ggflowchart(flow_chart)
```

# Table 1

## By person

Continuous variables were averaged across all years for each person, and categorical variables are reported as the most common value.

```{r}
t1_participant %>%
  select(-eDWID) %>%
  tbl_summary(
    by = Race,
    type = list(`Years With Data` ~ "continuous"),
    missing_text = "Missing"
  ) %>%
  add_overall()
```

# Encounter-level

```{r}
encounter %>%
  select(Race, encounterlocation, bacterialculturedone:othermicroorganisms1) %>%
  tbl_summary(by = Race, missing_text = "Missing")
```

# LOESS-smoothed outcome plots

```{r functions}
# Plots
loess_plot <- function(data = encounter, outcome, facet = F) {
  p <- ggplot(data, aes(x = Days, y = !!sym(outcome), color = Race)) +
    geom_point(
      shape = ".", aes(x = Days, y = !!sym(outcome)), inherit.aes = F,
      alpha = 0.1
    ) +
    geom_smooth(method = "loess", se = F) +
    theme_classic()
  if (facet) {
    p <- p + facet_wrap(~Race)
  }
  return(p)
}
```

```{r results='asis'}
#| warning: false
invisible(lapply(continuous_outcomes, function(o) {
  cat("\n")
  cat("\n")
  cat("##", o)
  cat("\n")
  cat("\n")
  print(loess_plot(outcome = o))
}))
```

# Segmented models

The following models are adjusted for age group and insurance status. We fit a Gaussian mixed model for continuous outcomes with random intercept for each subject.

```{r}
invisible(lapply(continuous_outcomes, function(o) {
  f <- as.formula(paste0(
    o,
    "~ age_group + Insurance + bs(Days, knots = 0, degree = 1) * Race + (1 | eDWID)"
  ))
  m <- lmer(f, data = encounter %>% filter(Race != "Asian"))
  predict_response(model = m, terms = c("Days[all]", "Race")) %>%
    plot() %>%
    print()
}))
```

# Questions

1. Do we want to combine the Asian and "Other" groups? It makes sense from a statistical point of view.
