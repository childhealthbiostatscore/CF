---
title: "Racial and Ethnic Differences in ETI"
author: "Tim Vigers"
date: "today"
date-format: long
format:
  html:
    toc: true
    toc-depth: 5
    toc-float: true
    number-sections: true
    code-fold: true
    self-contained: true
    fig-cap-location: top
    page-layout: full
    theme:
      light: flatly
      dark: darkly
bibliography: /Users/timvigers/Dropbox/Miscellaneous/zotero.bib
csl: /Users/timvigers/Dropbox/Miscellaneous/american-medical-association.csl
editor: source
---

```{r setup}
#| include: false
# Libraries
library(segmented)
library(Hmisc)
library(tidyverse)
library(gtsummary)
library(lmerTest)
library(nlme)
library(broom.mixed)
library(emmeans)
library(gt)
library(performance)
library(mcp)
library(ggsurvfit)
# Paths
home_dir <- switch(Sys.info()["sysname"],
  "Darwin" = "/Users/timvigers/Library/CloudStorage/OneDrive-TheUniversityofColoradoDenver/Vigers/CF",
  "Windows" = "C:/Users/timvigers/OneDrive - The University of Colorado Denver/Vigers/CF"
)
knitr::opts_knit$set(root.dir = home_dir)
```

```{r data cleaning}
#| include: false
# source("/Users/timvigers/GitHub/CF/Kamyron Jordan/Racial and Ethnic Differences in ETI/create_race_eti_analysis_dataset.R")
load("./Kamyron Jordan/Racial and Ethnic Differences in ETI/Data_Cleaned/analysis_dataset.RData")
```

# Race and ethnicity breakdown

The table below shows the race and ethnicity proportions for the entire cohort included in the CFFPR dataset. I decided to combine race and ethnicity with Hispanic "overriding" other racial identities. So if a participant was reported as both Black and Hispanic, they were consider Hispanic for the following analyses. Those with missing data for Hispanic ethnicity were moved to the "Indigenous/Mixed/Other/Unknown Race" category.

```{r}
demo %>%
  select(race) %>%
  tbl_summary(missing_text = "Missing") %>%
  bold_labels()
```

## Race by year

The table below shows the proportions of race and ethnicities included in the dataset in a given year. Most people are seen at least once a year, but this table serves as a sanity check to make sure that groups were generally seen equal amounts each year.

```{r}
annual %>%
  select(race, ReviewYear) %>%
  tbl_summary(by = ReviewYear, missing_text = "Missing") %>%
  bold_labels()
```

# Participant characteristics

```{r}
t1_vars <- c(
  "Gender", "F508_num", "mean_ppFEV", "Age_YrEnd",
  "mean_ppFEV", "weight_last", "weight_perc_last", "bmi_last",
  "bmi_perc_last", "Vx445comb"
)
```

## Characteristics by race

```{r}
demo %>%
  select(Gender, F508_num, race) %>%
  tbl_summary(by = race, missing_text = "Missing") %>%
  bold_labels()
```

## Characteristics by year

```{r results='asis'}
#| message: false
set_gtsummary_theme(theme_gtsummary_compact(), quiet = T)
years <- split.data.frame(annual, annual$ReviewYear)
invisible(lapply(names(years), function(n) {
  cat("\n")
  cat("###", n)
  cat("\n")
  d <- years[[n]]
  t <- d %>%
    select(all_of(t1_vars), race) %>%
    tbl_summary(by = race, missing_text = "Missing") %>%
    bold_labels()
  print(t)
  cat("\n")
}))
reset_gtsummary_theme()
```

# ETI eligibility

Trikafta originally approved October 21, 2019 for patients 12+ years of age. Approved for ages 6 - 11 on June 9, 2021.

The following tables have been aggregated by year, and therefore may miss some information regarding eligibility and ETI start. For example, if someone turned 12 on 12/30/2019, they would technically be considered eligible for ETI, even though realistically we probably wouldn't expect them to start that year.

## Proportions

### Overall by year

#### All patients

```{r}
annual %>%
  select(eti_elig, contains("Vx"), ReviewYear) %>%
  tbl_summary(
    by = ReviewYear, missing_text = "Missing",
    type = all_dichotomous() ~ "categorical"
  ) %>%
  bold_labels()
```

#### Eligible and prescribed off-label only

```{r}
annual %>%
  filter(eti_elig == "Yes" | Vx445comb == "Yes") %>%
  select(eti_elig, contains("Vx"), ReviewYear) %>%
  tbl_summary(
    by = ReviewYear, missing_text = "Missing",
    type = all_dichotomous() ~ "categorical"
  ) %>%
  add_ci() %>%
  add_p(test.args = all_tests("fisher.test") ~ list(simulate.p.value = T)) %>%
  separate_p_footnotes() %>%
  bold_labels()
```

### By race and year

```{r results='asis'}
invisible(lapply(c("2019", "2020", "2021"), function(n) {
  cat("\n")
  cat("###", n)
  cat("\n")
  cat("\n")
  cat("#### All patients")
  cat("\n")
  d <- years[[n]]
  t <- d %>%
    select(eti_elig, contains("Vx"), race) %>%
    tbl_summary(
      by = race, missing_text = "Missing",
      type = all_dichotomous() ~ "categorical"
    ) %>%
    add_p(test.args = all_tests("fisher.test") ~ list(simulate.p.value = T)) %>%
    separate_p_footnotes() %>%
    bold_labels()
  print(t)
  cat("\n")
  cat("\n")
  cat("#### Eligible and prescribed off-label only")
  cat("\n")
  t <- d %>%
    filter(eti_elig == "Yes" | Vx445comb == "Yes") %>%
    select(eti_elig, contains("Vx"), race) %>%
    tbl_summary(
      by = race, missing_text = "Missing",
      type = all_dichotomous() ~ "categorical"
    ) %>%
    add_ci() %>%
    add_p(test.args = all_tests("fisher.test") ~ list(simulate.p.value = T)) %>%
    separate_p_footnotes() %>%
    bold_labels()
  print(t)
  cat("\n")
}))
```

### Figure

The figure below includes those eligible for ETI and anyone who may have been prescribed ETI off label. Error bars represent 95% confidence intervals.

```{r}
annual %>%
  filter(eti_elig == "Yes" | Vx445comb == "Yes") %>%
  select(eDWID, race, ReviewYear, contains("Vx")) %>%
  group_by(ReviewYear, race) %>%
  summarise(
    perc = mean(Vx445comb == "Yes", na.rm = T),
    se = sqrt(perc * (1 - perc) / n()),
    lower = perc - (1.96 * se), upper = perc + (1.96 * se),
    .groups = "drop"
  ) %>%
  ggplot(aes(x = ReviewYear, y = perc * 100, fill = race)) +
  geom_bar(position = "dodge", stat = "identity") +
  geom_errorbar(aes(ymin = lower * 100, ymax = upper * 100),
    position = "dodge", linewidth = 0.7
  ) +
  xlab("Year") +
  ylab("Percentage Prescribed ETI") +
  theme_bw() +
  theme(legend.title = element_blank()) +
  scale_fill_manual(values = c(
    "#264653", "#2A9D8F", "#E9C46A",
    "#F4A261", "#E76F51"
  ))
```

## Survival analysis

For the following analysis, the start time ($t=0$) was the approximate date that each person became eligible for ETI. Because we don't have exact dates of birth, I calculated an approximate DOB based on age and encounter dates, and then used the approximate DOB to determine date of eligibility. Encounters prior to ETI eligibility were excluded, and only time to first encounter on ETI was considered (i.e. we did not fit a multi-state model to account for those who started and then stopped the medication).

```{r}
# Create survival dataset
surv_dat <- encounter %>%
  mutate(stop = as.numeric(encounterdate - eti_elig_date)) %>%
  filter(stop >= 0) %>%
  group_by(eDWID) %>%
  mutate(start = lag(stop, default = 0)) %>%
  select(eDWID, race, encounterdate, encounterage, eti_elig_date, Vx445comb, start, stop) %>%
  filter(stop <= first(stop[Vx445comb == "Yes"]))
surv_dat$Vx445comb <- as.numeric(factor(surv_dat$Vx445comb, levels = c("No", "Yes"))) - 1
# Fit
fit <- survfit(Surv(start, stop, Vx445comb, type = "interval") ~ race,
  id = eDWID, data = surv_dat
)
# Plot
names(fit$strata) <- gsub("race=", "", names(fit$strata))
fit %>%
  ggsurvfit(type = "risk") +
  add_confidence_interval() +
  add_risktable(
    risktable_stats =
      c("{round(n.risk)}", "{round(cum.event)}"),
    stats_label = c("Eligible", "Num. Started")
  ) +
  add_risktable_strata_symbol() +
  add_quantile() +
  ylab("Proportion on Vx445comb") + xlab("Days From Eligibility")
```

Without Asian subgroup for clearer plot:

```{r}
fit <- survfit(Surv(start, stop, Vx445comb, type = "interval") ~ race,
  id = eDWID, data = surv_dat[surv_dat$race != "Asian", ]
)
# Plot
names(fit$strata) <- gsub("race=", "", names(fit$strata))
fit %>%
  ggsurvfit(type = "risk") +
  add_confidence_interval() +
  add_risktable(
    risktable_stats =
      c("{round(n.risk)}", "{round(cum.event)}"),
    stats_label = c("Eligible", "Num. Started")
  ) +
  add_risktable_strata_symbol() +
  add_quantile() +
  ylab("Proportion on Vx445comb") + xlab("Days From Eligibility")
```

# People without visits in a given year

```{r}
# Which are missing from encounters data?
a <- as.data.frame.matrix(table(annual$eDWID, annual$ReviewYear))
a <- a %>% rownames_to_column("eDWID")
e <- as.data.frame.matrix(table(by_year$eDWID, by_year$reviewyear))
e <- e %>% rownames_to_column("eDWID")
rowdiff_a <- setdiff(a, e)
rowdiff_a$data <- "annual"
rowdiff_e <- setdiff(e, a)
rowdiff_e$data <- "encounter"
diffs <- rbind(rowdiff_a, rowdiff_e)
diffs <- diffs %>%
  arrange(eDWID, desc(data)) %>%
  select(-data)
diffs <- diffs %>%
  group_by(eDWID) %>%
  reframe(across(`2015`:`2021`, ~ diff(as.numeric(.x))))
diffs %>%
  reframe(across(`2015`:`2021`, ~ sum(.x == 1))) %>%
  gt()
```

There were a total of `r length(setdiff(a$eDWID,e$eDWID))` included in the annual dataset that did not appear in the encounter-level dataset at all. There were an additional `r nrow(diffs)` patients who were included in both datasets, but had at least one year with no encounters. The table above shows the number of people missing an encounter in each year.

If someone was not seen a given year, do we count them as eligible for that year? I am assuming they will be eligible but obviously will not have started any modulators.

# Potential COVID effects

## Spaghetti plot

```{r}
#| warning: false
ggplot(encounter, aes(
  y = GLI_FEV1_pct_predicted, x = encounterdate,
  group = eDWID, color = factor(eDWID)
)) +
  geom_line(alpha = 0.02) +
  theme_bw() +
  theme(legend.position = "none")
```

## Visits prior to and after March 11, 2020

The table below is limited to visits 2019 - 2021.

```{r}
encounter %>%
  filter(encounterdate >= "2019-01-01") %>%
  mutate(post_covid = encounterdate > "2020-03-11") %>%
  group_by(eDWID) %>%
  summarise(
    `Number of Visits Pre-COVID` = sum(!post_covid),
    `Number of Visits Post-COVID` = sum(post_covid),
    race = first(race),
    .groups = "drop"
  ) %>%
  select(-eDWID) %>%
  tbl_summary(by = race, missing_text = "Missing") %>%
  bold_labels()
```

# Lung function

## GLI-2012 vs. GLI-2022 

GLI-2012 spirometry equations include race/ethnicity in the formula, but GLI-2022 equations are race-free. The results of the GLI-2022 equations contain the "gl" suffix, which stands for "global" (so instead of "ppFEV1" it would be "ppFEV1gl").

First, I wanted to ensure that the `rspiro` package is calculating FEV1 percent predicted correctly. In the graph below, ppFEV1 from the registry is shown on the x-axis and ppFEV1 as calculated with `rspiro` is shown on the y-axis.

```{r}
#| warning: false
ggplot(encounter, aes(
  x = GLI_FEV1_pct_predicted, y = GLI_FEV1_pct_predicted_check,
  color = race
)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0) +
  theme_bw() +
  xlab("Registry") +
  ylab("rspiro") +
  ylim(0, 150) +
  facet_wrap(~race) +
  ggtitle("Registry values vs. rspiro")
```

```{r}
ggplot(encounter, aes(
  x = ppFEV1gl, y = GLI_FEV1_pct_predicted_check,
  color = race
)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0) +
  theme_bw() +
  xlab("GLI-2022") +
  ylab("GLI-2012") +
  ylim(0, 150) +
  xlim(0, 150) +
  facet_wrap(~race) +
  ggtitle("GLI-2022 vs. GLI-2012 (rspiro)")
```

## Annualized averages

FEV1 and FVC percent predicted (based on GLI equations) were averaged by year for each person.

### FEV1

#### Basic model

The most basic model we can fit to these data uses the average values as the outcome, with terms for review year, race, and their interaction and a random intercept for each patient.

```{r}
# Most basic model of lung function over time by race
# Try a few different models
mod <- lmer(
  mean_ppFEV ~ factor(ReviewYear) * race + (1 | eDWID),
  data = annual
)
res <- tidy(mod, effects = "fixed")
means <- data.frame(emmeans(mod, ~ race + ReviewYear,
  lmerTest.limit = 1e6,
  pbkrtest.limit = 1e6
))
label(means) <- list("Race/Ethnicity", "Year", "Mean ppFEV", "SE", "df", "Lower CL", "Upper CL")
gt(means) %>% fmt_number(emmean:last_col(), decimals = 1)
```

```{r}
ggplot(left_join(annual, means, by = join_by(race, ReviewYear))) +
  geom_point(mapping = aes(x = ReviewYear, y = emmean, color = race)) +
  geom_line(mapping = aes(x = ReviewYear, y = emmean, group = race, color = race)) +
  geom_errorbar(mapping = aes(
    x = ReviewYear, ymin = emmean - SE,
    ymax = emmean + SE, color = race
  ), width = .2) +
  xlab("Year") +
  ylab("LS Mean FEV1") +
  theme_bw() +
  scale_color_discrete(name = "Race/Ethnicity")
```

```{r}
#| warning: false
ggplot(left_join(annual, means, by = join_by(race, ReviewYear))) +
  geom_line(
    mapping = aes(x = ReviewYear, y = mean_ppFEV, group = eDWID),
    alpha = 0.005, linewidth = 0.5
  ) +
  geom_point(mapping = aes(x = ReviewYear, y = emmean, color = race)) +
  geom_line(mapping = aes(x = ReviewYear, y = emmean, group = race, color = race)) +
  geom_errorbar(mapping = aes(x = ReviewYear, ymin = emmean - SE, ymax = emmean + SE, color = race), width = .2) +
  xlab("Year") +
  ylab("LS Mean FEV1") +
  theme_bw() +
  scale_color_discrete(name = "Race/Ethnicity")
```

```{r}
#| warning: false
ggplot(left_join(annual, means, by = join_by(race, ReviewYear))) +
  geom_line(
    mapping = aes(x = ReviewYear, y = mean_ppFEV, group = eDWID),
    alpha = 0.005, linewidth = 0.5
  ) +
  geom_point(mapping = aes(x = ReviewYear, y = emmean, color = race)) +
  geom_line(mapping = aes(
    x = ReviewYear, y = emmean, group = race,
    color = race
  )) +
  geom_errorbar(mapping = aes(
    x = ReviewYear, ymin = emmean - SE,
    ymax = emmean + SE, color = race
  ), width = .2) +
  xlab("Year") +
  ylab("LS Mean FEV1") +
  theme_bw() +
  scale_color_discrete(name = "Race/Ethnicity") +
  facet_wrap(~race)
```

#### Change point model

```{r}
# Calculate time from first ETI use
encounter <- encounter %>%
  mutate(
    days_from_start =
      as.numeric(encounterdate - Modulator_trikafta_first_date)
  )
# Segmented regression by group
lm_fixed_cp <- segreg(
  GLI_FEV1_pct_predicted ~ race + seg(days_from_start, by = race),
  data = encounter
)
# Results
lm_fixed_cp$psi
slope(lm_fixed_cp)
# Plot
new_df = lm_fixed_cp$model
new_df$pred = predict(lm_fixed_cp)
ggplot(new_df, aes(x = days_from_start, y = pred,group = race,color = race)) +
  geom_line() +
  ylim(0, 150)
# # Random intercept version isn't converging
# # Basic model
# lmm_base <- lme(GLI_FEV1_pct_predicted ~ days_from_start,
#   random = ~ 1 | eDWID, data = encounter, na.action = na.omit,method = "ML",
#   control=list(msMaxIter=1000,msMaxEval = 1000)
# )
# # Segmented with fixed change point
# lmm_fixed_cp <- segmented(lmm_base,
#   seg.Z = ~days_from_start, psi = 0,
#   random = list(eDWID = pdDiag(~ 1 + days_from_start + U))
# )
```

```{r}
#| cache: true
#| eval: false
t <- encounter %>%
  select(eDWID, GLI_FEV1_pct_predicted, days_from_start) %>%
  drop_na()

model <- list(
  GLI_FEV1_pct_predicted ~ 0 + days_from_start,
  ~ 0 + days_from_start
)
fit <- mcp(model, data = t, cores = 4, chains = 4)
plot(fit)
```
