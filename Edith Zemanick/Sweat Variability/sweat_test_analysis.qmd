---
title: "Sweat electrolytes and CFTR activity in the era of CFTR modulators"
author: "Tim Vigers"
date: "today"
date-format: long
format:
  html:
    toc: true
    toc-depth: 10
    toc-float: true
    number-sections: true
    code-fold: true
    self-contained: true
    fig-cap-location: top
    page-layout: full
editor: source
---

```{r setup}
#| include: false
library(knitr)
library(Hmisc)
library(lubridate)
library(readxl)
library(tidyverse)
library(arsenal)
library(pROC)
home_dir <- switch(
    Sys.info()["sysname"],
    "Darwin" = "/Users/tim/Library/CloudStorage/OneDrive-TheUniversityofColoradoDenver/Vigers/CF/Edith Zemanick/Sweat Variability",
    "Windows" = "C:/Users/Tim/OneDrive - The University of Colorado Denver/Vigers/CF/Edith Zemanick/Sweat Variability",
    "Linux" = "/home/tim/OneDrive/Vigers/CF/Edith Zemanick/Sweat Variability"
)
github_dir <- switch(
    Sys.info()["sysname"],
    "Darwin" = "/Users/tim/Documents/GitHub",
    "Windows" = "C:/Users/Tim/Documents/GitHub",
    "Linux" = "/home/tim/Documents/GitHub"
)
source(paste0(github_dir, "/CF/genotype_class_severity.R"))
knitr::opts_knit$set(root.dir = home_dir)
```

```{r data cleaning}
#| message: false
# Import CHCO, filter out those with no demo data, rename columns, etc.
chco <- read.csv(
    "./Data_Cleaned/chco_reidentified.csv",
    na.strings = c(
        "",
        "Test not performed",
        "Insufficient quant.",
        "repeat sweat chloride testing",
        "Please reorder testing and re",
        "The received specimen cannot"
    )
)
chco <- chco %>%
    group_by(PatientID) %>%
    filter(Demographics.Available == "TRUE") %>%
    select(
        PatientID,
        Name,
        DOB,
        Genotypes1,
        Genotypes2,
        Sex,
        Age.at.Test.in.Years,
        Na,
        K,
        Cl,
        Na_Left,
        Na_Right,
        K_Left,
        K_Right,
        Cl_Left,
        Cl_Right
    ) %>%
    rename(Age = Age.at.Test.in.Years) %>%
    mutate(Name = tolower(gsub("[[:punct:] ]+", "", Name)))
# Fix CHCO diagnoses per Angela
chco_diagnoses <- read.csv("./Data_Cleaned/chco_diagnoses.csv")
chco <- full_join(chco, chco_diagnoses, by = join_by(PatientID))
chco$PatientID <- NULL
# Manually add some Na and Cl values that Angela was able to find (using
# numbers so that no PHI is on GitHub)
chco$Na_Right[791] <- 61.3
chco$Na_Right[826] <- 72.4
chco$Na_Left[826] <- 72.4
chco$Na_Right[790] <- 21.1
chco$Na_Left[790] <- 24.1
# For "LESS THAN 10", replace with missing
chco[chco == "LESS THAN 10"] <- NA
chco[, c("Cl", "Cl_Left", "Cl_Right")] <-
    lapply(chco[, c("Cl", "Cl_Left", "Cl_Right")], as.numeric)
# Import NJH and add diagnoses from Katie
njh <- read.csv(
    "./Data_Cleaned/njh_full_list.csv",
    na.strings = c(
        "",
        "Test not performed",
        "Insufficient quant.",
        "repeat sweat chloride testing"
    )
)
njh_diagnoses <- read.csv("./Data_Cleaned/njh_diagnoses.csv", na.strings = "")
njh_diagnoses <- njh_diagnoses %>% filter(!is.na(Diagnosis))
njh <- full_join(njh, njh_diagnoses)
# Filter out those with no demo data, rename columns, etc.
njh <- njh %>%
    group_by(Patient.ID) %>%
    filter(Demographics.Available == "TRUE") %>%
    select(
        Patient.ID,
        Patient.Name,
        Birth.Date,
        Genotype.1,
        Genotype.2,
        Sex,
        Age.at.test..in.years.,
        Sweat.sodium,
        Sweat.potassium,
        Sweat.chloride,
        Sweat.sodium.left.arm,
        Sweat.sodium.right.arm,
        Sweat.potassium.left.arm,
        Sweat.potassium.right.arm,
        Sweat.chloride.left.arm,
        Sweat.chloride.right.arm,
        Diagnosis
    ) %>%
    rename(
        Name = Patient.Name,
        Genotypes1 = Genotype.1,
        DOB = Birth.Date,
        Genotypes2 = Genotype.2,
        Age = Age.at.test..in.years.,
        Na = Sweat.sodium,
        K = Sweat.potassium,
        Cl = Sweat.chloride,
        Na_Left = Sweat.sodium.left.arm,
        Na_Right = Sweat.sodium.right.arm,
        K_Left = Sweat.potassium.left.arm,
        K_Right = Sweat.potassium.right.arm,
        Cl_Left = Sweat.chloride.left.arm,
        Cl_Right = Sweat.chloride.right.arm
    ) %>%
    mutate(Name = tolower(gsub("[[:punct:] ]+", "", Name)))
njh$Patient.ID <- NULL
# Row bind, fill diagnosis, then remove dupes
df <- rbind(chco, njh)
df <- df %>%
    group_by(Name) %>%
    fill(Diagnosis) %>%
    distinct() %>%
    select(Name, Diagnosis, everything()) %>%
    arrange(Name, Age)
# For those with left and right, average them
df$Na_mean <- rowMeans(df[, c("Na_Left", "Na_Right")], na.rm = T)
df$Na <- coalesce(df$Na, df$Na_mean)
df$Cl_mean <- rowMeans(df[, c("Cl_Left", "Cl_Right")], na.rm = T)
df$Cl <- coalesce(df$Cl, df$Cl_mean)
df$K_mean <- rowMeans(df[, c("K_Left", "K_Right")], na.rm = T)
df$K <- coalesce(df$K, df$K_mean)
# Change Cl under 10 or over 160 to missing
df$Cl[df$Cl < 10] <- NA
df$Cl[df$Cl > 160] <- NA
# Remove Na under 10 as well
df$Na[df$Na < 10] <- NA
# Calculate Na:Cl ratio
df$`Na:Cl` <- df$Na / df$Cl
# Use each person's first sweat test with both sodium and chloride
df <- df %>%
    filter(!is.na(`Na:Cl`)) %>%
    group_by(Name) %>%
    slice_min(Age)
# If there are still duplicates, exclude them
dups <- df$Name[duplicated(df$Name)]
df <- df[!df$Name %in% dups, ]
# Get rid of unnecessary columns, remove those with no diagnosis
df <- df %>%
    select(
        Name,
        DOB,
        Diagnosis,
        Genotypes1,
        Genotypes2,
        Sex,
        Age,
        Na,
        K,
        Cl,
        `Na:Cl`
    ) %>%
    filter(!is.na(Diagnosis))
# Combine CFTR-related disorder and CRMS
df$Diagnosis <- factor(
    df$Diagnosis,
    levels = c("Cystic Fibrosis", "CFTR-related disorder", "CRMS", "Non-CF"),
    labels = c(
        "Cystic Fibrosis",
        "CFTR-RD or CRMS",
        "CFTR-RD or CRMS",
        "Non-CF"
    )
)
# Additional changes based on Angela's review
df$Diagnosis[which(is.na(df$Name))] <- "Cystic Fibrosis"
df$Diagnosis[400] <- "Cystic Fibrosis"
df$Na[541] <- 69
# Angela reviewed a random set of 75 patients and requested the changes below
# See the "random_pull.csv" document for details
# Changes done by row number to avoid PHI in GitHub
df$Cl[1473] <- 103.5
df$Na[505] <- 42.6
df$Na[238] <- 73
df$Na[541] <- 69
df$Na[747] <- 88.9
# Remove people per Angela's recommendation and duplicates based on DOB review
df <- df[
    -c(
        78,
        79,
        183,
        257,
        259,
        270,
        314,
        342,
        691,
        719,
        724,
        737,
        812,
        903,
        1012,
        1066,
        1126,
        1151,
        1202,
        1209,
        1222,
        1224,
        1340,
        1428,
        1456
    ),
]
# Get genotype severity
## By severity
df$geno_risk_1 <- cf_genotype_class_severity(df$Genotypes1)
df$geno_risk_2 <- cf_genotype_class_severity(df$Genotypes2)
df$geno_risk_1[df$Diagnosis == "Non-CF"] <- "Not CF"
df$geno_risk_2[df$Diagnosis == "Non-CF"] <- "Not CF"
df$geno_risk <- paste(df$geno_risk_1, df$geno_risk_2, sep = "/")
df$geno_risk <- factor(
    df$geno_risk,
    levels = c(
        "Mild/Mild",
        "Mild/Severe",
        "Mild/Unknown",
        "Severe/Mild",
        "Severe/Severe",
        "Severe/Unknown",
        "Unknown/Severe",
        "Unknown/Unknown",
        "Not CF/Not CF"
    ),
    labels = c("M/M", "M/S", "M/U", "M/S", "S/S", "S/U", "S/U", "U", "Not CF")
)
## By function
df$geno1_class <- cf_genotype_class_severity(df$Genotypes1, out = "class")
df$geno1_class[grep("508", df$Genotypes1)] <- "F508del"
df$geno1_class <- replace(
    df$geno1_class,
    df$geno1_class %in% c("I", "II", "III"),
    "MF"
)
df$geno1_class <- replace(
    df$geno1_class,
    df$geno1_class %in% c("IV", "V"),
    "RF"
)
df$geno2_class <- cf_genotype_class_severity(df$Genotypes2, out = "class")
df$geno2_class[grep("508", df$Genotypes2)] <- "F508del"
df$geno2_class <- replace(
    df$geno2_class,
    df$geno2_class %in% c("I", "II", "III"),
    "MF"
)
df$geno2_class <- replace(
    df$geno2_class,
    df$geno2_class %in% c("IV", "V"),
    "RF"
)
df$geno1_class[df$Diagnosis == "Non-CF"] <- "Not CF"
df$geno2_class[df$Diagnosis == "Non-CF"] <- "Not CF"
df$geno_class <- paste(df$geno1_class, df$geno2_class, sep = "/")
df$geno_class <- factor(
    df$geno_class,
    levels = c(
        "F508del/F508del",
        "F508del/MF",
        "F508del/RF",
        "F508del/Unknown",
        "MF/F508del",
        "MF/MF",
        "MF/RF",
        "MF/Unknown",
        "RF/F508del",
        "RF/MF",
        "RF/Unknown",
        "Unknown/F508del",
        "Unknown/MF",
        "Unknown/Unknown",
        "Not CF/Not CF"
    ),
    labels = c(
        "MF/MF",
        "MF/MF",
        "MF/RF",
        "MF/U",
        "MF/MF",
        "MF/MF",
        "MF/RF",
        "MF/U",
        "MF/RF",
        "MF/RF",
        "RF/U",
        "MF/U",
        "MF/U",
        "U",
        "Not CF"
    )
)
# Organize columns
df <- df %>%
    select(Name:Genotypes2, geno_risk, geno_class, everything()) %>%
    select(-geno_risk_1, -geno_risk_2, -geno1_class, -geno2_class) %>%
    rename(`Genotype Risk` = geno_risk, `Genotype Class` = geno_class)
# Set table options
mycontrols <- tableby.control(
    numeric.stats = c("N", "Nmiss", "meansd", "medianq1q3", "range")
)
# Save this for Angela et al. to check
write.csv(
    df,
    file = "./Data_Cleaned/sweat_variability_analysis_dataset.csv",
    row.names = F,
    na = ""
)
```

# Full Cohort

## Table 1: Participant Demographics by Diagnosis

```{r results='asis'}
summary(tableby(
    Diagnosis ~ Sex + Age + Na + Cl + `Na:Cl` + K,
    data = df,
    control = mycontrols
))
```

## Table 2: Participant Demographics by Genotype Class

In the table below "MF" stands for minimal function, "RF" for residual function, and "U" indicates unknown.

```{r results='asis'}
summary(tableby(
    `Genotype Class` ~ Sex + Age + Na + Cl + `Na:Cl` + K,
    data = df,
    control = mycontrols
))
```

## Table 3: Participant Demographics by Genotype Risk

In the table below "M" stands for mild, "S" for severe, and "U" indicates unknown.

```{r results='asis'}
summary(tableby(
    `Genotype Risk` ~ Sex + Age + Na + Cl + `Na:Cl` + K,
    data = df,
    control = mycontrols
))
```

## Boxplots

### Chloride

#### By diagnosis

```{r}
#| warning: false
clp <- ggplot(df, aes(x = Diagnosis, y = Cl)) +
    geom_boxplot() +
    theme_bw()
clp
```

#### By genotype class

```{r}
#| warning: false
clp <- ggplot(df, aes(x = `Genotype Class`, y = Cl)) +
    geom_boxplot() +
    theme_bw()
clp
```

#### By genotype risk

```{r}
#| warning: false
clp <- ggplot(df, aes(x = `Genotype Risk`, y = Cl)) +
    geom_boxplot() +
    theme_bw()
clp
```

### Sodium

#### By diagnosis

```{r}
#| warning: false
nap <- ggplot(df, aes(x = Diagnosis, y = Na)) +
    geom_boxplot() +
    theme_bw()
nap
```

#### By genotype class

```{r}
#| warning: false
nap <- ggplot(df, aes(x = `Genotype Class`, y = Na)) +
    geom_boxplot() +
    theme_bw()
nap
```

#### By genotype risk

```{r}
#| warning: false
nap <- ggplot(df, aes(x = `Genotype Risk`, y = Na)) +
    geom_boxplot() +
    theme_bw()
nap
```

### Na:Cl

#### By diagnosis

```{r}
#| warning: false
ratiop <- ggplot(df, aes(x = Diagnosis, y = `Na:Cl`)) +
    geom_boxplot() +
    geom_hline(yintercept = 1, color = "red") +
    geom_hline(yintercept = 1.25, color = "red") +
    theme_bw() +
    ylab("Na:Cl") +
    xlab("Modulator")
ratiop
ratiop <- ggplot(df, aes(x = Diagnosis, y = `Na:Cl`)) +
    geom_boxplot() +
    geom_hline(yintercept = 1, color = "red") +
    geom_hline(yintercept = 1.25, color = "red") +
    ylim(0, 2) +
    theme_bw() +
    ylab("Na:Cl") +
    xlab("Modulator")
ratiop
```

#### By genotype class

```{r}
#| warning: false
ratiop <- ggplot(df, aes(x = `Genotype Class`, y = `Na:Cl`)) +
    geom_boxplot() +
    geom_hline(yintercept = 1, color = "red") +
    geom_hline(yintercept = 1.25, color = "red") +
    theme_bw() +
    ylab("Na:Cl") +
    xlab("Modulator")
ratiop
ratiop <- ggplot(df, aes(x = `Genotype Class`, y = `Na:Cl`)) +
    geom_boxplot() +
    geom_hline(yintercept = 1, color = "red") +
    geom_hline(yintercept = 1.25, color = "red") +
    ylim(0, 2) +
    theme_bw() +
    ylab("Na:Cl") +
    xlab("Modulator")
ratiop
```

#### By genotype risk

```{r}
#| warning: false
ratiop <- ggplot(df, aes(x = `Genotype Risk`, y = `Na:Cl`)) +
    geom_boxplot() +
    geom_hline(yintercept = 1, color = "red") +
    geom_hline(yintercept = 1.25, color = "red") +
    theme_bw() +
    ylab("Na:Cl") +
    xlab("Modulator")
ratiop
ratiop <- ggplot(df, aes(x = `Genotype Risk`, y = `Na:Cl`)) +
    geom_boxplot() +
    geom_hline(yintercept = 1, color = "red") +
    geom_hline(yintercept = 1.25, color = "red") +
    ylim(0, 2) +
    theme_bw() +
    ylab("Na:Cl") +
    xlab("Modulator")
ratiop
```

## Na:Cl ROC Curves

```{r}
# Fit a multiclass ROC
mc_roc <- multiclass.roc(df$Diagnosis, df$`Na:Cl`, quiet = T)
roc_list <- list(
    "Cystic Fibrosis vs. Non-CF" = mc_roc$rocs[[2]],
    "CFTR-RD or CRMS vs. Cystic Fibrosis" = mc_roc$rocs[[1]],
    "CFTR-RD or CRMS vs. Non-CF" = mc_roc$rocs[[3]]
)
ggroc(roc_list, legacy.axes = T) +
    theme_bw() +
    theme(legend.title = element_blank())
roc_table <- lapply(roc_list, function(r) {
    coords(
        r,
        "best",
        best.method = "youden",
        ret = c(
            "threshold",
            "sensitivity",
            "specificity",
            "accuracy",
            "tpr",
            "fpr",
            "tnr",
            "fnr"
        )
    )
})
roc_table <- do.call(rbind, roc_table)
kable(roc_table, digits = 3)
```

- The multiclass AUC for Na:Cl is `r round(as.numeric(auc(mc_roc)),3)`. 

### Individual ROC Curves

```{r}
plot(
    roc_list[[2]],
    print.auc = T,
    print.thres = T,
    main = "Cystic Fibrosis vs. CFTR-RD or CRMS"
)
plot(
    roc_list[[1]],
    print.auc = T,
    print.thres = T,
    main = "Cystic Fibrosis vs. Non-CF"
)
plot(
    roc_list[[3]],
    print.auc = T,
    print.thres = T,
    main = "CFTR-RD or CRMS vs. Non-CF"
)
```

# Excluding Cl $\leq$ 30

```{r}
df <- df %>% filter(Cl > 30)
```

## Table 1: Participant Demographics by Diagnosis

```{r results='asis'}
summary(tableby(
    Diagnosis ~ Sex + Age + Na + Cl + `Na:Cl` + K,
    data = df,
    control = mycontrols
))
```

## Table 2: Participant Demographics by Genotype Class

In the table below "MF" stands for minimal function, "RF" for residual function, and "U" indicates unknown.

```{r results='asis'}
summary(tableby(
    `Genotype Class` ~ Sex + Age + Na + Cl + `Na:Cl` + K,
    data = df,
    control = mycontrols
))
```

## Table 3: Participant Demographics by Genotype Risk

In the table below "M" stands for mild, "S" for severe, and "U" indicates unknown.

```{r results='asis'}
summary(tableby(
    `Genotype Risk` ~ Sex + Age + Na + Cl + `Na:Cl` + K,
    data = df,
    control = mycontrols
))
```

## Boxplots

### Chloride

#### By diagnosis

```{r}
#| warning: false
clp <- ggplot(df, aes(x = Diagnosis, y = Cl)) +
    geom_boxplot() +
    theme_bw()
clp
```

#### By genotype class

```{r}
#| warning: false
clp <- ggplot(df, aes(x = `Genotype Class`, y = Cl)) +
    geom_boxplot() +
    theme_bw()
clp
```

#### By genotype risk

```{r}
#| warning: false
clp <- ggplot(df, aes(x = `Genotype Risk`, y = Cl)) +
    geom_boxplot() +
    theme_bw()
clp
```

### Sodium

#### By diagnosis

```{r}
#| warning: false
nap <- ggplot(df, aes(x = Diagnosis, y = Na)) +
    geom_boxplot() +
    theme_bw()
nap
```

#### By genotype class

```{r}
#| warning: false
nap <- ggplot(df, aes(x = `Genotype Class`, y = Na)) +
    geom_boxplot() +
    theme_bw()
nap
```

#### By genotype risk

```{r}
#| warning: false
nap <- ggplot(df, aes(x = `Genotype Risk`, y = Na)) +
    geom_boxplot() +
    theme_bw()
nap
```

### Na:Cl

#### By diagnosis

```{r}
#| warning: false
ratiop <- ggplot(df, aes(x = Diagnosis, y = `Na:Cl`)) +
    geom_boxplot() +
    geom_hline(yintercept = 1, color = "red") +
    geom_hline(yintercept = 1.25, color = "red") +
    theme_bw() +
    ylab("Na:Cl") +
    xlab("Modulator")
ratiop
ratiop <- ggplot(df, aes(x = Diagnosis, y = `Na:Cl`)) +
    geom_boxplot() +
    geom_hline(yintercept = 1, color = "red") +
    geom_hline(yintercept = 1.25, color = "red") +
    ylim(0, 2) +
    theme_bw() +
    ylab("Na:Cl") +
    xlab("Modulator")
ratiop
```

#### By genotype class

```{r}
#| warning: false
ratiop <- ggplot(df, aes(x = `Genotype Class`, y = `Na:Cl`)) +
    geom_boxplot() +
    geom_hline(yintercept = 1, color = "red") +
    geom_hline(yintercept = 1.25, color = "red") +
    theme_bw() +
    ylab("Na:Cl") +
    xlab("Modulator")
ratiop
ratiop <- ggplot(df, aes(x = `Genotype Class`, y = `Na:Cl`)) +
    geom_boxplot() +
    geom_hline(yintercept = 1, color = "red") +
    geom_hline(yintercept = 1.25, color = "red") +
    ylim(0, 2) +
    theme_bw() +
    ylab("Na:Cl") +
    xlab("Modulator")
ratiop
```

#### By genotype risk

```{r}
#| warning: false
ratiop <- ggplot(df, aes(x = `Genotype Risk`, y = `Na:Cl`)) +
    geom_boxplot() +
    geom_hline(yintercept = 1, color = "red") +
    geom_hline(yintercept = 1.25, color = "red") +
    theme_bw() +
    ylab("Na:Cl") +
    xlab("Modulator")
ratiop
ratiop <- ggplot(df, aes(x = `Genotype Risk`, y = `Na:Cl`)) +
    geom_boxplot() +
    geom_hline(yintercept = 1, color = "red") +
    geom_hline(yintercept = 1.25, color = "red") +
    ylim(0, 2) +
    theme_bw() +
    ylab("Na:Cl") +
    xlab("Modulator")
ratiop
```

## Na:Cl ROC Curves

```{r}
# Fit a multiclass ROC
mc_roc <- multiclass.roc(df$Diagnosis, df$`Na:Cl`, quiet = T)
roc_list <- list(
    "Cystic Fibrosis vs. Non-CF" = mc_roc$rocs[[2]],
    "CFTR-RD or CRMS vs. Cystic Fibrosis" = mc_roc$rocs[[1]],
    "CFTR-RD or CRMS vs. Non-CF" = mc_roc$rocs[[3]]
)
ggroc(roc_list, legacy.axes = T) +
    theme_bw() +
    theme(legend.title = element_blank())
roc_table <- lapply(roc_list, function(r) {
    coords(
        r,
        "best",
        best.method = "youden",
        ret = c(
            "threshold",
            "sensitivity",
            "specificity",
            "accuracy",
            "tpr",
            "fpr",
            "tnr",
            "fnr"
        )
    )
})
roc_table <- do.call(rbind, roc_table)
kable(roc_table, digits = 3)
```

- The multiclass AUC for Na:Cl is `r round(as.numeric(auc(mc_roc)),3)`. 

### Individual ROC Curves

```{r}
plot(
    roc_list[[2]],
    print.auc = T,
    print.thres = T,
    main = "Cystic Fibrosis vs. CFTR-RD or CRMS"
)
plot(
    roc_list[[1]],
    print.auc = T,
    print.thres = T,
    main = "Cystic Fibrosis vs. Non-CF"
)
plot(
    roc_list[[3]],
    print.auc = T,
    print.thres = T,
    main = "CFTR-RD or CRMS vs. Non-CF"
)
```
