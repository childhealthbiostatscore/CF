---
title: "Pulmonary Exacerbations in CF"
author: "Tim Vigers"
date: "today"
date-format: long
format:
  html:
    toc: true
    toc-depth: 5
    toc-float: true
    code-fold: true
    self-contained: true
    fig-cap-location: top
    page-layout: full
    theme:
      light: flatly
      dark: darkly
editor: source
---

```{r setup}
#| include: false
library(dplyr)
library(tidyr)
library(lubridate)
library(gtsummary)
library(ggpubr)
library(rspiro)
library(patchwork)
home_dir <- switch(Sys.info()["sysname"],
  "Darwin" = "/Users/timvigers/Library/CloudStorage/OneDrive-TheUniversityofColoradoDenver/Vigers/CF/Scott Sagel/PEx in CF",
  "Windows" = "C:/Users/timvigers/OneDrive - The University of Colorado Denver/Vigers/CF/Scott Sagel/PEx in CF",
  "Linux" = "/home/timvigers/OneDrive/Vigers/CF/Scott Sagel/PEx in CF"
)
github_dir <- switch(Sys.info()["sysname"],
  "Darwin" = "/Users/timvigers/GitHub",
  "Windows" = "C:/Users/timvigers/GitHub",
  "Linux" = "/home/timvigers/GitHub"
)
knitr::opts_knit$set(root.dir = home_dir)
# Colors for plots
yellow <- "#f8b80a"
red <- "#e30022"
purple <- "#7b2670"
blue <- "#022451"
```

```{r data cleaning}
#| warning: false
# Import
df <- read.csv("./Data_Raw/ExacerbationsInCF222_DATA_2024-01-02_0857.csv",
  na.strings = ""
)
# Get admit year (some missing in admit_year field)
df$year <- year(df$admit_date)
# Rename centers
df$redcap_data_access_group <- factor(df$redcap_data_access_group,
  levels = c("chco", "childrens_national", "orange_county", "rady", "seattle"),
  labels = c("CHCO", "Children's National", "Orange County", "Rady", "Seattle")
)
# CFTR modulators
df$cftr_mod <- factor(df$cftr_mod, levels = 0:1, labels = c("No", "Yes"))
df$cftr_mod_spec[df$cftr_mod == "No"] <- 5
df$cftr_mod_spec <- factor(df$cftr_mod_spec,
  levels = 1:5,
  labels = c("Kalydeco", "Orkambi", "Symdeko", "Trikafta", "None")
)
df$Trikafta <- factor(df$cftr_mod_spec == "Trikafta",
  levels = c(F, T), labels = c("No", "Yes")
)
# Other medications
df$azithro <- factor(df$azithro, levels = 0:1, labels = c("No", "Yes"))
df$inhaled_abx <- factor(df$inhaled_abx,
  levels = 0:1,
  labels = c("No", "Yes")
)
df$steroids_system <- factor(df$steroids_system,
  levels = 0:1,
  labels = c("No", "Yes")
)
# Tests
df$fungal_test <- factor(df$fungal_test, levels = 0:1, labels = c("No", "Yes"))
df$ntm_test <- factor(df$ntm_test, levels = 0:1, labels = c("No", "Yes"))
df$viral_test <- factor(df$viral_test, levels = 0:1, labels = c("No", "Yes"))
df$viral_test_results <- factor(df$viral_test_results,
  levels = 0:1, labels = c("Negative", "Positive")
)
# % predicted FEV1
df$sex <- factor(df$sex, levels = c(2, 1), labels = c("Male", "Female"))
df$fev1_baseline <- rowMeans(df[, paste0("fev1_baseline", 1:6)], na.rm = T)
# Add fill in demographic variables
df <- df %>%
  group_by(sid) %>%
  fill(
    sex, race, ethnicity, mutation1, mutation2,
    insurance___1:insurance___8
  ) %>%
  ungroup()
# Predicted lung function
df$ppfev1_admit <- pctpred_GLIgl(
  age = df$age_at_admit, height = df$height / 100, gender = as.numeric(df$sex),
  FEV1 = df$fev1_admit
)
df$ppfev1_baseline <- pctpred_GLIgl(
  age = df$age_at_admit, height = df$height / 100, gender = as.numeric(df$sex),
  FEV1 = df$fev1_baseline
)
df$ppfev1_discharge <- pctpred_GLIgl(
  age = df$age_at_admit, height = df$height / 100, gender = as.numeric(df$sex),
  FEV1 = df$fev1_discharge
)
# Demographic variables
df$age_group <- cut(df$age_at_admit, c(-Inf, 6, 12, 18, Inf),
  right = F,
  labels = c("<6 yrs", "≥6-<12 yrs", "≥12-<18 yrs", "≥18 yrs")
)
df$race <- factor(df$race,
  levels = 1:8,
  labels = c(
    "White", "Black or African-American", "Other", "Asian", "Other",
    "Other", "Other", "Unknown/not reported"
  )
)
df$ethnicity <- factor(df$ethnicity,
  levels = 1:3,
  labels = c(
    "Hispanic or Latino", "Not Hispanic or Latino", "Unknown or not reported"
  )
)
df$mutation1 <- factor(df$mutation1,
  levels = 1:15,
  labels = c("F508del", rep("Other", times = 14))
)
df$mutation2 <- factor(df$mutation2,
  levels = 1:15,
  labels = c("F508del", rep("Other", times = 14))
)
df$Genotype <- factor(
  paste0(as.character(df$mutation1), "/", as.character(df$mutation2)),
  levels = c(
    "F508del/F508del", "F508del/Other", "Other/F508del", "Other/Other"
  ),
  labels = c(
    "F508del Homozygous", "F508del Heterozygous", "F508del Heterozygous",
    "Other"
  )
)
insurances <- c(
  "Private insurance", "Medicare", "Medicaid", "Other",
  "Tricare/other military health plan", "Other", "Other", "None"
)
df$Insurance <- apply(
  df[, grep("insurance___", colnames(df))], 1,
  function(r) {
    w <- which(r == 1)
    if (length(w) == 0) {
      return("None")
    } else {
      return(paste0(insurances[which(r == 1)], collapse = "/"))
    }
  }
)
df$Insurance <- factor(df$Insurance,
  levels = c(
    "Medicaid", "Medicaid/None", "Medicaid/Other", "Medicare", "Medicare/Other",
    "None", "Other", "Private insurance", "Private insurance/Medicaid",
    "Private insurance/Other",
    "Private insurance/Tricare/other military health plan",
    "Tricare/other military health plan"
  ),
  labels = c(
    "Medicaid", "Medicaid", "Medicaid", "Medicare", "Medicare", "None/Other",
    "None/Other", "Private insurance", "Private insurance", "Private insurance",
    "Tricare/other military health plan", "Tricare/other military health plan"
  )
)
df$admit_cx_source <- factor(df$admit_cx_source,
  levels = 1:4,
  labels = c(
    "Bronchoscopy", "Expectorated sputum", "Induced sputum", "Throat swab"
  )
)
# Combine species
df$any_fungi <- apply(df, 1, function(r) {
  r <- as.numeric(r[paste0("fungi___", 1:5)])
  any(r == 1)
})
df$any_fungi <- factor(df$any_fungi, levels = c(F, T), labels = c("No", "Yes"))
df$any_ntm <- apply(df, 1, function(r) {
  r <- as.numeric(r[paste0("ntm___", 1:3)])
  any(r == 1)
})
df$any_ntm <- factor(df$any_ntm, levels = c(F, T), labels = c("No", "Yes"))
df$any_virus <- apply(df, 1, function(r) {
  r <- as.numeric(r[paste0("viruses___", 1:5)])
  any(r == 1)
})
df$any_virus <- factor(df$any_virus, levels = c(F, T), labels = c("No", "Yes"))
df$any_bact <- apply(df, 1, function(r) {
  r <- as.numeric(r[paste0("admit_cx_results___", 1:9)])
  any(r == 1)
})
df$any_bact <- factor(df$any_bact, levels = c(F, T), labels = c("No", "Yes"))

df$no_bact <- apply(df, 1, function(r) {
  r <- as.numeric(r[paste0("admit_cx_results___", 1:8)])
  all(r == 0)
})
df$no_bact <- factor(df$no_bact, levels = c(F, T), labels = c("No", "Yes"))
# Change in FEV1 from admission to discharge
df$ppfev1_change <- df$ppfev1_discharge - df$ppfev1_admit
# Format fungi, NTM, etc. columns
df <- df %>%
  mutate(
    across(
      c(
        fungi___1:fungi___5, ntm___1:ntm___3, viruses___1:viruses___5,
        admit_cx_results___1:admit_cx_results___9
      ),
      ~ factor(as.numeric(.x),
        levels = 0:1,
        labels = c("Not detected", "Detected")
      )
    )
  )
# Labels
labels <- list(
  "Age group at admission" = "age_group",
  "Age at admission" = "age_at_admit", "Sex" = "sex",
  "Race" = "race", "Ethnicity" = "ethnicity",
  "Azithromycin" = "azithro", "Inhaled antibiotics" = "inhaled_abx",
  "Systemic steroids" = "steroids_system",
  "Source of respiratory culture at admit" = "admit_cx_source",
  "Aspergillus fumigatus" = "fungi___1",
  "Aspergillus (other species)" = "fungi___2",
  "Scedosporium apiospermum" = "fungi___3",
  "Candidia (any species)" = "fungi___4",
  "Other fungus" = "fungi___5",
  "Any fungi?" = "any_fungi",
  "NTM testing performed?" = "ntm_test",
  "Fungal testing performed?" = "fungal_test",
  "Viral testing performed?" = "viral_test",
  "Viral testing results" = "viral_test_results",
  "Influenza A or B" = "viruses___1",
  "Respiratory Syncytial Virus" = "viruses___2",
  "Rhinovirus/enterovirus" = "viruses___3",
  "SARS CoV-2" = "viruses___4",
  "Other virus" = "viruses___5",
  "Any virus?" = "any_virus",
  "M. abscessus species" = "ntm___1",
  "M. avium complex species" = "ntm___2",
  "Other NTM species" = "ntm___3",
  "Any NTM?" = "any_ntm",
  "A. xylosoxidans" = "admit_cx_results___1",
  "B. cepacia complex" = "admit_cx_results___2",
  "H. influenzae" = "admit_cx_results___3",
  "MRSA" = "admit_cx_results___4",
  "Methicillin-susceptible Staph aureus" = "admit_cx_results___5",
  "P. aeruginosa" = "admit_cx_results___6",
  "P. aeruginosa mucoid" = "admit_cx_results___7",
  "S. maltophilia" = "admit_cx_results___8",
  "Other bacteria" = "admit_cx_results___9",
  "Any bacteria?" = "any_bact",
  "No CF bacteria" = "no_bact",
  "On CFTR Modulator?" = "cftr_mod",
  "CFTR Modulator Type" = "cftr_mod_spec",
  "Site" = "redcap_data_access_group",
  "Length of Admission" = "days_admit",
  "Systemic Steroids" = "steroids_system",
  "Oral Steroids" = "steroids_oral",
  "IV Steroids" = "steroids_iv",
  "Baseline FEV1pp" = "ppfev1_baseline",
  "Admission FEV1pp" = "ppfev1_admit",
  "Discharge FEV1pp" = "ppfev1_discharge",
  "Change in mean FEV1pp from admit to discharge" = "ppfev1_change"
)
labels <- as.list(setNames(names(labels), labels))
# Format
df <- df %>%
  select(
    sid,
    redcap_data_access_group, year, sex, age_group, age_at_admit, race,
    ethnicity, Genotype, Insurance, cftr_mod, cftr_mod_spec,
    Trikafta, azithro, inhaled_abx, steroids_system, admit_cx_source,
    ppfev1_baseline, ppfev1_admit, ppfev1_discharge, ppfev1_change,
    days_admit, fungal_test, fungi___1:fungi___5, any_fungi,
    ntm_test, ntm___1:ntm___3, any_ntm,
    viral_test, viruses___1:viruses___5, any_virus,
    admit_cx_results___1:admit_cx_results___9, any_bact, no_bact,
    contains("steroids")
  ) %>%
  filter(!is.na(year))
```

# Demographics

```{r}
#| label: tbl-table-1
#| tbl-cap: Participant characteristics overall
df %>%
  group_by(sid) %>%
  filter(row_number() == 1) %>%
  ungroup() %>%
  select(redcap_data_access_group, sex, race, ethnicity, Genotype) %>%
  tbl_summary(missing_text = "(Missing)", label = labels)
```

```{r}
#| label: tbl-table-1-year
#| tbl-cap: Participant characteristics by year
df %>%
  group_by(sid, year) %>%
  filter(row_number() == 1) %>%
  ungroup() %>%
  select(year, redcap_data_access_group, sex, race, ethnicity, Genotype) %>%
  tbl_summary(by = year, missing_text = "(Missing)", label = labels) %>%
  add_p() %>%
  separate_p_footnotes()
```

```{r}
#| label: tbl-table-1-indep
#| tbl-cap: Participant characteristics at admission by year
df %>%
  select(redcap_data_access_group:days_admit) %>%
  tbl_summary(
    by = year, missing_text = "(Missing)", label = labels,
    statistic =
      list(
        all_continuous() ~ "{median} [{p25}, {p75}]",
        c(
          age_at_admit, ppfev1_baseline, ppfev1_admit, ppfev1_discharge,
          ppfev1_change
        ) ~
          "{mean} ({sd})"
      )
  ) %>%
  add_p(
    test =
      list(
        c(age_at_admit, ppfev1_baseline, ppfev1_admit, ppfev1_discharge) ~
          "t.test"
      ),
    test.args = all_tests("fisher.test") ~ list(simulate.p.value = T)
  ) %>%
  separate_p_footnotes()
```

```{r}
#| label: tbl-table-1-eti-2022
#| tbl-cap: Participant characteristics on ETI in 2022
df %>%
  filter(Trikafta == "Yes", year == 2022) %>%
  select(redcap_data_access_group:days_admit, -year) %>%
  tbl_summary(
    missing_text = "(Missing)", label = labels,
    statistic =
      list(
        all_continuous() ~ "{median} [{p25}, {p75}]",
        c(age_at_admit, ppfev1_baseline, ppfev1_admit, ppfev1_discharge) ~
          "{mean} ({sd})"
      )
  )
```

# Fungi

The tables below are limited to patients who had fungal testing performed.

```{r}
#| label: tbl-fungi
#| tbl-cap: Fungi
df %>%
  filter(fungal_test == "Yes") %>%
  select(year, redcap_data_access_group, fungi___1:fungi___5, any_fungi) %>%
  tbl_summary(by = year, missing_text = "Missing", label = labels) %>%
  add_overall() %>%
  add_p() %>%
  separate_p_footnotes()
```

```{r}
#| label: tbl-fungi-center
#| tbl-cap: Fungi by center
#| message: false
df %>%
  filter(fungal_test == "Yes") %>%
  select(year, redcap_data_access_group, fungi___1:fungi___5, any_fungi) %>%
  tbl_strata(
    strata = redcap_data_access_group,
    .tbl_fun =
      ~ .x %>%
        tbl_summary(by = year, missing_text = "Missing", label = labels) %>%
        add_overall() %>%
        add_p() %>%
        separate_p_footnotes()
  )
```

```{r}
#| label: tbl-fungi-cftr-mod
#| tbl-cap: Fungi by modulator status
#| message: false
df %>%
  filter(fungal_test == "Yes") %>%
  select(year, cftr_mod, fungi___1:fungi___5, any_fungi) %>%
  tbl_strata(
    strata = year,
    .tbl_fun =
      ~ .x %>%
        tbl_summary(by = cftr_mod, missing_text = "Missing", label = labels) %>%
        add_overall() %>%
        add_p() %>%
        separate_p_footnotes()
  )
```

```{r}
#| label: tbl-fungi-cftr-mod-spec
#| tbl-cap: Fungi by specific modulator status
#| message: false
df %>%
  filter(fungal_test == "Yes") %>%
  select(year, cftr_mod_spec, fungi___1:fungi___5, any_fungi) %>%
  tbl_strata(
    strata = year,
    .tbl_fun =
      ~ .x %>%
        tbl_summary(
          by = cftr_mod_spec, missing_text = "Missing",
          label = labels
        ) %>%
        add_overall() %>%
        add_p() %>%
        separate_p_footnotes()
  )
```

```{r}
#| label: tbl-fungi-trikafta
#| tbl-cap: Fungi by Trikafta status
#| message: false
df %>%
  filter(fungal_test == "Yes") %>%
  select(year, Trikafta, fungi___1:fungi___5, any_fungi) %>%
  tbl_strata(
    strata = year,
    .tbl_fun =
      ~ .x %>%
        tbl_summary(by = Trikafta, missing_text = "Missing", label = labels) %>%
        add_overall() %>%
        add_p() %>%
        separate_p_footnotes()
  )
```

# NTM

The tables below are limited to patients who had NTM testing performed.

```{r}
#| label: tbl-ntm
#| tbl-cap: NTM
df %>%
  filter(ntm_test == "Yes") %>%
  select(year, redcap_data_access_group, ntm___1:ntm___3, any_ntm) %>%
  tbl_summary(by = year, missing_text = "Missing", label = labels) %>%
  add_overall() %>%
  add_p() %>%
  separate_p_footnotes()
```

```{r}
#| label: tbl-ntm-center
#| tbl-cap: NTM by center
#| message: false
df %>%
  filter(ntm_test == "Yes") %>%
  select(year, redcap_data_access_group, ntm___1:ntm___3, any_ntm) %>%
  tbl_strata(
    strata = redcap_data_access_group,
    .tbl_fun =
      ~ .x %>%
        tbl_summary(by = year, missing_text = "Missing", label = labels) %>%
        add_overall() %>%
        add_p() %>%
        separate_p_footnotes()
  )
```

```{r}
#| label: tbl-ntm-cftr-mod
#| tbl-cap: NTM by modulator status
#| message: false
df %>%
  filter(ntm_test == "Yes") %>%
  select(year, cftr_mod, ntm___1:ntm___3, any_ntm) %>%
  tbl_strata(
    strata = year,
    .tbl_fun =
      ~ .x %>%
        tbl_summary(
          by = cftr_mod, missing_text = "Missing",
          label = labels
        ) %>%
        add_overall() %>%
        add_p() %>%
        separate_p_footnotes()
  )
```

```{r}
#| label: tbl-ntm-cftr-mod-spec
#| tbl-cap: NTM by specific modulator status
#| message: false
df %>%
  filter(ntm_test == "Yes") %>%
  select(year, cftr_mod_spec, ntm___1:ntm___3, any_ntm) %>%
  tbl_strata(
    strata = year,
    .tbl_fun =
      ~ .x %>%
        tbl_summary(
          by = cftr_mod_spec, missing_text = "Missing",
          label = labels
        ) %>%
        add_overall() %>%
        add_p() %>%
        separate_p_footnotes()
  )
```

```{r}
#| label: tbl-ntm-trikafta
#| tbl-cap: NTM by Trikafta status
#| message: false
df %>%
  filter(ntm_test == "Yes") %>%
  select(year, Trikafta, ntm___1:ntm___3, any_ntm) %>%
  tbl_strata(
    strata = year,
    .tbl_fun =
      ~ .x %>%
        tbl_summary(by = Trikafta, missing_text = "Missing", label = labels) %>%
        add_overall() %>%
        add_p() %>%
        separate_p_footnotes()
  )
```

# Viruses

The tables below are limited to patients who had viral testing performed.

```{r}
#| label: tbl-viruses
#| tbl-cap: Viruses
df %>%
  filter(viral_test == "Yes") %>%
  select(year, redcap_data_access_group, viruses___1:viruses___5, any_virus) %>%
  tbl_summary(by = year, missing_text = "Missing", label = labels) %>%
  add_overall() %>%
  add_p() %>%
  separate_p_footnotes()
```

```{r}
#| label: tbl-viruses-cftr-mod
#| tbl-cap: Viruses by modulator status
#| message: false
df %>%
  filter(viral_test == "Yes") %>%
  select(year, cftr_mod, viruses___1:viruses___5, any_virus) %>%
  tbl_strata(
    strata = year,
    .tbl_fun =
      ~ .x %>%
        tbl_summary(by = cftr_mod, missing_text = "Missing", label = labels) %>%
        add_overall() %>%
        add_p() %>%
        separate_p_footnotes()
  )
```

```{r}
#| label: tbl-viruses-cftr-mod-spec
#| tbl-cap: Viruses by specific modulator status
#| message: false
df %>%
  filter(viral_test == "Yes") %>%
  select(year, cftr_mod_spec, viruses___1:viruses___5, any_virus) %>%
  tbl_strata(
    strata = year,
    .tbl_fun =
      ~ .x %>%
        tbl_summary(
          by = cftr_mod_spec, missing_text = "Missing",
          label = labels
        ) %>%
        add_overall() %>%
        add_p() %>%
        separate_p_footnotes()
  )
```

```{r}
#| label: tbl-viruses-trikafta
#| tbl-cap: Viruses by Trikafta status
#| message: false
df %>%
  filter(viral_test == "Yes") %>%
  select(year, Trikafta, viruses___1:viruses___5, any_virus) %>%
  tbl_strata(
    strata = year,
    .tbl_fun =
      ~ .x %>%
        tbl_summary(by = Trikafta, missing_text = "Missing", label = labels) %>%
        add_overall() %>%
        add_p() %>%
        separate_p_footnotes()
  )
```

# Bacteria

```{r}
#| label: tbl-bacteria
#| tbl-cap: Bacteria
df %>%
  select(
    year, redcap_data_access_group,
    admit_cx_results___1:admit_cx_results___9, any_bact, no_bact
  ) %>%
  tbl_summary(by = year, missing_text = "Missing", label = labels) %>%
  add_overall() %>%
  add_p() %>%
  separate_p_footnotes()
```

```{r}
#| label: tbl-bacteria-center
#| tbl-cap: Bacteria by center
#| message: false
df %>%
  select(
    year, redcap_data_access_group, admit_cx_results___1:admit_cx_results___9,
    any_bact, no_bact
  ) %>%
  tbl_strata(
    strata = redcap_data_access_group,
    .tbl_fun =
      ~ .x %>%
        tbl_summary(by = year, missing_text = "Missing", label = labels) %>%
        add_overall() %>%
        add_p() %>%
        separate_p_footnotes()
  )
```

```{r}
#| label: tbl-bacteria-cftr-mod
#| tbl-cap: Bacteria by modulator status
#| message: false
df %>%
  select(
    year, cftr_mod, admit_cx_results___1:admit_cx_results___9, any_bact, no_bact
  ) %>%
  tbl_strata(
    strata = year,
    .tbl_fun =
      ~ .x %>%
        tbl_summary(
          by = cftr_mod, missing_text = "Missing",
          label = labels
        ) %>%
        add_overall() %>%
        add_p() %>%
        separate_p_footnotes()
  )
```

```{r}
#| label: tbl-bacteria-cftr-mod-spec
#| tbl-cap: Bacteria by specfic modulator status
#| message: false
df %>%
  select(
    year, cftr_mod_spec, admit_cx_results___1:admit_cx_results___9, any_bact,
    no_bact
  ) %>%
  tbl_strata(
    strata = year,
    .tbl_fun =
      ~ .x %>%
        tbl_summary(
          by = cftr_mod_spec, missing_text = "Missing",
          label = labels
        ) %>%
        add_overall() %>%
        add_p() %>%
        separate_p_footnotes()
  )
```

```{r}
#| label: tbl-bacteria-trikafta
#| tbl-cap: Bacteria by Trikafta status
#| message: false
df %>%
  select(
    year, Trikafta, admit_cx_results___1:admit_cx_results___9, any_bact, no_bact
  ) %>%
  tbl_strata(
    strata = year,
    .tbl_fun =
      ~ .x %>%
        tbl_summary(by = Trikafta, missing_text = "Missing", label = labels) %>%
        add_overall() %>%
        add_p() %>%
        separate_p_footnotes()
  )
```

# Days of admission

```{r}
#| label: tbl-days
#| tbl-cap: Length of admission
df %>%
  select(year, days_admit) %>%
  tbl_summary(by = year, missing_text = "Missing", label = labels) %>%
  add_overall() %>%
  add_p() %>%
  separate_p_footnotes()
```

```{r}
#| label: tbl-days-center
#| tbl-cap: Length of admission by center
#| message: false
df %>%
  select(year, redcap_data_access_group, days_admit) %>%
  tbl_strata(
    strata = redcap_data_access_group,
    .tbl_fun =
      ~ .x %>%
        tbl_summary(by = year, missing_text = "Missing", label = labels) %>%
        add_overall() %>%
        add_p() %>%
        separate_p_footnotes()
  )
```

```{r}
#| label: tbl-days-cftr-mod
#| tbl-cap: Length of admission by modulator status
#| message: false
df %>%
  select(year, cftr_mod, days_admit) %>%
  tbl_strata(
    strata = year,
    .tbl_fun =
      ~ .x %>%
        tbl_summary(
          by = cftr_mod, missing_text = "Missing", label = labels
        ) %>%
        add_overall() %>%
        add_p() %>%
        separate_p_footnotes()
  )
```

```{r}
#| label: tbl-days-cftr-mod-spec
#| tbl-cap: Length of admission by specific modulator status
#| message: false
df %>%
  select(year, cftr_mod_spec, days_admit) %>%
  tbl_strata(
    strata = year,
    .tbl_fun =
      ~ .x %>%
        tbl_summary(
          by = cftr_mod_spec, missing_text = "Missing", label = labels
        ) %>%
        add_overall() %>%
        add_p() %>%
        separate_p_footnotes()
  )
```

```{r}
#| label: tbl-days-trikafta
#| tbl-cap: Length of admission by Trikafta status
#| message: false
df %>%
  select(year, Trikafta, days_admit) %>%
  tbl_strata(
    strata = year,
    .tbl_fun =
      ~ .x %>%
        tbl_summary(by = Trikafta, missing_text = "Missing", label = labels) %>%
        add_overall() %>%
        add_p() %>%
        separate_p_footnotes()
  )
```

# Steroids

```{r}
#| label: tbl-steroids
#| tbl-cap: Steroids
df %>%
  select(year, contains("steroids")) %>%
  tbl_summary(by = year, missing_text = "Missing", label = labels) %>%
  add_overall() %>%
  add_p() %>%
  separate_p_footnotes()
```

```{r}
#| label: tbl-steroids-center
#| tbl-cap: Steroids by center
#| message: false
df %>%
  select(year, redcap_data_access_group, contains("steroids")) %>%
  tbl_strata(
    strata = redcap_data_access_group,
    .tbl_fun =
      ~ .x %>%
        tbl_summary(by = year, missing_text = "Missing", label = labels) %>%
        add_overall() %>%
        add_p() %>%
        separate_p_footnotes()
  )
```

```{r}
#| label: tbl-steroids-cftr-mod
#| tbl-cap: Steroids by modulator status
#| message: false
df %>%
  select(year, cftr_mod, contains("steroids")) %>%
  tbl_strata(
    strata = year,
    .tbl_fun =
      ~ .x %>%
        tbl_summary(
          by = cftr_mod, missing_text = "Missing", label = labels
        ) %>%
        add_overall() %>%
        add_p() %>%
        separate_p_footnotes()
  )
```

```{r}
#| label: tbl-steroids-cftr-mod-spec
#| tbl-cap: Steroids by specific modulator status
#| message: false
df %>%
  select(year, cftr_mod_spec, contains("steroids")) %>%
  tbl_strata(
    strata = year,
    .tbl_fun =
      ~ .x %>%
        tbl_summary(
          by = cftr_mod_spec, missing_text = "Missing", label = labels
        ) %>%
        add_overall() %>%
        add_p() %>%
        separate_p_footnotes()
  )
```

```{r}
#| label: tbl-steroids-trikafta
#| tbl-cap: Steroids by Trikafta status
#| message: false
df %>%
  select(year, Trikafta, contains("steroids")) %>%
  tbl_strata(
    strata = year,
    .tbl_fun =
      ~ .x %>%
        tbl_summary(by = Trikafta, missing_text = "Missing", label = labels) %>%
        add_overall() %>%
        add_p() %>%
        separate_p_footnotes()
  )
```

# Plots

```{r}
#| label: fig-num-hosps
#| fig-cap: Number of hospitalizations
fig1 <- df %>%
  group_by(year) %>%
  summarise(n = n()) %>%
  ggplot(aes(x = factor(year), y = n, fill = factor(year))) +
  geom_bar(position = "dodge", stat = "identity") +
  geom_label(aes(label = n), nudge_y = -20, fill = "white") +
  ylab("Num. of Hospitalizations") +
  theme_bw() +
  theme(legend.position = "none", axis.title.x = element_blank()) +
  scale_fill_manual(values = c(purple, yellow))
fig1
```

```{r}
#| label: fig-perc-hosp-2-plus
#| fig-cap: Percent hospitalized 2 or more times in both years
fig2 <- df %>%
  group_by(sid, year) %>%
  summarise(n = n(), .groups = "drop") %>%
  group_by(year) %>%
  summarise(
    num = sum(n >= 2), total = n(),
    perc = mean(n >= 2) * 100, .groups = "drop"
  ) %>%
  ggplot(aes(x = factor(year), y = perc, fill = factor(year))) +
  geom_bar(position = "dodge", stat = "identity") +
  geom_label(aes(label = scales::percent(perc, scale = 1, accuracy = 0.1)),
    nudge_y = -5, fill = "white"
  ) +
  geom_label(aes(label = paste0(num, "/", total)),
    nudge_y = -8, fill = "white"
  ) +
  geom_signif(
    xmin = 1, xmax = 2, y_position = 50, map_signif_level = T,
    annotation = "<0.001"
  ) +
  ylab("Percent With >= 2 Hospitalizations") +
  theme_bw() +
  theme(legend.position = "none", axis.title.x = element_blank()) +
  scale_fill_manual(values = c(purple, yellow))
fig2
```

```{r}
#| label: fig-panel
#| fig-cap: Hospitalizations
fig1 + fig2
```

```{r}
#| label: fig-num-hosp-2-plus
#| fig-cap: Number hospitalized 2 or more times in both years
df %>%
  group_by(sid, year) %>%
  summarise(n = n(), .groups = "drop") %>%
  group_by(year) %>%
  summarise(
    num = sum(n >= 2), total = n(),
    .groups = "drop"
  ) %>%
  ggplot(aes(x = factor(year), y = num, fill = factor(year))) +
  geom_bar(position = "dodge", stat = "identity") +
  geom_label(aes(label = num), nudge_y = -5, fill = "white") +
  xlab("Site") +
  ylab("Number With >= 2 Hospitalizations") +
  theme_bw() +
  theme(legend.position = "none") +
  scale_fill_manual(values = c(purple, yellow))
```

```{r}
#| label: fig-fev1-year
#| fig-cap: FEV1 % predicted by year
#| warning: false
df %>%
  group_by(year, sid) %>%
  rename(
    Admission = ppfev1_admit, Discharge = ppfev1_discharge,
    Baseline = ppfev1_baseline
  ) %>%
  pivot_longer(c(Admission, Discharge, Baseline)) %>%
  mutate(name = factor(name,
    levels = c("Baseline", "Admission", "Discharge")
  )) %>%
  ggplot(aes(
    x = name, y = value,
    fill = factor(year)
  )) +
  geom_boxplot() +
  geom_pwc(
    aes(group = year),
    tip.length = 0.01,
    method = "t_test", label = "p.format"
  ) +
  ylab("FEV1 % predicted") +
  theme_bw() +
  theme(
    legend.title = element_blank(), legend.position = "bottom",
    axis.title.x = element_blank()
  ) +
  scale_fill_manual(values = c(purple, yellow))
```

FEV1 percent predicted was calculated using the GLI global (2022) equations with the `rspiro` R package.

```{r}
#| label: fig-return-90-100
#| fig-cap: Proportions who returned to >= 90% and >= 100% at discharge
df %>%
  mutate(
    returned_90 = ppfev1_discharge >= ppfev1_baseline * 0.9,
    returned_100 = ppfev1_discharge >= ppfev1_baseline
  ) %>%
  group_by(year) %>%
  summarise(
    n_returned_90 = sum(returned_90, na.rm = T),
    n_returned_100 = sum(returned_100, na.rm = T),
    total = sum(!is.na(ppfev1_discharge) & !is.na(ppfev1_baseline)),
    returned_90 = mean(returned_90, na.rm = T) * 100,
    returned_100 = mean(returned_100, na.rm = T) * 100,
  ) %>%
  ggplot(aes(x = factor(year))) +
  geom_bar(aes(y = returned_90, color = "Returned to 90%"),
    position = "dodge", stat = "identity", fill = yellow
  ) +
  geom_label(
    aes(
      y = returned_90,
      label = scales::percent(returned_90, accuracy = 0.1, scale = 1)
    ),
    nudge_y = -5, fill = "white"
  ) +
  geom_label(aes(y = returned_90, label = paste0(n_returned_90, "/", total)),
    nudge_y = -11, fill = "white"
  ) +
  geom_bar(aes(y = returned_100, color = "Returned to 100%"),
    position = "dodge", stat = "identity", fill = purple
  ) +
  geom_label(
    aes(
      y = returned_100,
      label = scales::percent(returned_100, accuracy = 0.1, scale = 1)
    ),
    nudge_y = -10, fill = "white"
  ) +
  geom_label(aes(y = returned_100, label = paste0(n_returned_100, "/", total)),
    nudge_y = -16, fill = "white"
  ) +
  ylab("Percent") +
  xlab("Year") +
  theme_classic() +
  scale_color_manual(
    name = element_blank(), values = c(purple, yellow),
    labels = c("Returned to 100%", "Returned to 90%")
  )
```

The above plot represents the proportion of admissions where the patient returned to close to baseline lung function, and was not aggregated by patient. In other words, multiple admissions for the same patient were considered independent in this case.

# Comparisons by race

Due to small numbers, Asian participants were included in the "Other" race category for the following analyses. Also, Hispanic ethnicity was considered its own racial category and superseded other racial groups for these analyses (i.e., if someone had both "Other" for race and "Hispanic or Latino" for ethnicity, they were considered Hispanic). 

```{r}
# Make dataframe for race comparisons
df$race <- as.character(df$race)
df$race[df$ethnicity == "Hispanic or Latino"] <- "Hispanic or Latino"
df$race <- factor(df$race,
  levels = c(
    "White", "Black or African-American", "Hispanic or Latino",
    "Unknown/not reported", "Other", "Asian"
  ),
  labels = c(
    "White", "Black or African-American", "Hispanic or Latino",
    "Unknown/Other", "Unknown/Other", "Unknown/Other"
  )
)
race_df <- df %>%
  group_by(sid) %>%
  filter(row_number() == 1) %>%
  ungroup()
```

## CFTR modulator

```{r}
#| label: tbl-cftr-mod-overall
#| tbl-cap: Any CFTR modulator prescription by race
race_df %>%
  select(race, cftr_mod) %>%
  tbl_summary(by = race, label = labels, missing_text = "(Missing)") %>%
  add_p() %>%
  add_overall()
```

```{r}
#| label: tbl-cftr-mod-year
#| tbl-cap: Any CFTR modulator prescription by race and year
race_df %>%
  select(year, race, cftr_mod) %>%
  tbl_strata(
    strata = year,
    .tbl_fun =
      ~ .x %>%
        tbl_summary(
          by = race, label = labels, missing_text = "(Missing)"
        ) %>%
        add_p() %>%
        add_overall()
  )
```

```{r}
#| label: tbl-cftr-mod-specific-overall
#| tbl-cap: CFTR modulator type by race
race_df %>%
  select(race, cftr_mod_spec) %>%
  tbl_summary(by = race, label = labels, missing_text = "(Missing)") %>%
  add_p(test.args = all_tests("fisher.test") ~ list(simulate.p.value = T)) %>%
  add_overall()
```

```{r}
#| label: tbl-cftr-mod-specific-year
#| tbl-cap: CFTR modulator type by race and year
race_df %>%
  select(race, cftr_mod_spec, year) %>%
  tbl_strata(
    strata = year,
    .tbl_fun =
      ~ .x %>%
        tbl_summary(
          by = race, label = labels, missing_text = "(Missing)"
        ) %>%
        add_p(test.args = all_tests("fisher.test") ~
          list(simulate.p.value = T)) %>%
        add_overall()
  )
```

```{r}
#| label: tbl-eti-2022
#| tbl-cap: ETI by race in 2022
race_df %>%
  filter(year == 2022) %>%
  select(race, Trikafta) %>%
  tbl_summary(by = race, label = labels, missing_text = "(Missing)") %>%
  add_p(test.args = all_tests("fisher.test") ~ list(simulate.p.value = T)) %>%
  add_overall()
```

## Genotype

```{r}
#| label: tbl-genotype-overall
#| tbl-cap: Genotype by race
race_df %>%
  select(race, Genotype) %>%
  tbl_summary(by = race, label = labels, missing_text = "(Missing)") %>%
  add_p() %>%
  add_overall()
```

```{r}
#| label: tbl-genotype-year
#| tbl-cap: Genotype by race and year
race_df %>%
  select(year, race, Genotype) %>%
  tbl_strata(
    strata = year,
    .tbl_fun =
      ~ .x %>%
        tbl_summary(
          by = race, label = labels, missing_text = "(Missing)"
        ) %>%
        add_p() %>%
        add_overall()
  )
```

# FEV1 response (from admission to discharge) on ETI vs not on ETI

Hospitalizations within a person were considered independent in the tables below.

```{r}
#| label: tbl-fev1-change-eti
#| tbl-cap: Change in FEV1pp by ETI status
df %>%
  filter(year == 2022) %>%
  select(ppfev1_change, Trikafta) %>%
  tbl_summary(
    by = Trikafta, label = labels, missing_text = "(Missing)",
    statistic = list(all_continuous() ~ "{mean} ({sd})")
  ) %>%
  add_p(test = list(all_continuous() ~ "t.test")) %>%
  add_overall()
```
