---
title: "CGM and OGTT Trajectories in CF"
author: "Tim Vigers"
date: "today"
date-format: long
format:
  html:
    toc: true
    toc-depth: 5
    toc-float: true
    code-fold: true
    self-contained: true
    fig-cap-location: top
    page-layout: full
    theme:
      light: flatly
      dark: darkly
#bibliography: /home/timvigers/Documents/Miscellaneous/zotero.bib
#csl: /home/timvigers/Documents/GitHub/styles/american-medical-association.csl
editor: source
---

```{r setup}
#| include: false
library(tidyverse)
library(lubridate)
library(hms)
library(tools)
library(readxl)
library(emmeans)
library(traj)
# knitr::opts_knit$set(root.dir = "/home/timvigers/OneDrive/Vigers/CF/Christine Chan/EnVision CF")
knitr::opts_knit$set(root.dir = "/Users/pylell/Library/CloudStorage/OneDrive-TheUniversityofColoradoDenver/Vigers/CF/Christine Chan/EnVision CF")
```

```{r}
# Import REDCap and define timepoints
df <- read.csv("./Data_Raw/EnvisionCF_DATA_2024-07-19_1236.csv",
  na.strings = ""
)
timepoints <- c(0, 10, 30, 60, 90, 120, 150, 180)
# Insulin
insulin <- read.csv("./Data_Clean/envision_analysis_dataset.csv",
  na.strings = ""
)
insulin <- insulin %>%
  select(study_id, Glucose_0:Glucose_180, Insulin_0:Insulin_180)
colnames(insulin) <- c(
  "study_id", paste0("timepoint_", timepoints, "_min"),
  paste0("insulin_", timepoints, "_min")
)
df <- left_join(df, insulin,
  multiple = "first",
  by = join_by(
    study_id, timepoint_0_min, timepoint_10_min, timepoint_30_min,
    timepoint_60_min, timepoint_90_min, timepoint_120_min, timepoint_150_min,
    timepoint_180_min
  )
)
# Calculate HOMA-IR
df$homa_ir <- (df$timepoint_0_min * df$insulin_0_min) / 22.5
df$log_homa_ir <- log(df$homa_ir+0.00001)
# CGM data
files <- list.files("./Data_Clean/CGM/Cleaned", full.names = T)
cgms <- lapply(files, function(f) {
  # Read data
  cgm <- read.csv(f, na.strings = "")
  # Format ID and visit name
  id <- basename(f)
  id <- sub("_sensor_raw_data_upload\\.csv", "", id)
  visit <- str_extract(id, "visit_._arm_.")
  id <- sub("_visit_._arm_.", "", id)
  # Split date and time for averaging
  cgm$timestamp <- parse_date_time(cgm$timestamp, c("ymd HMS", "ymd"))
  cgm$timestamp <- round_date(cgm$timestamp, "15 minutes")
  cgm$date <- as.Date(cgm$timestamp)
  cgm$time <- as_hms(cgm$timestamp)
  # Format dataframe and return
  cgm$study_id <- id
  cgm$redcap_event_name <- visit
  cgm <- cgm %>% select(study_id, redcap_event_name, date, time, sensorglucose)
  return(cgm)
})
cgms <- do.call(rbind, cgms)
# For each wear, average by time of day and convert to wide
cgms <- cgms %>%
  mutate(time = as.numeric(time)) %>%
  group_by(study_id, redcap_event_name, time) %>%
  summarise(sensorglucose = mean(sensorglucose, na.rm = T), .groups = "drop") %>%
  pivot_wider(names_from = time, values_from = sensorglucose)
# Select and merge
df <- df %>%
  select(
    study_id, redcap_event_name, num_hospitalizations, timepoint_120_min,
    homa_ir, log_homa_ir
  ) %>%
  drop_na()
df <- left_join(cgms, df, by = join_by(study_id, redcap_event_name))
# Categorical
df$two_hour <- cut(df$timepoint_120_min, c(-Inf, 140, 200, Inf), right = F)
df$num_hospitalizations <- factor(df$num_hospitalizations,
  levels = c(0:9), labels = c("0", "1", "2", "3", rep("4+", 6))
)
df <- df %>%
  select(
    study_id, redcap_event_name, num_hospitalizations, timepoint_120_min,
    homa_ir, everything()
  )
# Unique identifier
df$ID <- 1:nrow(df)
# Make a dataframe for time
time <- data.frame(matrix(rep(seq(0, 85500, by = 900), nrow(df)),
  byrow = T,
  ncol = length(seq(0, 85500, by = 900))
))
time$ID <- df$ID
time <- time %>% select(ID, everything())
```

# CGM trajectories

## Automatic number of clusters

```{r}
set.seed(1017)
step1 <- Step1Measures(
  Data = df[, c("ID", seq(0, 85500, by = 900))],
  Time = time, ID = T
)
summary(step1)
step2 <- Step2Selection(trajMeasures = step1)
summary(step2)
print(step2)
step3 <- Step3Clusters(trajSelection = step2)
plot(step3, spline = T, legend.plot = FALSE)
# Check results
df$predicted <- step3$partition$Cluster
# vs. 2 hour
table(df$predicted, df$two_hour)
mod <- lm(df$timepoint_120_min ~ as.factor(df$predicted))
summary(mod)
anova(mod)
emmeans(mod, "predicted")
p <- plot(df$timepoint_120_min ~ as.factor(df$predicted))
# Vs. homa-ir
mod <- lm(df$log_homa_ir ~ as.factor(df$predicted))
summary(mod)
anova(mod)
emmeans(mod, "predicted")
p <- plot(df$log_homa_ir ~ df$predicted)
# Vs. hospitalizations
t <- table(df$predicted, df$num_hospitalizations)
t
chisq.test(t)
```

## Four clusters

```{r}
step1 <- Step1Measures(
  Data = df[, c("ID", seq(0, 85500, by = 900))],
  Time = time, ID = T
)
summary(step1)
step2 <- Step2Selection(trajMeasures = step1)
summary(step2)
print(step2)
step3 <- Step3Clusters(trajSelection = step2, nclusters = 4)
plot(step3, spline = T)
# Check results
# Vs. 2 hour glucose
df$predicted <- step3$partition$Cluster
table(df$predicted, df$two_hour)
mod <- lm(df$timepoint_120_min ~ as.factor(df$predicted))
summary(mod)
anova(mod)
emmeans(mod, "predicted")
p <- plot(df$timepoint_120_min ~ df$predicted)
# Vs. homa-ir
mod <- lm(df$log_homa_ir ~ as.factor(df$predicted))
summary(mod)
anova(mod)
emmeans(mod, "predicted")
p <- plot(df$log_homa_ir ~ df$predicted)
# Vs. hospitalizations
t <- table(df$predicted, df$num_hospitalizations)
t
chisq.test(t)
```

## Three clusters

```{r}
step1 <- Step1Measures(
  Data = df[, c("ID", seq(0, 85500, by = 900))],
  Time = time, ID = T
)
summary(step1)
step2 <- Step2Selection(trajMeasures = step1)
summary(step2)
print(step2)
step3 <- Step3Clusters(trajSelection = step2, nclusters = 3)
plot(step3, spline = T)
# Check results
# Vs. 2 hour
df$predicted <- step3$partition$Cluster
table(df$predicted, df$two_hour)
mod <- lm(df$timepoint_120_min ~ as.factor(df$predicted))
summary(mod)
anova(mod)
emmeans(mod, "predicted")
p <- plot(df$timepoint_120_min ~ df$predicted)
# Vs. homa-ir
mod <- lm(df$log_homa_ir ~ as.factor(df$predicted))
summary(mod)
anova(mod)
emmeans(mod, "predicted")
p <- plot(df$log_homa_ir ~ df$predicted)
# Vs. hospitalizations
t <- table(df$predicted, df$num_hospitalizations)
t
chisq.test(t)
```

# Insulin trajectories

```{r}
# Import OGTT and insulin data
df <- read.csv("./Data_Clean/envision_analysis_dataset.csv", na.strings = "")
# Categorical variables
df$two_hour <- cut(df$Glucose_120, c(-Inf, 140, 200, Inf), right = F)
df$num_hospitalizations <- factor(df$num_hospitalizations,
  levels = 0:9,
  labels = c("0", "1", "2", "3", rep("4+", 6))
)
# Remove too many missing
df <- df %>%
  select(study_id:num_hospitalizations, two_hour, homa_ir, Insulin_0:Insulin_180, Glucose_120) %>%
  rowwise() %>%
  filter(sum(is.na(c_across(Insulin_0:Insulin_180))) < 3)
# Unique identifier
df$ID <- 1:nrow(df)
df$log_homa_ir <- log(df$homa_ir+0.00001)
# Make a dataframe for time
time <- data.frame(matrix(rep(timepoints, nrow(df)),
  byrow = T,
  ncol = length(timepoints)
))
time$ID <- df$ID
time <- time %>% select(ID, everything())
```

## Automatic number of clusters

```{r}
step1 <- Step1Measures(
  Data = df[, c("ID", paste0("Insulin_", timepoints))],
  Time = time, ID = T
)
summary(step1)
step2 <- Step2Selection(trajMeasures = step1)
summary(step2)
print(step2)
step3 <- Step3Clusters(trajSelection = step2)
plot(step3, spline = T)
# Check results
df$predicted <- step3$partition$Cluster
# Vs. 2 hour
table(df$predicted, df$two_hour)
mod <- lm(df$Glucose_120 ~ as.factor(df$predicted))
summary(mod)
anova(mod)
emmeans(mod, "predicted")
p <- plot(df$Glucose_120 ~ df$predicted)
# Vs. homa-ir
mod <- lm(df$log_homa_ir ~ as.factor(df$predicted))
summary(mod)
anova(mod)
emmeans(mod, "predicted")
p <- plot(df$log_homa_ir ~ df$predicted)
# Vs. hospitalizations
t <- table(df$predicted, df$num_hospitalizations)
t
chisq.test(t)
```

## Four clusters

```{r}
step1 <- Step1Measures(
  Data = df[, c("ID", paste0("Insulin_", timepoints))],
  Time = time, ID = T
)
summary(step1)
step2 <- Step2Selection(trajMeasures = step1)
summary(step2)
print(step2)
step3 <- Step3Clusters(trajSelection = step2, nclusters = 4)
plot(step3, spline = T)
# Check results
df$predicted <- step3$partition$Cluster
# Vs. 2 hour
table(df$predicted, df$two_hour)
mod <- lm(df$Glucose_120 ~ as.factor(df$predicted))
summary(mod)
anova(mod)
emmeans(mod, "predicted")
p <- plot(df$Glucose_120 ~ df$predicted)
# Vs. homa-ir
mod <- lm(df$log_homa_ir ~ as.factor(df$predicted))
summary(mod)
anova(mod)
emmeans(mod, "predicted")
p <- plot(df$log_homa_ir ~ df$predicted)
# Vs. hospitalizations
t <- table(df$predicted, df$num_hospitalizations)
t
chisq.test(t)
```

## Three clusters

```{r}
step1 <- Step1Measures(
  Data = df[, c("ID", paste0("Insulin_", timepoints))],
  Time = time, ID = T
)
summary(step1)
step2 <- Step2Selection(trajMeasures = step1)
summary(step2)
print(step2)
step3 <- Step3Clusters(trajSelection = step2, nclusters = 3)
plot(step3, spline = T)
# Check results
df$predicted <- step3$partition$Cluster
# Vs. 2 hour
table(df$predicted, df$two_hour)
mod <- lm(df$Glucose_120 ~ as.factor(df$predicted))
summary(mod)
anova(mod)
emmeans(mod, "predicted")
p <- plot(df$Glucose_120 ~ df$predicted)
# Vs. homa-ir
mod <- lm(df$log_homa_ir ~ as.factor(df$predicted))
summary(mod)
anova(mod)
emmeans(mod, "predicted")
p <- plot(df$log_homa_ir ~ df$predicted)
# Vs. hospitalizations
t <- table(df$predicted, df$num_hospitalizations)
t
chisq.test(t)
```

# Glucose trajectories

```{r}
# Import OGTT and insulin data
df <- read.csv("./Data_Clean/envision_analysis_dataset.csv", na.strings = "")
# Categorical variables
df$two_hour <- cut(df$Glucose_120, c(-Inf, 140, 200, Inf), right = F)
df$num_hospitalizations <- factor(df$num_hospitalizations,
  levels = 0:9,
  labels = c("0", "1", "2", "3", rep("4+", 6))
)
# Remove too many missing
df <- df %>%
  select(study_id:num_hospitalizations, two_hour, homa_ir, Glucose_0:Glucose_180) %>%
  rowwise() %>%
  filter(sum(is.na(c_across(Glucose_0:Glucose_180))) < 3)
# Unique identifier
df$ID <- 1:nrow(df)
df$log_homa_ir <- log(df$homa_ir+0.00001)
# Make a dataframe for time
time <- data.frame(matrix(rep(timepoints, nrow(df)),
  byrow = T,
  ncol = length(timepoints)
))
time$ID <- df$ID
time <- time %>% select(ID, everything())
```

## Automatic number of clusters

```{r}
step1 <- Step1Measures(
  Data = df[, c("ID", paste0("Glucose_", timepoints))],
  Time = time, ID = T
)
summary(step1)
step2 <- Step2Selection(trajMeasures = step1)
summary(step2)
print(step2)
step3 <- Step3Clusters(trajSelection = step2)
plot(step3, spline = T)
# Check results
df$predicted <- step3$partition$Cluster
# vs. 2 hour glucose
table(df$predicted, df$two_hour)
mod <- lm(df$Glucose_120 ~ as.factor(df$predicted))
summary(mod)
anova(mod)
emmeans(mod, "predicted")
p <- plot(df$Glucose_120 ~ df$predicted)
# Vs. homa-ir
mod <- lm(df$log_homa_ir ~ as.factor(df$predicted))
summary(mod)
anova(mod)
emmeans(mod, "predicted")
p <- plot(df$log_homa_ir ~ df$predicted)
# Vs. hospitalizations
t <- table(df$predicted, df$num_hospitalizations)
t
chisq.test(t)
```

## Four clusters

```{r}
step1 <- Step1Measures(
  Data = df[, c("ID", paste0("Glucose_", timepoints))],
  Time = time, ID = T)
summary(step1)
step2 <- Step2Selection(trajMeasures = step1)
summary(step2)
print(step2)
step3 <- Step3Clusters(trajSelection = step2, nclusters = 4)
plot(step3, spline = T)
# Check results
df$predicted <- step3$partition$Cluster
# vs. 2 hour glucose
table(df$predicted, df$two_hour)
mod <- lm(df$Glucose_120 ~ as.factor(df$predicted))
summary(mod)
anova(mod)
emmeans(mod, "predicted")
p <- plot(df$Glucose_120 ~ df$predicted)
# Vs. homa-ir
mod <- lm(df$log_homa_ir ~ as.factor(df$predicted))
summary(mod)
anova(mod)
emmeans(mod, "predicted")
p <- plot(df$log_homa_ir ~ df$predicted)
# Vs. hospitalizations
t <- table(df$predicted, df$num_hospitalizations)
t
chisq.test(t)
```

## Three clusters

```{r}
step1 <- Step1Measures(
  Data = df[, c("ID", paste0("Glucose_", timepoints))],
  Time = time, ID = T
)
summary(step1)
step2 <- Step2Selection(trajMeasures = step1)
summary(step2)
print(step2)
step3 <- Step3Clusters(trajSelection = step2, nclusters = 3)
plot(step3, spline = T)
# Check results
df$predicted <- step3$partition$Cluster
# vs. 2 hour glucose
table(df$predicted, df$two_hour)
mod <- lm(df$Glucose_120 ~ as.factor(df$predicted))
summary(mod)
anova(mod)
emmeans(mod, "predicted")
p <- plot(df$Glucose_120 ~ df$predicted)
# Vs. homa-ir
mod <- lm(df$log_homa_ir ~ as.factor(df$predicted))
summary(mod)
anova(mod)
emmeans(mod, "predicted")
p <- plot(df$log_homa_ir ~ df$predicted)
# Vs. hospitalizations
t <- table(df$predicted, df$num_hospitalizations)
t
chisq.test(t)
```
