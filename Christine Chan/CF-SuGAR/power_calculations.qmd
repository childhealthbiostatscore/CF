---
title: "CF-SuGAR Power Calculations"
author: "Tim Vigers"
date: "today"
date-format: long
format:
  html:
    fig-width: 10
    fig-height: 10
    toc: true
    toc-depth: 5
    toc-float: true
    self-contained: true
    fig-cap-location: top
    page-layout: full
editor: source
---

```{r setup}
#| include: false
library(Hmisc)
library(tidyverse)
library(childsds)
library(rspiro)
library(survival)
library(gtsummary)
library(ggstats)
library(lmerTest)
home_dir <- switch(Sys.info()["sysname"],
  "Darwin" = "/Users/tim/Library/CloudStorage/OneDrive-TheUniversityofColoradoDenver/Vigers/CF",
  "Windows" = "C:/Users/Tim/OneDrive - The University of Colorado Denver/Vigers/CF",
  "Linux" = "/home/tim/OneDrive/Vigers/CF"
)
github_dir <- switch(Sys.info()["sysname"],
  "Darwin" = "/Users/tim/Documents/GitHub",
  "Windows" = "C:/Users/Tim/Documents/GitHub",
  "Linux" = "/home/tim/Documents/GitHub"
)
knitr::opts_knit$set(root.dir = home_dir)
```

```{r data cleaning}
#| include: false
# Import data and codebook
annual <- read.csv("./CF Registry/Data_Raw/CFF19_Annualized_Del1.csv",
  na.strings = c("", "N/A")
)
data_dict <- readxl::read_excel("./CF Registry/Data_Raw/Copy of Codes for CFFPR_2018.xlsx")
data_dict$var <- paste(data_dict$field_name, data_dict$code_value, sep = "_")
# Remove those with T1D or T2D
annual <- annual %>% arrange(eDWID, ReviewYear)
annual <- annual[!annual$cfrd_status_annual %in% c(4, 5), ]
annual$cfrd_status_annual <- factor(annual$cfrd_status_annual,
  levels = 1:3,
  labels = c("CFRD-", "CFRD-", "CFRD+")
)
# Get mutations, race, etc.
demogs <- read.csv("./CF Registry/Data_Raw/CFF19_DemogCFDiag_Del1.csv", na.strings = "")
races <- c(
  "White", "Black or African American", "American Indian or Alaska Native",
  "Asian", "Native Hawaiian or Other Pacific ", "Some other race"
)
demogs$Race <- apply(demogs, 1, function(r) {
  w <- which(r[paste0("Race", 1:6)] == 1)
  if (length(w) > 1) {
    return("More than one race")
  } else {
    return(races[w])
  }
})
demogs$Race <- factor(demogs$Race,
  levels = c(
    "White", "American Indian or Alaska Native", "Asian",
    "Black or African American", "More than one race",
    "Native Hawaiian or Other Pacific ", "Some other race"
  ),
  labels = c(
    "White", "Other race", "Other race",
    "Black or African American", "More than one race",
    "Other race", "Other race"
  )
)
demogs$Hispanicrace <- factor(demogs$Hispanicrace,
  levels = 1:2,
  labels = c("Yes", "No")
)
demogs <- demogs %>% select(eDWID, Gender, MutClass, Race, Hispanicrace)
annual <- left_join(annual, demogs, by = join_by(eDWID))
# Variable formatting
# If A_supplement_feeding is 0, then A_feeding2 is also 0 because they are not
# on any supplemental feeding
# Include all kinds of tube feeds
annual$A_feeding2[annual$A_supplement_feeding == 0] <- 0
annual$A_feeding3[annual$A_supplement_feeding == 0] <- 0
annual$A_feeding4[annual$A_supplement_feeding == 0] <- 0
tube_fields <- c("A_feeding2", "A_feeding3", "A_feeding4")
annual$tube_feeding <-
  apply(annual[, tube_fields], 1, function(r) {
    if (all(is.na(r))) {
      return(NA)
    } else {
      return(max(as.numeric(r), na.rm = T))
    }
  })
# Liver disease
liver_fields <- c("A_hepatobiliary1_3", paste0("A_hepatobiliary2_", 1:4))
annual$liver_disease <-
  apply(annual[, liver_fields], 1, function(r) {
    if (all(is.na(r))) {
      return(NA)
    } else {
      return(max(as.numeric(r), na.rm = T))
    }
  })
# Get BMI categories
annual$bmi <- annual$A_weight / ((annual$A_height / 100)^2)
annual$bmi <- coalesce(annual$A_bmivalue, annual$bmi)
annual$bmi_perc_cdc <- sds(annual$bmi,
  age = annual$Age_YrEnd,
  sex = annual$Gender, male = "M", female = "F",
  item = "bmi", ref = cdc.ref, type = "perc"
) * 100
annual$bmi_perc_who <- sds(annual$bmi,
  age = annual$Age_YrEnd,
  sex = annual$Gender, male = "M", female = "F",
  item = "bmi", ref = who.ref, type = "perc"
) * 100
annual$bmi_perc <- coalesce(annual$bmi_perc_cdc, annual$bmi_perc_who)
# Format columns
annual$MutClass <- factor(annual$MutClass,
  levels = c("1-3", "4-5", "Oth", "N/A"),
  labels = c("1-3", "4-5", "Oth", "Unknown")
)
annual$NumPulmExacerbation <- cut(annual$NumPulmExacerbation,
  labels = c("0", "1", "2", ">=3"),
  breaks = c(0, 1, 2, 3, Inf), right = F
)
# Age groups 10 - 18 inclusive, 19 - 30 inclusive, >= 31
annual$age_group <- cut(annual$Age_YrEnd,
  breaks = c(-Inf, 10, 19, 31, Inf),
  right = F
)
# Bugs
bugs <- c(
  "A_pseudomonasaeruginosa", "A_fungalyeast1",
  "A_pulmonarycomplications1", "A_mycocultureresults3"
)
# Yes/No variables
yn_vars <- c(
  "A_corticosteroids1", "A_feeding2",
  "A_Vx770", "A_VX809comb", bugs, "tube_feeding", "liver_disease"
)
annual[, yn_vars] <- lapply(annual[, yn_vars], factor,
  levels = 0:1,
  labels = c("No", "Yes")
)
annual$A_IsOnEnzymes <- factor(annual$A_IsOnEnzymes,
  levels = c(1, 0), labels = c(" Yes", " No")
)
# FEV1 to categorical
annual$ppFEV1_cat <- cut(annual$A_FEV1_pct_predicted,
  breaks = c(0, 40, 80, 100, Inf), right = F
)
annual$ppFEV1_cat <- factor(annual$ppFEV1_cat,
  levels = c("[100,Inf)", "[80,100)", "[40,80)", "[0,40)")
)
# Males to reference group
annual$Gender <- factor(annual$Gender, levels = c("M", "F"))
# Hispanic no as reference
annual$Hispanicrace <- factor(annual$Hispanicrace, levels = c("No", "Yes"))
# Get first year of CFRD
first_cfrd <- annual %>%
  filter(cfrd_status_annual == "CFRD+") %>%
  group_by(eDWID) %>%
  summarise(first_cfrd = min(ReviewYear))
annual <- left_join(annual, first_cfrd, by = join_by(eDWID))
# Year prior to first CFRD in registry - assume negative for CFRD. Assume all
# years following are CFRD+
annual$CFRD <- NA
annual$CFRD[annual$ReviewYear < annual$first_cfrd] <- "CFRD-"
annual$CFRD[annual$ReviewYear >= annual$first_cfrd] <- "CFRD+"
annual$CFRD[is.na(annual$first_cfrd)] <- "CFRD-"
annual$CFRD <- factor(annual$CFRD, levels = c("CFRD-", "CFRD+"))
# Add formatted columns for survival analysis
annual$tstop <- ymd(paste0(annual$ReviewYear, "-12-31"))
annual$tstart <- ymd(paste0(annual$ReviewYear, "-01-01"))
annual <- annual %>%
  group_by(eDWID) %>%
  mutate(entry_date = tstart[1]) %>%
  ungroup()
# Remove those under 10
annual$age_group <- relevel(annual$age_group, ref = "[10,19)")
annual <- annual %>% filter(Age_YrEnd != 0, Age_YrEnd >= 10)
annual$age_group <- droplevels(annual$age_group)
# Nice labels for plots and tables
labels <- list(
  cfrd_status_annual = "CFRD Status", MutClass = "Mutation class",
  Race = "Race", Hispanicrace = "Hispanic",
  Gender = "Sex", A_IsOnEnzymes = "Pancreatic enzyme use",
  ppFEV1_cat = "FEV1 percent predicted category",
  A_FEV1_pct_predicted = "FEV1 percent predicted",
  A_FVC_pct_predicted = "FVC percent predicted",
  tube_feeding = "Enteric feedings", liver_disease = "Liver disease",
  A_corticosteroids1 = "Use of corticosteroids",
  NumPulmExacerbation = "Admissions for PEx", age_group = "Age group",
  height_perc = "Height percentile", bmi_cat = "BMI category",
  A_Vx770 = "Use of CFTR modulator Vx770",
  A_VX809comb = "Use of CFTR modulator Vx809 combination",
  A_pseudomonasaeruginosa = "Pseudomonas aeruginosa",
  A_fungalyeast1 = "Aspergillus (any species)",
  A_mycocultureresults3 = "Microorganisms in myco culture", eDWID = "ID",
  tstart = "Interval start", tstop = "Interval stop",
  Age_YrEnd = "Age", bmi_perc = "BMI %ile",
  A_hgba1c = "HbA1c"
)
label(annual[, which(colnames(annual) %in% names(labels))]) <-
  labels[colnames(annual)[which(colnames(annual) %in% names(labels))]]
# Limit to after 2010
annual <- annual %>% filter(ReviewYear >= 2010)
# Origin for survival analyses
og <- ymd("2003-01-01")
# Need to use a dataframe not a tibble
annual <- as.data.frame(annual)
annual$tstart <- as.numeric(annual$tstart) - as.numeric(og)
annual$tstop <- as.numeric(annual$tstop) - as.numeric(og)
# Lorenz et al. data cleaning
# read in separate data files

ogtt <- read.csv("./1 hour OGTT in CFRD/Data_raw/OGTT.csv")
pft <- read.csv("./1 hour OGTT in CFRD/Data_raw/PFTs.csv")
a1c <- read.csv("./1 hour OGTT in CFRD/Data_raw/A1c.csv")
demo <- read.csv("./1 hour OGTT in CFRD/Data_raw/demographics.csv")
dob <- read.csv("./1 hour OGTT in CFRD/Data_raw/dob.csv")

# merge dob and pfts
pft <- merge(pft, dob, by = "MRN", all.x = T, all.y = F)
pft <- unique(pft)

# checking for dups
# t <- ogtt[,c("MRN","FName","LName")]
# t <- unique(t)
# ct <- t %>% group_by(LName,FName) %>% count(unique(MRN))

# merge ogtt and demo
demo$FName <- NULL
demo$LName <- NULL
ogtt <- ogtt %>%
  group_by(MRN, Date.of.OGTT) %>%
  filter(row_number() == 1)
ogtt_demo <- merge(ogtt, demo, by = "MRN", all.x = T, all.y = T)
ogtt_demo$Date.of.OGTT <- mdy(ogtt_demo$Date.of.OGTT)

a1c$EncounterDate <- as.Date(a1c$Date.of.A1C, format = "%m/%d/%Y")
a1c$FName <- NULL
a1c$LName <- NULL
a1c$Date.of.OGTT <- NULL
a1c$Days.Between.A1C.and.OGTT <- NULL
ogtt_demo$EncounterDate <- ogtt_demo$Date.of.OGTT
ogtt_demo_a1c <- merge(ogtt_demo, a1c, by = c("MRN", "EncounterDate"), all.x = T, all.y = T)

# find most recent FVC that is within the 90 days prior to OGTT
pft$EncounterDate <- as.Date(pft$Date.of.PFT, format = "%m/%d/%Y")
pft$FName <- NULL
pft$LName <- NULL
alldata <- merge(ogtt_demo_a1c, pft, by = c("MRN", "EncounterDate"), all.x = T, all.y = T)

# get predicted spirometry values
alldata$FVC...Pred <- NULL
alldata$FEV1...Pred <- NULL
alldata$FEF.25.75...Pred <- NULL
# dob <- pft[,c("MRN","DOB")]
# dob <- unique(dob)
# alldata <- merge(alldata,dob,by="MRN",all.x = T,all.y = F)
alldata$DOB <- as.Date(as.character(alldata$DOB), format = "%m/%d/%Y")
alldata$ht_m <- alldata$Height..cm. / 100
alldata$sexnum <- ifelse(alldata$Sex == "Male", 1, 2)
alldata$FEV1.pred <- pred_GLI(age = alldata$Age.at.PFT, height = alldata$ht_m, gender = alldata$sexnum, param = "FEV1")
alldata$FVC.pred <- pred_GLI(age = alldata$Age.at.PFT, height = alldata$ht_m, gender = alldata$sexnum, param = "FVC")
alldata$FEF.25.75.pred <- pred_GLI(age = alldata$Age.at.PFT, height = alldata$ht_m, gender = alldata$sexnum, param = "FEF2575")
alldata$FEV1.per.pred <- (alldata$FEV1.Raw / alldata$FEV1.pred) * 100
alldata$FVC.per.pred <- (alldata$FVC.Raw / alldata$FVC.pred) * 100
alldata$FEF.25.75.per.pred <- (alldata$FEF.25.75.Raw / alldata$FEF.25.75.pred) * 100
# alldata$Sex <- NULL

# hard code some corrections to data per CC
alldata[alldata$MRN == 686476, ]$X1.hour.Glucose <- ifelse(alldata[alldata$MRN == 686476, ]$Age.At.Test..years. == 14.5, 185, alldata[alldata$MRN == 686476, ]$X1.hour.Glucose)

# severity of genotype

# Red = severe or minimal function mutation
# Orange= unknown mutation status (for now)
# Yellow= partial function or mild
# Green = not CF causing, classify as "other", will most likely be seen in people with CRMS diagnosis

alldata$class2 <- ifelse(alldata$Mutation.2 %in% c(
  "1717-1G->A", "1717-1G-A", "G542X", "Q493X", "R1162X", "R553X", "R553x", "W1089X", "W1282X", "1078delT", "R75X",
  "3659delC", "621+1G->T", "621+1G>T", "394delTT", "3120 + 1g->A", "1154InsTC", "1154insTC", "1213delT",
  "1259insA", "1288insTA", "3791delC", "E60X", "K710X", "2184delA", "CFTRdele2,3", "663delT", "Glu528",
  "1461ins4", "306insA", "R709X", "CFTRdele22-24", "2711delT", "2183AA- >G", "2183delAA>G"
), "I",
ifelse(alldata$Mutation.2 %in% c("F508", "F508del", "F508del ", "G85E", "I507", "I 507", "N1303K", "A559T", "R560T", "A561E"),
  "II",
  ifelse(alldata$Mutation.2 %in% c("G551D", "G551S", "S549N"), "III",
    ifelse(alldata$Mutation.2 %in% c("R334W", "R347P", "R117H", "R117C", "P67L", "L206W", "l206w", "I206w", "D614G", "R347H", "D1152H", "3849+10kbC>T"), "IV",
      ifelse(alldata$Mutation.2 %in% c(
        "A455E", "2789+5G->A", "3849+10CT", "3849+10kbC->T", "711+3A->G", "1898+5G->T",
        "P574H", "3272-26A->G5", "3272-26A->G"
      ), "V", "")
    )
  )
)
)

alldata$severity2 <- ifelse(alldata$Mutation.2 %in% c(
  "1717-1G->A", "1717-1G-A", "G542X", "Q493X", "R1162X", "R553X", "R553x", "W1089X", "W1282X", "1078delT", "R75X",
  "3659delC", "621+1G->T", "621+1G>T", "394delTT", "3120 + 1g->A", "1154InsTC", "1154insTC", "1213delT",
  "1259insA", "1288insTA", "3791delC", "E60X", "K710X", "2184delA", "CFTRdele2,3", "663delT", "Glu528",
  "1461ins4", "306insA", "R709X", "CFTRdele22-24", "2711delT", "2183AA- >G", "2183delAA>G", "F508", "F508del", "F508del ", "G85E",
  "I507", "I 507", "N1303K", "A559T", "R560T", "A561E", "G551D", "G551S", "S549N", "1898+1G->A", "2143delT", "2183AA-G",
  "2183delAA->G", "2184insA", "S434X", "2585delT", "3120+1G->A", "3905insT", "406-1G->A", "712-1G->T", "L1245X", "Q2X", "R1158X",
  "R851X", "V520F", "L1077P", "S489X", "F311del", "W846X", "M1101K", "2622+1G->A", "S945L", "Y1092X", "R1066C", "G178R", "2957delT",
  "CFTRdele1", "W1204X", "q493x", "W57G", "1585-8G>A", "1717-8G->A", "G1244E"
), "Severe",
ifelse(alldata$Mutation.2 %in% c(
  "R334W", "R347P", "R117H", "R117C", "P67L", "L206W", "l206w", "I206w", "D614G", "R347H", "D1152H", "3849+10kbC>T", "D110H", "R1070W",
  "A455E", "2789+5G->A", "3849+10CT", "3849+10kbC->T", "711+3A->G", "1898+5G->T", "P574H", "3272-26A->G5", "3272-26A->G", "3849G->A", "H199Y", "H199y",
  "S492F", "S531P", "L1335P", "R352Q", "D1270N", "2789+2insA", "3849+10kbc->T", "Q98R", "Phe1052Val",
  "F1052V", "Tyr1014Cys", "Y1014C", "T338I", "5T", "c.2249C>T", "P750L"
), "Mild",
ifelse(alldata$Mutation.2 %in% c(
  "1262insA", "I506T", "3363delGT", "Q1209P", "3349insT", "G178R", "L467P", "317insC", "I336K",
  "ex14a", "3500-2A->G", "c.3407_3422del16", "3349insT", "1248+1G->A", "M470V", "1812-1G->A",
  "del X22-24", "Q237H", "Q237H", "W57G", "1078delA", "G178R", "2957delT", "G576A",
  "other", "Other", "Unknown", "unknown", "CFTRdele1", "1811+1.6kb A->", "UNK", "I336K", "M470V", "S1235R", "M470V", "F508C",
  "R1066H", "P205S"
), "Unk", "")
)
)

alldata$class1 <- ifelse(alldata$Mutation.1 %in% c(
  "1717-1G->A", "1717-1G-A", "G542X", "Q493X", "R1162X", "R553X", "R553x", "W1089X", "W1282X", "1078delT", "R75X",
  "3659delC", "621+1G->T", "621+1G>T", "394delTT", "3120 + 1g->A", "1154InsTC", "1154insTC", "1213delT",
  "1259insA", "1288insTA", "3791delC", "E60X", "K710X", "2184delA", "CFTRdele2,3", "663delT", "Glu528",
  "1461ins4", "306insA", "R709X", "CFTRdele22-24", "2711delT", "2183AA- >G", "2183delAA>G"
), "I",
ifelse(alldata$Mutation.1 %in% c("F508", "F508del", "F508del ", "G85E", "I507", "I 507", "N1303K", "A559T", "R560T", "A561E"), "II",
  ifelse(alldata$Mutation.1 %in% c("G551D", "G551S", "S549N"), "III",
    ifelse(alldata$Mutation.1 %in% c("R334W", "R347P", "R117H", "R117C", "P67L", "L206W", "l206w", "I206w", "D614G", "R347H", "D1152H", "3849+10kbC>T"), "IV",
      ifelse(alldata$Mutation.1 %in% c(
        "A455E", "2789+5G->A", "3849+10CT", "3849+10kbC->T", "711+3A->G", "1898+5G->T",
        "P574H", "3272-26A->G5", "3272-26A->G"
      ), "V", "")
    )
  )
)
)

alldata$severity1 <- ifelse(alldata$Mutation.1 %in% c(
  "1717-1G->A", "1717-1G-A", "G542X", "Q493X", "R1162X", "R553X", "R553x", "W1089X", "W1282X", "1078delT", "R75X",
  "3659delC", "621+1G->T", "621+1G>T", "394delTT", "3120 + 1g->A", "1154InsTC", "1154insTC", "1213delT",
  "1259insA", "1288insTA", "3791delC", "E60X", "K710X", "2184delA", "CFTRdele2,3", "663delT", "Glu528",
  "1461ins4", "306insA", "R709X", "CFTRdele22-24", "2711delT", "2183AA- >G", "2183delAA>G", "F508", "F508del", "F508del ", "G85E",
  "I507", "I 507", "N1303K", "A559T", "R560T", "A561E", "G551D", "G551S", "S549N", "1898+1G->A", "2143delT", "2183AA-G",
  "2183delAA->G", "2184insA", "S434X", "2585delT", "3120+1G->A", "3905insT", "406-1G->A", "712-1G->T", "L1245X", "Q2X", "R1158X",
  "R851X", "V520F", "L1077P", "S489X", "F311del", "W846X", "M1101K", "2622+1G->A", "S945L",
  "Y1092X", "R1066C", "G178R", "2957delT", "CFTRdele1", "W1204X", "q493x", "W57G", "1585-8G>A", "1717-8G->A", "G1244E"
), "Severe",
ifelse(alldata$Mutation.1 %in% c(
  "R334W", "R347P", "R117H", "R117C", "P67L", "L206W", "l206w", "I206w", "D614G", "R347H", "D1152H", "3849+10kbC>T", "D110H", "R1070W",
  "A455E", "2789+5G->A", "3849+10CT", "3849+10kbC->T", "711+3A->G", "1898+5G->T",
  "P574H", "3272-26A->G5", "3272-26A->G", "3849G->A", "H199Y", "H199y", "S492F", "S531P",
  "L1335P", "R352Q", "D1270N", "2789+2insA", "3849+10kbc->T", "Q98R", "Phe1052Val",
  "F1052V", "Tyr1014Cys", "Y1014C", "T338I", "5T", "c.2249C>T", "P750L"
), "Mild",
ifelse(alldata$Mutation.1 %in% c(
  "1262insA", "I506T", "3363delGT", "Q1209P", "3349insT", "G178R", "L467P", "317insC", "I336K",
  "ex14a", "3500-2A->G", "c.3407_3422del16", "3349insT", "1248+1G->A", "M470V", "1812-1G->A",
  "del X22-24", "Q237H", "Q237H", "W57G", "1078delA", "G178R", "2957delT", "G576A",
  "other", "Other", "Unknown", "unknown", "CFTRdele1", "1811+1.6kb A->", "UNK", "I336K", "M470V", "S1235R", "M470V", "F508C",
  "R1066H", "P205S"
), "Unk", "")
)
)

# 3 patients have severity2="Severe" per Christine
alldata$severity2 <- ifelse(alldata$MRN %in% c(546678, 664400, 2015506), "Severe", alldata$severity2)

alldata$genoRisk <- ifelse(alldata$severity1 == "Mild" | alldata$severity2 == "Mild", "Low",
  ifelse(alldata$severity1 == "Severe" & alldata$severity2 == "Severe", "High", "")
)

# write file of people with missing genotype risk
# write.csv(alldata[alldata$genoRisk=="",],"./1 hour OGTT in CFRD/Data_raw/missing_genotype_risk.csv")


# merge back all baseline characteristics
d <- alldata[, c("MRN", "FName", "LName", "Sex", "Race", "Latino.a.", "Mutation.1", "Mutation.2", "class1", "class2", "severity1", "severity2", "genoRisk")]
d <- d[!is.na(d$FName), ]
d <- unique(d)
alldata$FName <- NULL
alldata$Latino.a. <- NULL
alldata$LName <- NULL
alldata$Sex <- NULL
alldata$Race <- NULL
alldata$Mutation.1 <- NULL
alldata$Mutation.2 <- NULL
alldata$class1 <- NULL
alldata$class2 <- NULL
alldata$severity1 <- NULL
alldata$severity2 <- NULL
alldata$genoRisk <- NULL
alldata <- merge(alldata, d, by = "MRN", all.x = T, all.y = T)


# checking for dups
# t <- alldata[,c("MRN","FName","LName")]
# t <- unique(t)
# ct <- t %>% group_by(LName,FName) %>% count(unique(MRN))

# find first OGTT
alldata$Date <- alldata$EncounterDate
o <- alldata[!is.na(alldata$X1.hour.Glucose), c("MRN", "Date")]
o <- o[order(o$MRN, o$Date), ]
o <- o %>%
  group_by(MRN) %>%
  filter(row_number() == 1)
colnames(o) <- c("MRN", "Date of first OGTT")
alldata <- merge(alldata, o, by = "MRN", all.x = T, all.y = T)
alldata <- alldata[!is.na(alldata$`Date of first OGTT`), ]

# checking ppts that Collin said had CFRD
col_check <- alldata[alldata$MRN %in% c(
  1006479, 1053930, 1078408, 1136992, 1289450, 1339023, 1413821, 1695512, 664400,
  686476, 707831, 712676, 739231, 739460, 787372, 800007, 848440, 860181, 875128, 897478, 905284, 908966,
  918124, 932695, 949042, 952250, 952252, 825118
), ]
col_check <- col_check[order(col_check$MRN, col_check$Date), ]
# write.csv(col_check,"./1 hour OGTT in CFRD/Data_raw/check_cfrd.csv",na="",row.names = F)

# last 2 discrepant cases after fixing date issue
col_check2 <- alldata[alldata$MRN %in% c(686476, 825118), ]
col_check2 <- col_check2[order(col_check2$MRN, col_check2$Date), ]
# write.csv(col_check2,"./1 hour OGTT in CFRD/Data_raw/check_cfrd2.csv",na="",row.names = F)

# remove all visits before first OGTT
# alldata$`Date of first OGTT` <- as.Date(as.character(alldata$`Date of first OGTT`),format="%m/%d/%Y")
alldata <- alldata[alldata$Date >= alldata$`Date of first OGTT`, ]
alldata <- alldata %>% arrange(MRN, EncounterDate)

# calculate BMI
alldata$BMI <- alldata$Weight..kg. / ((alldata$Height..cm. / 100)^2)

# reorder columns
colorder <- c(
  "MRN", "FName", "LName", "Sex", "Race", "Latino.a.", "Mutation.1", "Mutation.2", "class1", "class2", "severity1", "severity2", "genoRisk",
  "Date of first OGTT", "Date", "Age.At.Test..years.", "Fasting.Glucose", "X1.hour.Glucose", "X2.hour.Glucose", "A1C",
  "DOB", "Age.at.PFT", "FVC.Raw", "Height..cm.", "Weight..kg.", "FEV1.Raw", "FEF.25.75.Raw", "ht_m",
  "sexnum", "FEV1.pred", "FVC.pred", "FEF.25.75.pred", "FEV1.per.pred", "FVC.per.pred", "FEF.25.75.per.pred", "BMI"
)
alldata <- alldata[, colorder]
alldata <- alldata[order(alldata$MRN, alldata$Date), ]

# create combined race/ethnicity
alldata$race_eth <- ifelse(alldata$Latino.a. == "TRUE", "Hispanic", alldata$Race)

# get BMI percentile
alldata$age <- ifelse(is.na(alldata$Age.at.PFT), alldata$Age.At.Test..years., alldata$Age.at.PFT)
alldata$age_bmi <- ifelse(alldata$age > 20, 20, alldata$age)
alldata$bmip <- sds(alldata$BMI,
  age = alldata$age_bmi,
  sex = alldata$Sex, male = "Male", female = "Female",
  ref = cdc.ref,
  item = "bmi",
  type = "perc"
)
# for demographics data, multiply BMI percentile by 100
alldata$bmipercentile <- alldata$bmip * 100

# classify CFRD at each visit
alldata$cfrd_visit <- NA
alldata$cfrd_visit <- ifelse(is.na(alldata$X2.hour.Glucose), NA, ifelse(alldata$X2.hour.Glucose >= 200, 1, 0))

# find people with CFRD at baseline
cfrdbase <- alldata[alldata$Date == alldata$`Date of first OGTT` & alldata$cfrd_visit == 1, ]
before_cfrd <- length(unique(alldata$MRN))
alldata <- alldata[!(alldata$MRN %in% cfrdbase$MRN), ]
after_cfrd <- length(unique(alldata$MRN))

# number excluded with CFRD at baseline
nexcl_cfrd <- before_cfrd - after_cfrd

# create variable for CFRD groups (i.e., those who developed CFRD vs those who did not)
# and get date of first OGTT with CFRD
cfrdcheck <- alldata[alldata$cfrd_visit == 1, c("MRN", "Date", "cfrd_visit")]
cfrdcheck <- cfrdcheck[order(cfrdcheck$MRN, desc(cfrdcheck$cfrd_visit)), ]
cfrdcheck <- cfrdcheck[!is.na(cfrdcheck$MRN), ]
cfrdcheck <- cfrdcheck %>%
  group_by(MRN) %>%
  filter(row_number() == 1)
colnames(cfrdcheck) <- c("MRN", "Date of CFRD diagnosis", "CFRD")
alldata <- merge(alldata, cfrdcheck, by = "MRN", all.x = T, all.y = T)
alldata$CFRD <- ifelse(is.na(alldata$CFRD), 0, 1)

# get baseline age
baseage <- alldata[alldata$Date == alldata$`Date of first OGTT`, c("MRN", "age")]
colnames(baseage) <- c("MRN", "Base_age")
alldata <- merge(alldata, baseage, by = "MRN", all.x = T, all.y = T)

# get baseline 1 hour and 2 hour glucose
basegluc <- alldata[alldata$Date == alldata$`Date of first OGTT`, c("MRN", "X1.hour.Glucose", "X2.hour.Glucose")]
colnames(basegluc) <- c("MRN", "Baseline_1hr_glucose", "Baseline_2hr_glucose")
alldata <- merge(alldata, basegluc, by = "MRN", all.x = T, all.y = T)

# dichotomize baseline 1 hour glucose
alldata$Baseline_1hr_glucose_155 <- ifelse(alldata$Baseline_1hr_glucose >= 155, 1, 0)
alldata$Baseline_1hr_glucose_140 <- ifelse(alldata$Baseline_1hr_glucose >= 140, 1, 0)

# dichotomize baseline 2 hour glucose
alldata$Baseline_2hr_glucose_140 <- ifelse(alldata$Baseline_2hr_glucose >= 140, 1, 0)

# find date of last OGTT
lastogtt <- alldata[
  !is.na(alldata$Fasting.Glucose) | !is.na(alldata$X1.hour.Glucose) | !is.na(alldata$X2.hour.Glucose),
  c("MRN", "Date")
]
lastogtt <- lastogtt[order(lastogtt$MRN, desc(lastogtt$Date)), ]
lastogtt <- lastogtt %>%
  group_by(MRN) %>%
  filter(row_number() == 1)
colnames(lastogtt) <- c("MRN", "Date of last OGTT")
alldata <- merge(alldata, lastogtt, by = "MRN", all.x = T, all.y = T)

# read in date of modulator use
mod <- read.csv("./1 hour OGTT in CFRD/Data_raw/modulators.csv", na.strings = c("", " ", NA))
mod$Kalydeco.Start.Date <- as.Date(mod$Kalydeco.Start.Date, format = "%m/%d/%Y")
mod$Orkambi.Start.Date <- as.Date(mod$Orkambi.Start.Date, format = "%m/%d/%Y")
mod$Symdeko.Start.Date <- as.Date(mod$Symdeko.Start.Date, format = "%m/%d/%Y")
mod$Trikafta.Start.Date <- as.Date(mod$Trikafta.Start.Date, format = "%m/%d/%Y")
mod$modstart <- as.Date(NA)
mod$he_modstart <- as.Date(NA)
mod$me_modstart <- as.Date(NA)
for (i in 1:nrow(mod)) {
  mod[i, ]$modstart <-
    as.Date(pmin(mod[i, ]$Kalydeco.Start.Date, mod[i, ]$Orkambi.Start.Date, mod[i, ]$Symdeko.Start.Date, mod[i, ]$Trikafta.Start.Date, na.rm = T))
  mod[i, ]$he_modstart <- as.Date(pmin(mod[i, ]$Kalydeco.Start.Date, mod[i, ]$Trikafta.Start.Date, na.rm = T))
  mod[i, ]$me_modstart <- as.Date(pmin(mod[i, ]$Orkambi.Start.Date, mod[i, ]$Symdeko.Start.Date, na.rm = T))
}
modkeep <- mod[, c("MRN", "modstart", "he_modstart", "me_modstart")]
alldata <- merge(alldata, modkeep, by = "MRN", all.x = TRUE, all.y = FALSE)
alldata$onmod <- ifelse(!is.na(alldata$modstart) & alldata$modstart <= alldata$Date, 1,
  ifelse(!is.na(alldata$modstart) & alldata$modstart > alldata$Date, 0, NA)
)
alldata$onmod <- ifelse(is.na(alldata$modstart) & is.na(alldata$onmod), 0, alldata$onmod)

alldata$onhemod <- ifelse(!is.na(alldata$he_modstart) & alldata$he_modstart <= alldata$Date, 1,
  ifelse(!is.na(alldata$he_modstart) & alldata$he_modstart > alldata$Date, 0, NA)
)
alldata$onhemod <- ifelse(is.na(alldata$he_modstart) & is.na(alldata$onhemod), 0, alldata$onhemod)

alldata$onmemod <- ifelse(!is.na(alldata$me_modstart) & alldata$me_modstart <= alldata$Date, 1,
  ifelse(!is.na(alldata$me_modstart) & alldata$me_modstart > alldata$Date, 0, NA)
)
alldata$onmemod <- ifelse(is.na(alldata$me_modstart) & is.na(alldata$onmemod), 0, alldata$onmemod)


alldata$FEV.1.per.pred_FVC.per.pred <- alldata$FEV1.per.pred / alldata$FVC.per.pred

# for analyses about prediction of CFRD, we need to exclude those who only have one OGTT
# can use alldata for mixed models of PFTs and BMI
oneogtt <- alldata[alldata$`Date of first OGTT` == alldata$`Date of last OGTT`, ]
multogtt <- alldata[!(alldata$MRN %in% oneogtt$MRN), ]

# have CFRD indicator
# create variable for follow-up time
# in those who do not develop CFRD, this is the time between first and last OGTT, and they are censored
# for those who develop CFRD, this is time between first OGTT and diagnosis of CFRD
multogtt$Follow_up_time_yrs <- ifelse(multogtt$CFRD == 1, (multogtt$`Date of CFRD diagnosis` - multogtt$`Date of first OGTT`) / 365.25,
  (multogtt$`Date of last OGTT` - multogtt$`Date of first OGTT`) / 365.25
)

# get age at diagnosis of CFRD
multogtt$age_at_CFRD_dx <- ifelse(multogtt$CFRD == 1, (multogtt$`Date of CFRD diagnosis` - multogtt$DOB) / 365.25, NA)

# create categorical time
multogtt$cat_time <- as.factor(round_any(multogtt$Follow_up_time_yrs, 0.5))
# need a time variable for mixed models
multogtt$time <- as.numeric((multogtt$Date - multogtt$`Date of first OGTT`) / 365.25)
multogtt$cat_time2 <- as.factor(round_any(multogtt$time, 0.5))

# get number of participants in each cohort
n_alldata <- length(unique(alldata$MRN))
n_multogtt <- length(unique(multogtt$MRN))
# number of participants in each cohort who developed CFRD
n_alldata_cfrd <- length(unique(alldata[alldata$CFRD == 1, ]$MRN))
n_multogtt_cfrd <- length(unique(multogtt[multogtt$CFRD == 1, ]$MRN))

# create dataset with baseline only
baseline_mult <- multogtt[multogtt$Date == multogtt$`Date of first OGTT`, ]
baseline_mult$onmod_baseline <- as.factor(baseline_mult$onmod)
baseline_all <- alldata[alldata$Date == alldata$`Date of first OGTT`, ]
baseline_all$onmod_baseline <- as.factor(baseline_all$onmod)
# find patients who were put on modulators during follow-up
evermod <- alldata %>%
  group_by(MRN) %>%
  summarise(max(onmod))
baseline_all <- merge(baseline_all, evermod, by = "MRN", all.x = T, all.y = T)
baseline_all$modstarted_fup <- as.factor(ifelse(baseline_all$onmod_baseline == 0 & baseline_all$`max(onmod)` == 1, 1, 0))
baseline_mult <- merge(baseline_mult, evermod, by = "MRN", all.x = T, all.y = F)
baseline_mult$modstarted_fup <- as.factor(ifelse(baseline_mult$onmod_baseline == 0 & baseline_mult$`max(onmod)` == 1, 1, 0))

################## FILL IN MISSING A1c, BMI, PFT AT BASELINE

# find most recent A1c that is within the 90 days prior to OGTT or up to 14 days after OGTT
a1c$Date.of.A1C <- as.Date(a1c$Date.of.A1C, format = "%m/%d/%Y")
baseline_mult$A1C <- unlist(apply(baseline_mult, 1, function(r) {
  Date <- r["Date of first OGTT"]
  ID <- as.numeric(r["MRN"])
  d <- a1c %>% filter(MRN == ID)
  d$days <- difftime(d$Date.of.A1C, Date, units = "days")
  d <- d %>% filter(days <= 14 & days >= -90)
  a <- d$A1C[which.min(abs(difftime(d$Date.of.A1C, Date)))]
  if (is.na(Date) | nrow(d) == 0) {
    a <- NA
  }
  return(a)
}))
baseline_all$A1C <- unlist(apply(baseline_all, 1, function(r) {
  Date <- r["Date of first OGTT"]
  ID <- as.numeric(r["MRN"])
  d <- a1c %>% filter(MRN == ID)
  d$days <- difftime(d$Date.of.A1C, Date, units = "days")
  d <- d %>% filter(days <= 14 & days >= -90)
  a <- d$A1C[which.min(abs(difftime(d$Date.of.A1C, Date)))]
  if (is.na(Date) | nrow(d) == 0) {
    a <- NA
  }
  return(a)
}))

# find most recent FEV1 that is within the 90 days prior to OGTT or up to 14 days after OGTT
pfttemp <- alldata[!is.na(alldata$FEV1.per.pred), ]
pfttemp$Date.of.PFT <- as.Date(pfttemp$Date, format = "%m/%d/%Y")
baseline_mult$FEV1.per.pred <- unlist(apply(baseline_mult, 1, function(r) {
  Date <- r["Date of first OGTT"]
  ID <- as.numeric(r["MRN"])
  d <- pfttemp %>% filter(MRN == ID)
  d$days <- difftime(d$Date.of.PFT, Date, units = "days")
  d <- d %>% filter(days <= 14 & days >= -90)
  a <- d$FEV1.per.pred[which.min(abs(difftime(d$Date.of.PFT, Date)))]
  if (is.na(Date) | nrow(d) == 0) {
    a <- NA
  }
  return(a)
}))
baseline_all$FEV1.per.pred <- unlist(apply(baseline_all, 1, function(r) {
  Date <- r["Date of first OGTT"]
  ID <- as.numeric(r["MRN"])
  d <- pfttemp %>% filter(MRN == ID)
  d$days <- difftime(d$Date.of.PFT, Date, units = "days")
  d <- d %>% filter(days <= 14 & days >= -90)
  a <- d$FEV1.per.pred[which.min(abs(difftime(d$Date.of.PFT, Date)))]
  if (is.na(Date) | nrow(d) == 0) {
    a <- NA
  }
  return(a)
}))
# didn't add any PFTs so won't repeat code for FVC

# find most recent BMI that is within the 90 days prior to OGTT or up to 14 days after OGTT
bmitemp <- alldata[!is.na(alldata$BMI), ]
bmitemp$Date.of.BMI <- as.Date(bmitemp$Date, format = "%m/%d/%Y")
baseline_mult$BMI <- unlist(apply(baseline_mult, 1, function(r) {
  Date <- r["Date of first OGTT"]
  ID <- as.numeric(r["MRN"])
  d <- bmitemp %>% filter(MRN == ID)
  d$days <- difftime(d$Date.of.BMI, Date, units = "days")
  d <- d %>% filter(days <= 14 & days >= -90)
  a <- d$BMI[which.min(abs(difftime(d$Date.of.BMI, Date)))]
  if (is.na(Date) | nrow(d) == 0) {
    a <- NA
  }
  return(a)
}))
baseline_all$BMI <- unlist(apply(baseline_all, 1, function(r) {
  Date <- r["Date of first OGTT"]
  ID <- as.numeric(r["MRN"])
  d <- bmitemp %>% filter(MRN == ID)
  d$days <- difftime(d$Date.of.BMI, Date, units = "days")
  d <- d %>% filter(days <= 14 & days >= -90)
  a <- d$BMI[which.min(abs(difftime(d$Date.of.BMI, Date)))]
  if (is.na(Date) | nrow(d) == 0) {
    a <- NA
  }
  return(a)
}))

#############################################################

# create multogtt with time <4 years since there is little data beyond that
multogtt_reduced <- multogtt[multogtt$time <= 4, ]
# rename data
lorenz <- baseline_mult
registry <- annual
rm(annual, baseline_mult)
```

# Data cleaning

- Age groups were chosen based on the Lorenz et al. data. We split the age column into equal tertiles:

```{r}
lorenz$age_group <- cut(lorenz$age, c(7, 10.48, 13.3, 22.2), right = F)
table(lorenz$age_group, lorenz$CFRD)
registry$age_group <- cut(registry$Age_YrEnd, c(7, 10.48, 13.3, 22.2), right = F)
# Write data
write.csv(lorenz,
  file = "./CF-SuGAR/Background/Power Calculations/Data/lorenz.csv",
  row.names = F, na = ""
)
```

# Aim 1

- Power calculations for Aim 1 used only the Lorenz et al. data and no registry data.

## Base model

```{r}
# CPH model for baseline 1 hour glucose
lorenz_base <- coxph(
  Surv(Follow_up_time_yrs, CFRD) ~ age_group + Sex,
  data = lorenz
)
# Forest plot and coefficients table
lorenz_base %>%
  tbl_regression(exponentiate = T)
ggcoef_table(lorenz_base,
  show_p_values = F, add_reference_rows = T, exponentiate = T,
  signif_stars = F, colour = F
)
```

The above model had a generalized $R^2$ of `r as.numeric(summary(lorenz_base)$rsq[1])`.

## Model with one hour OGTT

```{r}
# CPH model for baseline 1 hour glucose
lorenz_1hr <- coxph(
  Surv(Follow_up_time_yrs, CFRD) ~ age_group + Sex + Baseline_1hr_glucose,
  data = lorenz
)
summary(lorenz_1hr)
# Forest plot and coefficients table
lorenz_1hr %>%
  tbl_regression(exponentiate = T)
ggcoef_table(lorenz_1hr,
  show_p_values = F, add_reference_rows = T, exponentiate = T,
  signif_stars = F, colour = F
)
```

The above model had a generalized $R^2$ of `r as.numeric(summary(lorenz_1hr)$rsq[1])`.

## PROC POWER

### HR for 1 hour OGTT glucose

```{r}
exp(lorenz_1hr$coefficients["Baseline_1hr_glucose"]) * 0.5
exp(lorenz_1hr$coefficients["Baseline_1hr_glucose"])
exp(lorenz_1hr$coefficients["Baseline_1hr_glucose"]) * 2
```

### Regression of age group and sex on 1 hour OGTT glucose

```{r}
lin_mod <- lm(Baseline_1hr_glucose ~ age_group + Sex, data = lorenz)
summary(lin_mod)$r.squared
```

### SD of 1 hour OGTT glucose

```{r}
sd(lorenz$Baseline_1hr_glucose)
```

### Event probability

```{r}
registry %>%
  group_by(eDWID) %>%
  summarise(cfrd = unique(first_cfrd), .groups = "drop") %>%
  summarise(cfrd = mean(!is.na(cfrd)))
mean(lorenz$CFRD == 1)
```

# Aim 2

- All models below were fit using registry data.
- One BMI value of > 200 was removed

```{r}
registry$bmi[registry$bmi >= 200] <- NA
# A1c group
registry$a1c_group <- as.numeric(registry$A_hgba1c <= 5.9)
# Remove people with CFRD
registry <- registry %>%
  filter(CFRD != "CFRD+") %>%
  arrange(eDWID, ReviewYear)
# Write for SAS
write.csv(registry,
  file = "./CF-SuGAR/Background/Power Calculations/Data/registry.csv",
  row.names = F, na = ""
)
# Proportion of good and bad A1c
# Overall
prop.table(table(registry$a1c_group))
# By person (take each person's worst)
t <- registry %>%
  group_by(eDWID) %>%
  summarise(
    a1c_group = ifelse(any(a1c_group == "(5.9, Inf]"), "(5.9, Inf]", "(-Inf,5.9]")
  )
prop.table(table(t$a1c_group))
```

## BMI

### Plots

#### Spaghetti

```{r}
plot_df <- registry %>%
  select(eDWID, ReviewYear, Age_YrEnd, bmi) %>%
  drop_na()
ggplot(plot_df, aes(x = Age_YrEnd, y = bmi, group = factor(eDWID))) +
  geom_point(alpha = 0.1) +
  geom_line(alpha = 0.1) +
  theme(legend.position = element_blank()) +
  theme_bw()
```

#### BMI correlation matrix by visit number

```{r}
t <- registry %>%
  group_by(eDWID) %>%
  mutate(visit_number = row_number()) %>%
  filter(!is.na(bmi)) %>%
  select(eDWID, visit_number, bmi) %>%
  pivot_wider(names_from = visit_number, values_from = bmi)
head(t)
cor(data.matrix(t[, -c(1)]), use = "pairwise.complete.obs")
```

### Models

```{r}
bmi_mod <- lm(BMI ~ age + as.numeric(Baseline_1hr_glucose >= 140), data = lorenz)
summary(bmi_mod)
sd(resid(bmi_mod))
prop.table(table(lorenz$Baseline_1hr_glucose >= 140))
```

## FEV1 % predicted

### Plots

#### Spaghetti

```{r}
plot_df <- registry %>%
  select(eDWID, ReviewYear, Age_YrEnd, A_FEV1_pct_predicted) %>%
  drop_na()
ggplot(plot_df, aes(
  x = Age_YrEnd, y = A_FEV1_pct_predicted, group = factor(eDWID)
)) +
  geom_point(alpha = 0.1) +
  geom_line(alpha = 0.1) +
  theme(legend.position = element_blank()) +
  theme_bw()
```

#### FEV1 correlation matrix by visit number

```{r}
t <- registry %>%
  group_by(eDWID) %>%
  mutate(visit_number = row_number()) %>%
  filter(!is.na(A_FEV1_pct_predicted)) %>%
  select(eDWID, visit_number, A_FEV1_pct_predicted) %>%
  pivot_wider(names_from = visit_number, values_from = A_FEV1_pct_predicted)
head(t)
cor(data.matrix(t[, -c(1)]), use = "pairwise.complete.obs")
```

### Models

```{r}
fev1_mod <- lm(FEV1.per.pred ~ age + as.numeric(Baseline_1hr_glucose >= 140), data = lorenz)
summary(fev1_mod)
sd(resid(fev1_mod))
```

# Change in FEV1

```{r}
encounters <- read.csv("C:/Users/vigerst/OneDrive - The University of Colorado Denver/Vigers/CF/Christine Chan/CF Registry/Data_Raw/CFF19_encountersMerged_Del1.csv")
# Exclude T1D and T2D
encounters <- encounters %>%
  filter(!cfrd_status %in% c(4, 5))
# Find each person's first year on modulators
encounters$Vx770[is.na(encounters$Vx770)] <- 0
encounters$Vx809comb[is.na(encounters$Vx809comb)] <- 0
encounters <- encounters %>%
  arrange(eDWID, reviewyear, encounternum) %>%
  group_by(eDWID) %>%
  mutate(
    modulator = factor(Vx770 == 1 | Vx809comb == 1,
      levels = c(F, T),
      labels = c("Not on Modulator", "On Modulator")
    ),
    first_modulator =
      first(reviewyear[modulator == "On Modulator"], na_rm = T)
  )
# Limit to two years prior and one year post-modulator
encounters <- encounters %>%
  filter(
    !is.na(first_modulator),
    reviewyear >= first_modulator - 2 & reviewyear <= first_modulator + 1
  )
# Limit dataset to people who were seen regularly but not too often
# (likely hospitalized), make a new encounter number
year_picker <- encounters %>%
  group_by(eDWID, reviewyear) %>%
  summarise(n = n()) %>%
  filter(n >= 3 & n <= 10) %>%
  ungroup() %>%
  mutate(id = paste(eDWID, reviewyear, sep = "_"))
encounters <- encounters %>%
  filter(paste(eDWID, reviewyear, sep = "_") %in% year_picker$id) %>%
  group_by(eDWID) %>%
  mutate(visit = row_number()) %>%
  select(
    eDWID, reviewyear, encounternum, visit, modulator,
    GLI_FEV1_pct_predicted
  )
# Plot
# ggplot(encounters, aes(x = visit, y = GLI_FEV1_pct_predicted, group = eDWID)) +
#   geom_line(alpha = 0.5)
# ggplot(encounters, aes(x = visit, y = GLI_FEV1_pct_predicted, group = eDWID)) +
#   geom_point(alpha = 0.1) +
#   geom_smooth(aes(color = modulator, group = modulator))
# Write for SAS models
write.csv(encounters, file = "C:/Users/vigerst/OneDrive - The University of Colorado Denver/Vigers/CF/Christine Chan/CF-SuGAR/Background/Power Calculations/Data/encounters.csv",row.names = F,na = "")
```
