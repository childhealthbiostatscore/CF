---
title: "CFF GCT Study"
author: "Tim Vigers"
date: "today"
date-format: long
format:
  html:
    toc: true
    toc-depth: 5
    toc-float: true
    code-fold: true
    self-contained: true
    fig-cap-location: top
    fig-height: 9
    fig-width: 12
    page-layout: full
    theme:
      light: flatly
      dark: darkly
bibliography: /home/tim/Documents/Miscellaneous/zotero.bib
csl: /home/tim/GitHub/styles/american-medical-association.csl
editor: source
---

```{r setup}
#| include: false
library(readxl)
library(dplyr)
library(tidyr)
library(ggplot2)
library(pROC)
library(gtsummary)
library(gt)
home_dir <- switch(Sys.info()["sysname"],
  "Darwin" = "/Users/timvigers/Library/CloudStorage/OneDrive-TheUniversityofColoradoDenver/Vigers/CF",
  "Windows" = "C:/Users/Tim/OneDrive - The University of Colorado Denver/Vigers/CF",
  "Linux" = "/home/tim/OneDrive/Vigers/CF"
)
github_dir <- switch(Sys.info()["sysname"],
  "Darwin" = "/Users/timvigers/GitHub",
  "Windows" = "C:/Users/Tim/GitHub",
  "Linux" = "/home/tim/GitHub"
)
knitr::opts_knit$set(root.dir = home_dir)
```

```{r data cleaning}
#| warning: false
# Import from REDCap
df <- read.csv("./Christine Chan/CFF GCT Study/Data_Raw/CysticFibrosisScreen_DATA_LABELS_2024-04-19_1740.csv",
  na.strings = ""
)
# Create standardized study ID
df$ID <- sub("--1|--2|--01|-1|-2", "", df[, 1])
# Numeric variables
df$Plasma.Glucose <- as.numeric(df$Plasma.Glucose)
df$X1.hour.Plasma.Glucose.Value <- as.numeric(df$X1.hour.Plasma.Glucose.Value)
# Combine race and ethnicity columns
races <- c(
  "White", "Black/African American", "American Indian/Alaska Native",
  "Asian Non-Indian", "Asian Indian", "Native Hawaiian/Other Pacific Islander"
)
ethnicities <- c("Hispanic/Latino", "Not Hispanic/Latino", "N/A")
df$Race <- apply(
  df[, grep("Ethnic.Origin.Race", colnames(df))], 1,
  function(r) {
    paste0(races[which(r == "Checked")], collapse = "/")
  }
)
df$Race <- factor(df$Race, levels = races)
df$Ethnicity <- apply(
  df[, grep("Ethnicity", colnames(df))], 1,
  function(r) {
    paste0(ethnicities[which(r == "Checked")], collapse = "/")
  }
)
df$Ethnicity <- factor(df$Ethnicity, levels = ethnicities[1:2])
# Fill in missing data for every column and take the first row, then select and
# rename columns
df <- df %>%
  group_by(ID) %>%
  fill(everything(), .direction = "downup") %>%
  filter(row_number() == 1) %>%
  ungroup() %>%
  rename(
    "OGTT 0 min" = Plasma.Glucose..pre.glucose.drink...mg.dl.,
    "OGTT 60 min" = Plasma.Glucose..1.hour.after.glucose.drink...mg.dl.,
    "OGTT 120 min" = Plasma.Glucose..2.hour.after.glucose.drink...mg.dl.,
    "GCT 0 min plasma" = Plasma.Glucose,
    "GCT 0 min capillary" = Capillary,
    "GCT 60 min plasma" = X1.hour.Plasma.Glucose.Value,
    "GCT 60 min capillary" = X1.hour.Capillary.Glucose.Value,
    "HbA1c" = Hemoglobin.A1c..,
    "Age" = Age.at.enrollment..years.,
    "Pancreatic insufficient" = Pancreatic.exocrine.insufficient
  ) %>%
  select(
    ID, HbA1c, Age, Gender, Race, Ethnicity, `Pancreatic insufficient`,
    contains("GCT"), contains("OGTT ")
  )
# Get diagnosis
df$Diagnosis <- "NGT"
df$Diagnosis[df$`OGTT 0 min` >= 100] <- "IFG"
df$Diagnosis[df$`OGTT 60 min` >= 200] <- "INDET"
df$Diagnosis[df$`OGTT 120 min` >= 140] <- "IGT"
df$Diagnosis[df$`OGTT 120 min` >= 200] <- "CFRD"
df[which(rowSums(is.na(df[, grep("OGTT", colnames(df))])) == 3), "Diagnosis"] <- NA
df$Diagnosis <- factor(df$Diagnosis,
  levels = c("NGT", "IFG", "INDET", "IGT", "CFRD")
)
df$Dysglycemia <- factor(df$Diagnosis,
  levels = c("NGT", "IFG", "INDET", "IGT", "CFRD"),
  labels = c("NGT", "AGT", "AGT", "AGT", "AGT")
)
# Write for Christine to check
write.csv(df,
          file = "./Christine Chan/CFF GCT Study/Data_Clean/gct_analysis_data.csv",
          row.names = F,na = "")
# Remove those without OGTT data
no_ogtt <- df$ID[which(is.na(df$Diagnosis))]
df <- df %>% filter(!ID %in% no_ogtt)
```

# Demographics

A total of `r length(no_ogtt)` participants were excluded because they had no OGTT data.

```{r}
#| label: table1a
#| tbl-cap: Participant characteristics by diagnosis
#| message: false
df %>%
  select(-ID, -Dysglycemia) %>%
  tbl_summary(by = Diagnosis, missing_text = "(Missing)") %>%
  add_overall() %>%
  add_p() %>%
  separate_p_footnotes()
```

```{r}
#| label: table1b
#| tbl-cap: Participant characteristics by dysglycemia
#| message: false
df %>%
  select(-ID) %>%
  tbl_summary(by = Dysglycemia) %>%
  add_overall() %>%
  add_p() %>%
  separate_p_footnotes()
```

# OGTT Figures

```{r}
#| label: fig-boxplot
#| fig-cap: Boxplot of OGTT glucose values by diabetes status
#| warning: false
plot_df <- df %>% pivot_longer(contains("OGTT"),
  names_to = "OGTT Timepoint", values_to = "Glucose"
)
plot_df$`OGTT Timepoint` <- factor(plot_df$`OGTT Timepoint`,
  levels = c("OGTT 0 min", "OGTT 60 min", "OGTT 120 min")
)
box_p <- ggplot(
  plot_df,
  aes(x = `OGTT Timepoint`, y = Glucose, fill = `OGTT Timepoint`)
) +
  geom_boxplot() +
  scale_y_continuous(breaks = c(100, 140, 200, 300)) +
  facet_wrap(~Diagnosis) +
  theme(legend.position = "none")
box_p
```

```{r}
#| label: fig-point
#| fig-cap: Point plot of OGTT glucose values by diabetes status
#| warning: false
point_p <- ggplot(
  plot_df,
  aes(x = `OGTT Timepoint`, y = Glucose, color = `OGTT Timepoint`)
) +
  geom_jitter() +
  scale_y_continuous(breaks = c(100, 140, 200, 300)) +
  facet_wrap(~Diagnosis) +
  theme(legend.position = "none")
point_p
```

```{r}
#| label: fig-violin
#| fig-cap: Violin plot of OGTT glucose values by diabetes status
#| warning: false
violin_p <- ggplot(
  plot_df,
  aes(x = `OGTT Timepoint`, y = Glucose, fill = `OGTT Timepoint`)
) +
  geom_violin() +
  scale_y_continuous(breaks = c(100, 140, 200, 300)) +
  facet_wrap(~Diagnosis) +
  theme(legend.position = "none")
violin_p
```

# ROC analyses

Dysglycemia was defined as any diagnosis on OGTT other than normal glucose tolerance (NGT).

```{r}
#| label: tbl-roc-dysglycemia
#| tbl-cap: Accuracy of different screening tests to predict dysglycemia using ROC curve analyses
#| message: false
gctpl_roc <- roc(Dysglycemia ~ `GCT 60 min plasma`, data = df)
gctcap_roc <- roc(Dysglycemia ~ `GCT 60 min capillary`, data = df)
ogtt1_roc <- roc(Dysglycemia ~ `OGTT 60 min`, data = df)
rpg_roc <- roc(Dysglycemia ~ `GCT 0 min plasma`, data = df)
rcg_roc <- roc(Dysglycemia ~ `GCT 0 min capillary`, data = df)
a1c_roc <- roc(Dysglycemia ~ HbA1c, data = df)
roc_table <-
  lapply(
    list(gctpl_roc, gctcap_roc, ogtt1_roc, rpg_roc, rcg_roc, a1c_roc),
    function(roc) {
      coords(roc, "best", ret = "all")
    }
  )
roc_table <- do.call(rbind, roc_table)
rownames(roc_table) <- c("GCTpl", "GCTcap", "OGTT 1 hr", "RPG", "RCG", "A1c")
gt(roc_table, rownames_to_stub = T) %>% fmt_number(decimals = 3)
```

```{r}
invisible(lapply(
  list(gctpl_roc, gctcap_roc, ogtt1_roc, rpg_roc, rcg_roc, a1c_roc),
  function(roc) {
    print(plot(roc, print.auc = T, print.thres = T))
  }
))
```

```{r}
#| label: tbl-roc-cutoffs
#| tbl-cap: Sensitivity and specificity (95% bootstrap confidence intervals) to measure the performance of the glucose challenge test plasma glucose (GCTpl) to predict dysglycemia at different thresholds
#| message: false
gctpl_140 <- as.data.frame(ci.coords(gctpl_roc,
  x = 140,
  ret = c("sensitivity", "specificity")
))
gctpl_150 <- as.data.frame(ci.coords(gctpl_roc,
  x = 150,
  ret = c("sensitivity", "specificity")
))
gctpl_160 <- as.data.frame(ci.coords(gctpl_roc,
  x = 160,
  ret = c("sensitivity", "specificity")
))
gctpl_table <- do.call(rbind, list(gctpl_140, gctpl_150, gctpl_160))
rownames(gctpl_table) <- c(140, 150, 160)
gt(gctpl_table, rownames_to_stub = T) %>% fmt_number(decimals = 3)
```
