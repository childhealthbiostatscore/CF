---
title: "CFF GCT Study"
author: "Tim Vigers"
date: "today"
date-format: long
format:
  html:
    toc: true
    toc-depth: 5
    toc-float: true
    code-fold: true
    self-contained: true
    fig-cap-location: top
    fig-height: 9
    fig-width: 12
    page-layout: full
    theme:
      light: flatly
      dark: darkly
bibliography: /Users/timvigers/Documents/Miscellaneous/zotero.bib
csl: /Users/timvigers/Documents/GitHub/styles/american-medical-association.csl
editor: source
---

```{r setup}
#| include: false
library(readxl)
library(dplyr)
library(tidyr)
library(lubridate)
library(ggplot2)
library(ggpmisc)
library(pROC)
library(gtsummary)
library(gt)
library(rspiro)
library(childsds)
knitr::opts_knit$set(root.dir = "/Users/timvigers/Library/CloudStorage/OneDrive-TheUniversityofColoradoDenver/Vigers/CF")
```

```{r data cleaning}
#| warning: false
# Import from REDCap
df <- read.csv("./Christine Chan/CFF GCT Study/Data_Raw/CysticFibrosisScreen_DATA_LABELS_2024-04-19_1740.csv",
  na.strings = ""
)
# Create standardized study ID
df$ID <- sub("--1|--2|--01|-1|-2", "", df[, 1])
# Numeric variables
df$Plasma.Glucose <- as.numeric(df$Plasma.Glucose)
df$X1.hour.Plasma.Glucose.Value <- as.numeric(df$X1.hour.Plasma.Glucose.Value)
# Combine race and ethnicity columns
races <- c(
  "White", "Black/African American", "American Indian/Alaska Native",
  "Asian Non-Indian", "Asian Indian", "Native Hawaiian/Other Pacific Islander"
)
ethnicities <- c("Hispanic/Latino", "Not Hispanic/Latino", "N/A")
df$Race <- apply(
  df[, grep("Ethnic.Origin.Race", colnames(df))], 1,
  function(r) {
    paste0(races[which(r == "Checked")], collapse = "/")
  }
)
df$Race <- factor(df$Race, levels = races)
df$Ethnicity <- apply(
  df[, grep("Ethnicity", colnames(df))], 1,
  function(r) {
    paste0(ethnicities[which(r == "Checked")], collapse = "/")
  }
)
df$Ethnicity <- factor(df$Ethnicity, levels = ethnicities[1:2])
# Fill in missing data for every column and take the first row, then select and
# rename columns
df <- df %>%
  group_by(ID) %>%
  fill(everything(), .direction = "downup") %>%
  filter(row_number() == 1) %>%
  ungroup() %>%
  rename(
    "OGTT 0 min" = Plasma.Glucose..pre.glucose.drink...mg.dl.,
    "OGTT 60 min" = Plasma.Glucose..1.hour.after.glucose.drink...mg.dl.,
    "OGTT 120 min" = Plasma.Glucose..2.hour.after.glucose.drink...mg.dl.,
    "GCT 0 min plasma" = Plasma.Glucose,
    "GCT 0 min capillary" = Capillary,
    "GCT 60 min plasma" = X1.hour.Plasma.Glucose.Value,
    "GCT 60 min capillary" = X1.hour.Capillary.Glucose.Value,
    "HbA1c" = Hemoglobin.A1c..,
    "Age" = Age.at.enrollment..years.,
    "Pancreatic insufficient" = Pancreatic.exocrine.insufficient,
    "Weight (kg)" = Body.weight..kg., "Height (cm)" = Height..cm.,
    "Highest FEV1" = Highest.FEV1..last.12.months..FEV1..L.,
    "Second Highest FEV1" =
      Second.Highest.FEV1..12.months...FEV1..2nd.highest.in.L..,
    "Type 2 diabetes in the family - Father" =
      Type.2.diabetes.in.the.family...Father,
    "Type 2 diabetes in the family - Mother" =
      Type.2.diabetes.in.the.family...Mother,
    "Brothers (number with diabetes)" = Brothers..number.with.diabetes.,
    "Sisters (number with diabetes)" = Sisters..number.with.diabetes.,
    "Number of other relatives with diabetes (aunts, uncles, cousins, grandparents)" =
      Number.of.other.relatives.with.diabetes..aunts..uncles..cousins..grandparents.
  ) %>%
  select(
    ID, HbA1c, Age, `Weight (kg)`, `Height (cm)`, BMI,
    Gender, Race, Ethnicity, `Pancreatic insufficient`,
    `Type 2 diabetes in the family - Father`:`Number of other relatives with diabetes (aunts, uncles, cousins, grandparents)`,
    `Highest FEV1`, `Second Highest FEV1`,
    contains("GCT"), contains("OGTT "), "OGTT.Date.Time",
    "Study.visit.PFTs.Date."
  )
# Remove C044
df <- df %>% filter(ID != "C044")
# Calculate FEV1 pp and height, weight, and BMI percentiles
lung_function <- df %>%
  select(
    ID, Age, Gender, Race, `Height (cm)`, `Highest FEV1`,
    `Second Highest FEV1`
  ) %>%
  filter(!is.na(Gender))
lung_function$`Average of Highest FEV1s` <-
  rowMeans(lung_function[, c("Highest FEV1", "Second Highest FEV1")], na.rm = T)
lung_function$Gender <- factor(lung_function$Gender,
  levels = c("Male", "Female"),
  labels = c("male", "female")
)
lung_function$Race <- factor(lung_function$Race,
  levels = c(
    "White", "Black/African American",
    "Asian Non-Indian", "Asian Indian", "American Indian/Alaska Native",
    "Native Hawaiian/Other Pacific Islander"
  ),
  labels = c(
    "Caucasian", "African-American", "NE Asian", "SE Asian", "Other/mixed",
    "Other/mixed"
  )
)
lung_function$`Highest FEV1pp (2012)` <- pctpred_GLI(
  age = lung_function$Age, height = lung_function$`Height (cm)` / 100,
  gender = lung_function$Gender, ethnicity = lung_function$Race,
  FEV1 = lung_function$`Highest FEV1`
)
lung_function$`Second Highest FEV1pp (2012)` <- pctpred_GLI(
  age = lung_function$Age, height = lung_function$`Height (cm)` / 100,
  gender = lung_function$Gender, ethnicity = lung_function$Race,
  FEV1 = lung_function$`Second Highest FEV1`
)
lung_function$`Average of Highest FEV1pp (2012)` <- pctpred_GLI(
  age = lung_function$Age, height = lung_function$`Height (cm)` / 100,
  gender = lung_function$Gender, ethnicity = lung_function$Race,
  FEV1 = lung_function$`Average of Highest FEV1s`
)





lung_function$`Highest FEV1pp (2022)` <- pctpred_GLIgl(
  age = lung_function$Age, height = lung_function$`Height (cm)` / 100,
  gender = lung_function$Gender, FEV1 = lung_function$`Highest FEV1`
)
lung_function$`Second Highest FEV1pp (2022)` <- pctpred_GLIgl(
  age = lung_function$Age, height = lung_function$`Height (cm)` / 100,
  gender = lung_function$Gender, FEV1 = lung_function$`Second Highest FEV1`
)
lung_function$`Average of Highest FEV1pp (2012)` <- pctpred_GLIgl(
  age = lung_function$Age, height = lung_function$`Height (cm)` / 100,
  gender = lung_function$Gender,
  FEV1 = lung_function$`Average of Highest FEV1s`
)

df <- left_join(
  df,
  lung_function %>%
    select(ID, `Highest FEV1pp (2012)`:`Second Highest FEV1pp (2022)`)
)
# Height, weight, BMI percentiles
df$`Height %ile` <- sds(df$`Height (cm)`,
  age = ifelse(df$Age > 20, 20, df$Age),
  item = "height2_20", ref = cdc.ref, type = "perc",
  male = "Male", female = "Female",
  sex = as.character(df$Gender)
)
df$`Weight %ile` <- sds(df$`Weight (kg)`,
  age = ifelse(df$Age > 20, 20, df$Age),
  item = "weight2_20", ref = cdc.ref, type = "perc",
  male = "Male", female = "Female",
  sex = as.character(df$Gender)
)
df$`BMI %ile` <- sds(df$BMI,
  age = ifelse(df$Age > 20, 20, df$Age),
  item = "bmi", ref = cdc.ref, type = "perc",
  male = "Male", female = "Female",
  sex = as.character(df$Gender)
)
df <- df %>% select(-`Highest FEV1`, -`Second Highest FEV1`)
# Time from OGTT to GCT
df$OGTT.Date.Time <- mdy_hm(df$OGTT.Date.Time)
df$Study.visit.PFTs.Date. <- mdy_hm(df$Study.visit.PFTs.Date.)
df$`Days From OGTT to GCT` <-
  as.numeric(as.Date(df$OGTT.Date.Time) - as.Date(df$Study.visit.PFTs.Date.))
df$OGTT.Date.Time <- NULL
df$Study.visit.PFTs.Date. <- NULL
# Per Christine, we can exclude C046's 140 value and keep them in the NGT
# category because they had multiple normal OGTTs after this one and the 140 is
# likely a transcription error
df$`OGTT 0 min`[df$ID == "C046"] <- NA
# Get diagnosis
df$Diagnosis <- "NGT"
df$Diagnosis[df$`OGTT 0 min` >= 100] <- "IFG"
df$Diagnosis[df$`OGTT 60 min` >= 200] <- "INDET"
df$Diagnosis[df$`OGTT 120 min` >= 140] <- "IGT"
df$Diagnosis[df$`OGTT 120 min` >= 200] <- "CFRD"
df[which(rowSums(is.na(df[, grep("OGTT", colnames(df))])) == 3), "Diagnosis"] <-
  NA
df$Diagnosis <- factor(df$Diagnosis,
  levels = c("NGT", "IFG", "INDET", "IGT", "CFRD")
)
df$Dysglycemia <- factor(df$Diagnosis,
  levels = c("NGT", "IFG", "INDET", "IGT", "CFRD"),
  labels = c("NGT", "AGT", "AGT", "AGT", "AGT")
)
df$Diabetes <- factor(df$Diagnosis,
  levels = c("NGT", "IFG", "INDET", "IGT", "CFRD"),
  labels = c("NGT", "Pre-CFRD", "Pre-CFRD", "Pre-CFRD", "CFRD")
)
df$CFRD <- factor(df$`OGTT 120 min` >= 200,
  levels = c(F, T),
  labels = c("No", "Yes")
)
# Has OGTT vs. does not
df$`Got OGTT and GCT?` <- apply(
  df[, c("OGTT 120 min", "GCT 60 min plasma")], 1, function(r) {
    !any(is.na(r))
  }
)
df$`Got OGTT and GCT?` <- factor(df$`Got OGTT and GCT?`,
  levels = c(T, F),
  labels = c(
    "Have GCT 1 Hour Plasma or OGTT 2 Hour",
    "Missing GCT 1 Hour Plasma or OGTT 2 Hour"
  )
)
# Write for Christine to check
write.csv(df,
  file = "./Christine Chan/CFF GCT Study/Data_Clean/gct_analysis_data.csv",
  row.names = F, na = ""
)
```

# Demographics

```{r}
#| label: table1a
#| tbl-cap: Participant characteristics by OGTT status
#| message: false
df %>%
  select(-ID) %>%
  tbl_summary(
    by = `Got OGTT and GCT?`, missing_text = "Missing",
    type =
      "Number of other relatives with diabetes (aunts, uncles, cousins, grandparents)" ~
        "continuous2"
  ) %>%
  add_overall() %>%
  add_p() %>%
  separate_p_footnotes()
# Limit to 189 after this
df <- df %>%
  filter(`Got OGTT and GCT?` == "Have GCT 1 Hour Plasma or OGTT 2 Hour") %>%
  select(-`Got OGTT and GCT?`)
```

```{r}
#| label: table1b
#| tbl-cap: Participant characteristics by CFRD status
#| message: false
df %>%
  select(-ID) %>%
  tbl_summary(
    by = Diabetes, missing_text = "Missing",
    type =
      "Number of other relatives with diabetes (aunts, uncles, cousins, grandparents)" ~
        "continuous2"
  ) %>%
  add_overall() %>%
  add_p() %>%
  separate_p_footnotes()
```

```{r}
#| label: table1c
#| tbl-cap: Participant characteristics by dysglycemia
#| message: false
df %>%
  select(-ID) %>%
  tbl_summary(
    by = Dysglycemia, missing_text = "Missing",
    type =
      "Number of other relatives with diabetes (aunts, uncles, cousins, grandparents)" ~
        "continuous2"
  ) %>%
  add_overall() %>%
  add_p() %>%
  separate_p_footnotes()
```

# OGTT Figures

```{r}
#| label: fig-boxplot
#| fig-cap: Boxplot of OGTT glucose values by diabetes status
#| warning: false
plot_df <- df %>%
  pivot_longer(c(`OGTT 0 min`, `OGTT 60 min`, `OGTT 120 min`),
    names_to = "OGTT Timepoint", values_to = "Glucose"
  )
plot_df$`OGTT Timepoint` <- factor(plot_df$`OGTT Timepoint`,
  levels = c("OGTT 0 min", "OGTT 60 min", "OGTT 120 min")
)
box_p <- ggplot(
  plot_df,
  aes(x = `OGTT Timepoint`, y = Glucose, fill = `OGTT Timepoint`)
) +
  geom_boxplot() +
  scale_y_continuous(breaks = c(100, 140, 200, 300)) +
  facet_wrap(~Diabetes) +
  theme_bw(base_size = 20) +
  theme(
    legend.position = "none",
    axis.text.x = element_text(angle = 45, hjust = 1),
    axis.title.x = element_blank()
  )
box_p
ggsave("./Christine Chan/CFF GCT Study/Dissemination/Figures/boxplot.png",
  box_p,
  device = "png"
)
# OGTT 1 hour and GCT 1 hour regression
scatter_p <- ggplot(df, aes(x = `GCT 60 min plasma`, y = `OGTT 60 min`)) +
  geom_point() +
  stat_poly_line() +
  stat_poly_eq(use_label(c("eq", "R2")),
    size = 5,
    label.y = "bottom", label.x = "right"
  ) +
  theme_bw(base_size = 20)
scatter_p
ggsave("./Christine Chan/CFF GCT Study/Dissemination/Figures/scatterplot.png",
  scatter_p,
  device = "png"
)
```

# ROC analyses

## Dysglycemia

Dysglycemia was defined as any diagnosis on OGTT other than normal glucose tolerance (NGT).

### Youden indices

```{r}
#| label: tbl-roc-dysglycemia
#| tbl-cap: Accuracy of different screening tests to predict dysglycemia using ROC curve analyses
#| message: false
gctpl_roc <- roc(Dysglycemia ~ `GCT 60 min plasma`, data = df)
gctcap_roc <- roc(Dysglycemia ~ `GCT 60 min capillary`, data = df)
ogtt1_roc <- roc(Dysglycemia ~ `OGTT 60 min`, data = df)
rpg_roc <- roc(Dysglycemia ~ `GCT 0 min plasma`, data = df)
rcg_roc <- roc(Dysglycemia ~ `GCT 0 min capillary`, data = df)
a1c_roc <- roc(Dysglycemia ~ HbA1c, data = df)
roc_table <-
  lapply(
    list(gctpl_roc, gctcap_roc, ogtt1_roc, rpg_roc, rcg_roc, a1c_roc),
    function(roc) {
      coords(roc, "best", ret = "all")
    }
  )
roc_table <- do.call(rbind, roc_table)
rownames(roc_table) <- c("GCTpl", "GCTcap", "OGTT 1 hr", "RPG", "RCG", "A1c")
gt(roc_table, rownames_to_stub = T) %>% fmt_number(decimals = 3)
```

### ROC curves

```{r}
invisible(lapply(
  list(gctpl_roc, gctcap_roc, ogtt1_roc, rpg_roc, rcg_roc, a1c_roc),
  function(roc) {
    print(plot(roc, print.auc = T, print.thres = T))
  }
))
```

### Full cutoff tables

#### GCTpl

```{r}
gt(data.frame(coords(gctpl_roc, "all", ret = "all"))) %>%
  fmt_number(n_sigfig = 3)
```

#### GCTcap

```{r}
gt(data.frame(coords(gctcap_roc, "all", ret = "all"))) %>%
  fmt_number(n_sigfig = 3)
```

#### OGTT 1 hour

```{r}
gt(data.frame(coords(ogtt1_roc, "all", ret = "all"))) %>%
  fmt_number(n_sigfig = 3)
```

#### RPG

```{r}
gt(data.frame(coords(rpg_roc, "all", ret = "all"))) %>%
  fmt_number(n_sigfig = 3)
```

#### RCG

```{r}
gt(data.frame(coords(rcg_roc, "all", ret = "all"))) %>%
  fmt_number(n_sigfig = 3)
```

#### HbA1c

```{r}
gt(data.frame(coords(a1c_roc, "all", ret = "all"))) %>%
  fmt_number(n_sigfig = 3)
```

### Predefined cutoffs

```{r}
#| label: tbl-roc-cutoffs
#| tbl-cap: Sensitivity and specificity (95% bootstrap confidence intervals) to measure the performance of the glucose challenge test plasma glucose (GCTpl) to predict dysglycemia at different thresholds
#| message: false
gctpl_140 <- as.data.frame(ci.coords(gctpl_roc,
  x = 140,
  ret = c("sensitivity", "specificity")
))
gctpl_150 <- as.data.frame(ci.coords(gctpl_roc,
  x = 150,
  ret = c("sensitivity", "specificity")
))
gctpl_160 <- as.data.frame(ci.coords(gctpl_roc,
  x = 160,
  ret = c("sensitivity", "specificity")
))
gctpl_table <- do.call(rbind, list(gctpl_140, gctpl_150, gctpl_160))
rownames(gctpl_table) <- c(140, 150, 160)
gt(gctpl_table, rownames_to_stub = T) %>% fmt_number(decimals = 3)
```

```{r}
#| label: fig-dot-cutoffs
#| fig-cap:  Dot plot of oral glucose challenge test plasma glucose (GCTpl) (mg/dl) by diabetes status
#| warning: false
dot_p <- ggplot(
  df,
  aes(x = Diagnosis, y = `GCT 60 min plasma`)
) +
  geom_point() +
  geom_hline(yintercept = 140, linetype = "dashed") +
  geom_hline(yintercept = 150, linetype = "dashed") +
  geom_hline(yintercept = 160, linetype = "dashed") +
  theme_bw()
dot_p
```

## CFRD

CFRD was defined as a two hour OGTT $\geq$ 200 mg/dL.

### Youden indices

```{r}
#| label: tbl-roc-cfrd
#| tbl-cap: Accuracy of different screening tests to predict CFRD
#| message: false
gctpl_roc <- roc(CFRD ~ `GCT 60 min plasma`, data = df)
gctcap_roc <- roc(CFRD ~ `GCT 60 min capillary`, data = df)
ogtt1_roc <- roc(CFRD ~ `OGTT 60 min`, data = df)
rpg_roc <- roc(CFRD ~ `GCT 0 min plasma`, data = df)
rcg_roc <- roc(CFRD ~ `GCT 0 min capillary`, data = df)
a1c_roc <- roc(CFRD ~ HbA1c, data = df)
roc_table <-
  lapply(
    list(gctpl_roc, gctcap_roc, ogtt1_roc, rpg_roc, rcg_roc, a1c_roc),
    function(roc) {
      coords(roc, "best", ret = "all")
    }
  )
roc_table <- do.call(rbind, roc_table)
rownames(roc_table) <- c("GCTpl", "GCTcap", "OGTT 1 hr", "RPG", "RCG", "A1c")
gt(roc_table, rownames_to_stub = T) %>% fmt_number(decimals = 3)
```

### ROC curves

```{r}
invisible(lapply(
  list(gctpl_roc, gctcap_roc, ogtt1_roc, rpg_roc, rcg_roc, a1c_roc),
  function(roc) {
    print(plot(roc, print.auc = T, print.thres = T))
  }
))
```

### Full cutoff tables

#### GCTpl

```{r}
gt(data.frame(coords(gctpl_roc, "all", ret = "all"))) %>%
  fmt_number(n_sigfig = 3)
```

#### GCTcap

```{r}
gt(data.frame(coords(gctcap_roc, "all", ret = "all"))) %>%
  fmt_number(n_sigfig = 3)
```

#### OGTT 1 hour

```{r}
gt(data.frame(coords(ogtt1_roc, "all", ret = "all"))) %>%
  fmt_number(n_sigfig = 3)
```

#### RPG

```{r}
gt(data.frame(coords(rpg_roc, "all", ret = "all"))) %>%
  fmt_number(n_sigfig = 3)
```

#### RCG

```{r}
gt(data.frame(coords(rcg_roc, "all", ret = "all"))) %>%
  fmt_number(n_sigfig = 3)
```

#### HbA1c

```{r}
gt(data.frame(coords(a1c_roc, "all", ret = "all"))) %>%
  fmt_number(n_sigfig = 3)
```
