---
title: "CF Registry Analysis"
author: "Tim Vigers"
date: "today"
date-format: long
format:
  html:
    toc: true
    toc-depth: 5
    toc-float: true
    code-fold: true
    self-contained: true
    fig-cap-location: top
    page-layout: full
execute:
  echo: false
  warning: false
editor: source
---

```{r}
#| include: false
library(Hmisc)
library(tidyverse)
library(forestmodel)
library(childsds)
library(gt)
library(gtsummary)
library(forcats)
library(labelled)
```

```{r}
# Import data and codebook
annual <- read.csv("~/Documents/Work/Christine Chan/CF registry data/Data_Raw/CFF19_Annualized_Del1.csv",
  na.strings = c("", "N/A")
)
data_dict <- readxl::read_excel("~/Documents/Work/Christine Chan/CF registry data/Data_Raw/Copy of Codes for CFFPR_2018.xlsx")
data_dict$var <- paste(data_dict$field_name, data_dict$code_value, sep = "_")
# Remove those with T1D or T2D
annual <- annual %>% arrange(eDWID, ReviewYear)
annual <- annual[!annual$cfrd_status_annual %in% c(4, 5), ]
annual$cfrd_status_annual <- factor(annual$cfrd_status_annual,
  levels = 1:3,
  labels = c("CFRD-", "CFRD-", "CFRD+")
)
annual$age_2018 <- 2018 - (annual$ReviewYear - annual$Age_YrEnd)
annual <- annual %>%
  group_by(eDWID) %>%
  mutate(age_2018 = as.numeric(names(sort(table(age_2018),
    decreasing = TRUE
  )[1])))
# Get mutations
demogs <- read.csv("~/Documents/Work/Christine Chan/CF registry data/Data_Raw/CFF19_DemogCFDiag_Del1.csv")
demogs <- demogs %>% select(eDWID, Gender, MutClass)
annual <- left_join(annual, demogs, by = join_by(eDWID))
# Variable formatting
# If A_supplement_feeding is 0, then A_feeding2 is also 0 because they are not
# on any supplemental feeding
# Include all kinds of tube feeds
annual$A_feeding2[annual$A_supplement_feeding == 0] <- 0
annual$A_feeding3[annual$A_supplement_feeding == 0] <- 0
annual$A_feeding4[annual$A_supplement_feeding == 0] <- 0
tube_fields <- c("A_feeding2", "A_feeding3", "A_feeding4")
annual$tube_feeding <-
  apply(annual[, tube_fields], 1, function(r) {
    if (all(is.na(r))) {
      return(NA)
    } else {
      return(max(as.numeric(r), na.rm = T))
    }
  })
# Liver disease
liver_fields <- c("A_hepatobiliary1_3", paste0("A_hepatobiliary2_", 1:4))
annual$liver_disease <-
  apply(annual[, liver_fields], 1, function(r) {
    if (all(is.na(r))) {
      return(NA)
    } else {
      return(max(as.numeric(r), na.rm = T))
    }
  })
# Calculate percentiles
annual$bmi <- annual$A_weight / ((annual$A_height / 100)^2)
annual$age_perc <- ifelse(annual$Age_YrEnd < 20, annual$Age_YrEnd, 20)
annual$height_perc <- sds(annual$A_height,
  age = annual$age_perc,
  sex = annual$Gender, male = "M", female = "F",
  item = "height2_20", ref = cdc.ref, type = "perc"
) * 100
annual$bmi_perc <- sds(annual$bmi,
  age = annual$age_perc,
  sex = annual$Gender, male = "M", female = "F",
  item = "bmi", ref = cdc.ref, type = "perc"
) * 100
# Format columns
annual$MutClass <- factor(annual$MutClass,
  levels = c("1-3", "4-5", "Oth", "N/A"),
  labels = c("1-3", "4-5", "Oth", "Unknown")
)
annual$NumPulmExacerbation <- cut(annual$NumPulmExacerbation,
  labels = c("0", "1", "2", ">=3"),
  breaks = c(0, 1, 2, 3, Inf), right = F
)
annual$A_FEV1_pct_predicted <- cut(annual$A_FEV1_pct_predicted,
  breaks = c(0, 40, 80, 100, Inf), right = F
)
annual$A_FEV1_pct_predicted <- relevel(annual$A_FEV1_pct_predicted,
  ref = "[100,Inf)"
)
annual$height_perc <- cut(annual$height_perc, breaks = c(0, 10, 25, 50, Inf))
annual$height_perc <- relevel(annual$height_perc, ref = "(50,Inf]")
annual$bmi_perc <- cut(annual$bmi_perc, breaks = c(0, 10, 50, 85, Inf))
annual$bmi_perc <- relevel(annual$bmi_perc, ref = "(50,85]")
annual$age_group <- cut(annual$Age_YrEnd,
  breaks = c(-Inf, 10, 18, 30, Inf),
  right = F
)
annual$age_group <- relevel(annual$age_group, ref = "[10,18)")
# Bugs
bugs <- c(
  "A_pseudomonasaeruginosa", "A_fungalyeast1",
  "A_pulmonarycomplications1", "A_mycocultureresults3"
)
# Yes/No variables
yn_vars <- c(
  "A_IsOnEnzymes", "A_corticosteroids1", "A_feeding2",
  "A_Vx770", "A_VX809comb", bugs, "tube_feeding", "liver_disease"
)
annual[, yn_vars] <- lapply(annual[, yn_vars], factor,
  levels = 0:1,
  labels = c("No", "Yes")
)
annual$A_IsOnEnzymes <- relevel(annual$A_IsOnEnzymes, ref = "Yes")
```

# Data cleaning

Registry fields included in our liver disease yes/no variable were:

```{r}
data.frame(data_dict$code_meaning[data_dict$var %in%
  sub("A_", "", liver_fields)]) %>%
  gt() %>%
  tab_options(column_labels.hidden = TRUE)
```

Registry fields included in our tube feeding yes/no variable were:

```{r}
data.frame(data_dict$code_meaning[
  paste0(data_dict$field_name, data_dict$code_value) %in%
    sub("A_", "", tube_fields)
]) %>%
  gt() %>%
  tab_options(column_labels.hidden = TRUE)
```

# CFRD incidence and prevalence

## By year

```{r results='asis'}
# Find the year that each person was diagnosed, make wide
first_cfrd <- annual %>%
  filter(cfrd_status_annual == "CFRD+") %>%
  group_by(eDWID) %>%
  slice_head(n = 1) %>%
  select(eDWID, ReviewYear) %>%
  rename(first_cfrd = ReviewYear)
# Make a dataframe for who was at risk each year
at_risk <- expand.grid(eDWID = unique(annual$eDWID), ReviewYear = 2003:2018)
at_risk <- at_risk %>% arrange(eDWID)
at_risk <- at_risk %>%
  full_join(., annual %>%
    select(eDWID, ReviewYear, age_2018, A_hgba1c, cfrd_status_annual),
  by = join_by(eDWID, ReviewYear)
  )
# Combine
inc <- left_join(at_risk, first_cfrd, by = join_by(eDWID))
# Calculate all missing ages
inc <- inc %>%
  group_by(eDWID) %>%
  mutate(age = first(na.omit(age_2018)) - (2018 - ReviewYear)) %>%
  # No missing age in 2018 field, so this indicates whether they were at risk
  # (i.e. seen that year)
  mutate(age_2018 = !is.na(age_2018)) %>%
  rename(at_risk = age_2018) %>%
  ungroup()
# Age group
inc$age_group <- cut(inc$age, c(-Inf, 10, 19, 31, Inf), right = F)
# Remove people from at risk after diagnosis
inc$at_risk[!is.na(inc$first_cfrd) & inc$ReviewYear > inc$first_cfrd] <- FALSE
# Use gtsummary to make a list of tables by year
invisible(lapply(unique(inc$ReviewYear), function(y) {
  d <- inc %>%
    filter(ReviewYear == y, at_risk) %>%
    # Make missing values explicit for the tables
    mutate(
      a1c = factor(!is.na(A_hgba1c), levels = c(F, T), labels = c("No", "Yes")),
      cfrd_status_annual = fct_explicit_na(cfrd_status_annual),
    ) %>%
    select(age_group, cfrd_status_annual, a1c, A_hgba1c) %>%
    tbl_summary(
      by = age_group, missing_text = "(Missing)",
      label = list(
        cfrd_status_annual ~ "Annualized CFRD Status",
        A_hgba1c ~ "Annualized HbA1c", a1c ~ "A1c Collected"
      ),
      statistic = list(all_continuous() ~ "{mean} ({sd})")
    ) %>%
    add_overall()
  cat("\n")
  cat("### ", y)
  cat("\n")
  print(d)
  cat("\n")
}))
```

# Logistic analyses

Any participants with T1D or T2D were excluded from these analyses. Variables that were entirely missing in a given year (e.g., `A_Vx770` and `A_VX809comb` in 2005) were excluded from those models. Participants under age 10 at year end were also excluded due to missing PFT data.

```{r}
# Analysis function
log_reg <- function(year, missingness = T) {
  # Clean data
  df <- annual %>%
    filter(ReviewYear == year, Age_YrEnd >= 10) %>%
    select(
      eDWID, age_group, Gender, bmi_perc, MutClass, A_IsOnEnzymes,
      A_FEV1_pct_predicted, tube_feeding, NumPulmExacerbation,
      A_pseudomonasaeruginosa, A_fungalyeast1, A_mycocultureresults3,
      A_pulmonarycomplications1,
      A_corticosteroids1, cfrd_status_annual, A_Vx770, A_VX809comb,
      liver_disease
    )
  # Assume that missing are CFRD- for these models
  df$cfrd_status_annual[is.na(df$cfrd_status_annual)] <- "CFRD-"
  # Relevel age group since we're excluding kids < 10
  df$age_group <- droplevels(df$age_group)
  # Remove all empty columns
  empty <- which(colSums(is.na(df)) == nrow(df))
  if (length(empty) > 0) {
    df <- df[, -empty]
  }
  # Models
  vars <- colnames(df)[which(!colnames(df) %in%
    c(bugs, liver_fields, "cfrd_status_annual", "eDWID"))]
  base_mod <- as.formula(paste0(
    "cfrd_status_annual~",
    paste0(vars, collapse = "+")
  ))
  # Labels
  labels <- list(
    cfrd_status_annual = "CFRD Status", MutClass = "Mutation class",
    Gender = "Sex", A_IsOnEnzymes = "Pancreatic enzyme use",
    A_FEV1_pct_predicted = "FEV1 percent predicted",
    tube_feeding = "Enteric feedings", liver_disease = "Liver disease",
    A_corticosteroids1 = "Use of corticosteroids",
    NumPulmExacerbation = "Admissions for PEx", age_group = "Age group",
    height_perc = "Height percentile", bmi_perc = "BMI percentile",
    A_Vx770 = "Use of CFTR modulator Vx770",
    A_VX809comb = "Use of CFTR modulator Vx809 combination",
    A_pseudomonasaeruginosa = "Pseudomonas aeruginosa",
    A_fungalyeast1 = "Aspergillus (any species)",
    A_pulmonarycomplications1 = "ABPA",
    A_mycocultureresults3 = "Microorganisms in myco culture"
  )
  var_label(df[, vars[which(vars %in% colnames(df))]]) <-
    as.character(labels[vars[which(vars %in% colnames(df))]])
  var_label(df[, bugs[which(bugs %in% colnames(df))]]) <-
    as.character(labels[bugs[which(bugs %in% colnames(df))]])
  # Visualize missingness if required
  if (missingness) {
    cat("\n")
    cat("### Missingness")
    cat("\n")
    cat("\n")
    print(naniar::vis_miss(df))
    cat("\n")
  }
  # Simple models
  mod1 <- glm(base_mod, data = df, family = "binomial")
  # Print results
  cat("\n")
  cat("### Base Model")
  cat("\n")
  cat("\n")
  print(forest_model(mod1, exclude_infinite_cis = F))
  cat("\n")
  if ("A_pseudomonasaeruginosa" %in% colnames(df)) {
    mod2 <- glm(update(base_mod, . ~ . + A_pseudomonasaeruginosa),
      data = df,
      family = "binomial"
    )
    cat("\n")
    cat("### P. aeruginosa")
    cat("\n")
    cat("\n")
    print(forest_model(mod2, exclude_infinite_cis = F))
    cat("\n")
  }
  if ("A_fungalyeast1" %in% colnames(df)) {
    mod3 <- glm(update(base_mod, . ~ . + A_fungalyeast1),
      data = df,
      family = "binomial"
    )
    cat("\n")
    cat("### Aspergillus")
    cat("\n")
    cat("\n")
    print(forest_model(mod3, exclude_infinite_cis = F))
    cat("\n")
  }
  if ("A_pulmonarycomplications1" %in% colnames(df)) {
    mod4 <- glm(update(base_mod, . ~ . + A_pulmonarycomplications1),
      data = df,
      family = "binomial"
    )
    cat("\n")
    cat("### ABPA")
    cat("\n")
    cat("\n")
    print(forest_model(mod4, exclude_infinite_cis = F))
    cat("\n")
  }
  if ("A_mycocultureresults3" %in% colnames(df)) {
    mod5 <- glm(update(base_mod, . ~ . + A_mycocultureresults3),
      data = df,
      family = "binomial"
    )
    cat("\n")
    cat("### Mycobacterium")
    cat("\n")
    cat("\n")
    print(forest_model(mod5, exclude_infinite_cis = F))
    cat("\n")
  }
}
```

## By year

```{r results='asis',fig.height=10,fig.width=10}
invisible(lapply(unique(annual$ReviewYear), function(y) {
  cat("\n")
  cat("### ", y)
  cat("\n")
  log_reg(y)
  cat("\n")
}))
```
