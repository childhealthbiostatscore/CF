---
title: "CF Registry Analysis"
author: "Tim Vigers"
date: "`r format(Sys.time(), '%d %B %Y')`"
format:
  html:
    toc: true
    toc-depth: 5
    toc-float: true
    code-fold: true
    self-contained: true
    page-layout: full
editor: visual
---

```{r}
#| include: false
library(knitr)
library(tidyverse)
library(table1)
library(pROC)
```

```{r}
# All data
encounter <- read.csv("Z:/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Christine Chan/CF registry data/CFF19_encountersMerged_Del1.csv",
  na.strings = c("", "N/A")
)
annual <- read.csv("Z:/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Christine Chan/CF registry data/CFF19_Annualized_Del1.csv",
  na.strings = c("", "N/A")
)
encounter <- encounter %>%
  arrange(eDWID, reviewyear, encounternum)
# Add age
ages <- annual %>%
  group_by(eDWID) %>%
  summarise(`Age in 2018` = names(sort(table(`Age in 2018`), 
                                       decreasing = TRUE)[1]))
encounter = left_join(encounter,ages,by = "eDWID")
# For those with CFRD by OGTT, find first visit with diagnosis
first_cfrd <- encounter %>%
  filter(twohour_bloodglucose >= 200) %>%
  group_by(eDWID) %>%
  slice_min(reviewyear) %>%
  select(eDWID, reviewyear, `Age in 2018`) %>%
  rename(first_cfrd = reviewyear)
encounter <- left_join(encounter, first_cfrd, by = c("eDWID", "Age in 2018"))
encounter <- encounter %>%
  group_by(eDWID) %>%
  mutate(cfrd_ogtt = case_when(
    reviewyear < first_cfrd ~ "No",
    reviewyear >= first_cfrd ~ "Yes"
  )) %>%
  ungroup()
encounter$cfrd_ogtt[is.na(df$cfrd_ogtt)] <- "No"
```

```{r}
#| label: tbl-incidence
#| tbl-cap: "Year-on-Year Incidence of CFRD"
# Person-years variable
py <- 1000
# For each year, get the number of people diagnosed with CFRD that year
years <- 2003:2018
cases <- lapply(years, function(y) {
  total <- unique(first_cfrd$eDWID[first_cfrd$first_cfrd == y])
  cases_age_10 <- total[total %in% ages$eDWID[ages$`Age in 2018` < 10]]
  cases_age_10_18 <- total[total %in% ages$eDWID[ages$`Age in 2018` >= 10 &
    ages$`Age in 2018` < 19]]
  cases_age_19_30 <- total[total %in% ages$eDWID[ages$`Age in 2018` >= 19 &
    ages$`Age in 2018` < 31]]
  cases_age_30 <- total[total %in% ages$eDWID[ages$`Age in 2018` >= 31]]
  return(list(
    "total" = total, "cases_age_10" = cases_age_10,
    "cases_age_10_18" = cases_age_10_18,
    "cases_age_19_30" = cases_age_19_30,
    "cases_age_30" = cases_age_30
  ))
})
# Double check that there is no overlap between sets (there isn't!)
# lapply(1:length(cases), function(y){intersect(cases[[y]],unlist(cases[-y]))})
# For each year, get the number of people at risk
at_risk <- lapply(years, function(y) {
  ar <- unique(encounter$eDWID[encounter$reviewyear == y])
  ar <- ar[!ar %in% unlist(cases[which(years <= y)]$total)]
  ar_age_10 <- intersect(
    encounter$eDWID[encounter$reviewyear == y],
    ages$eDWID[ages$`Age in 2018` < 10]
  )
  ar_age_10_18 <- intersect(
    encounter$eDWID[encounter$reviewyear == y],
    ages$eDWID[ages$`Age in 2018` >= 10 & ages$`Age in 2018` < 19]
  )
  ar_age_19_30 <- intersect(
    encounter$eDWID[encounter$reviewyear == y],
    ages$eDWID[ages$`Age in 2018` >= 19 & ages$`Age in 2018` < 31]
  )
  ar_age_30 <- intersect(
    encounter$eDWID[encounter$reviewyear == y],
    ages$eDWID[ages$`Age in 2018` >= 31]
  )
  return(list(
    "total" = ar, "ar_age_10" = ar_age_10, "ar_age_10_18" = ar_age_10_18,
    "ar_age_19_30" = ar_age_19_30, "ar_age_30" = ar_age_30
  ))
})
# Put everything in one table
inc_df <- lapply(years, function(y) {
  # Total
  new_cases <- length(cases[[which(years == y)]]$total)
  total_at_risk <- length(at_risk[[which(years == y)]]$total)
  total_inc <- new_cases / (total_at_risk / py)
  # < 10
  new_cases_10 <- length(cases[[which(years == y)]]$cases_age_10)
  at_risk_10 <- length(at_risk[[which(years == y)]]$ar_age_10)
  inc_10 <- new_cases_10 / (at_risk_10 / py)
  # 10 - 18
  new_cases_10_18 <- length(cases[[which(years == y)]]$cases_age_10_18)
  at_risk_10_18 <- length(at_risk[[which(years == y)]]$ar_age_10_18)
  inc_10_18 <- new_cases_10_18 / (at_risk_10_18 / py)
  # 19 - 30
  new_cases_19_30 <- length(cases[[which(years == y)]]$cases_age_19_30)
  at_risk_19_30 <- length(at_risk[[which(years == y)]]$ar_age_19_30)
  inc_19_30 <- new_cases_19_30 / (at_risk_19_30 / py)
  # > 30
  new_cases_30 <- length(cases[[which(years == y)]]$cases_age_30)
  at_risk_30 <- length(at_risk[[which(years == y)]]$ar_age_30)
  inc_30 <- new_cases_30 / (at_risk_30 / py)
  return(list(
    `Year` = y,
    `Total New Cases` = new_cases,
    `Total At Risk` = total_at_risk,
    `Total Incidence` = total_inc,
    `Total New Cases Age < 10` = new_cases_10,
    `Total At Risk Age < 10` = at_risk_10,
    `Total Incidence Age < 10` = inc_10,
    `Total New Cases Age 10-18` = new_cases_10_18,
    `Total At Risk Age 10-18` = at_risk_10_18,
    `Total Incidence Age 10-18` = inc_10_18,
    `Total New Cases Age 19-30` = new_cases_19_30,
    `Total At Risk Age 19-30` = at_risk_19_30,
    `Total Incidence Age 19-30` = inc_19_30,
    `Total New Cases Age > 30` = new_cases_30,
    `Total At Risk Age > 30` = at_risk_30,
    `Total Incidence Age > 30` = inc_30
  ))
})
inc_df <- as.data.frame(do.call(rbind, inc_df))
inc_df <- data.frame(lapply(inc_df, as.numeric), check.names = F)
kable(inc_df, digits = 3)
```

In @tbl-incidence, incidence per year is calculated as the number of new CFRD diagnoses per 1,000 person-years of those at risk (excluding previously identified cases).

```{r}
#| label: tbl-prevalence
#| tbl-cap: "Yearly Prevalence of CFRD"
df %>% group_by(ReviewYear) %>% 
  summarise(Prevalance = mean(cfrd_status_annual==3,na.rm = T))

t = df %>% select(eDWID,ReviewYear,A_twohour_bloodglucose,cfrd_ogtt,cfrd_status_annual)
```

In @tbl-prevalence, prevalence is calculated as the total number of CFRD cases seen in clinic divided by the total number of people seen in clinic in a given year.

```{r}
# Prepare data for ROC
df$cfrd_ogtt <- factor(df$cfrd_ogtt, levels = c("No", "Yes"), ordered = T)
cfrd <- df %>%
  group_by(eDWID) %>%
  mutate(
    cfrd_ever = max(cfrd_ogtt),
    time_from_diag = ReviewYear - first_cfrd
  ) %>%
  filter(cfrd_ever == "Yes", time_from_diag <= 0, time_from_diag >= -1) %>%
  summarise(hba1c = last(na.omit(round(A_hgba1c, 1)))) %>%
  drop_na()
non_cfrd <- df %>%
  group_by(eDWID) %>%
  mutate(cfrd_ever = max(cfrd_ogtt)) %>%
  filter(cfrd_ever == "No") %>%
  summarise(hba1c = last(na.omit(round(A_hgba1c, 1)))) %>%
  drop_na()
```

```{r}
#| label: fig-roc
#| fig-cap: "ROC Curve"
r <- roc(
  cases = cfrd$hba1c, controls = non_cfrd$hba1c, quiet = T, plot = T, auc = T, ci = T,
  print.auc = TRUE, show.thres = TRUE
)
```

Because we do not have exact information regarding HbA1c timing (we only have encounter number within year), the annualized HbA1c from the year of diagnosis or from one year prior to diagnosis was used in the ROC analysis. For those with HbA1c measures the year of diagnosis and one year prior, the value from year of diagnosis was preferred. For those never diagnosed with CFRD, the most recent HbA1c was used. There were a total of `r nrow(cfrd)` HbA1c measures for people with CFRD and `r nrow(non_cfrd)` measures for those without.

The AUC for this ROC curve was 0.61 (see @fig-roc).

```{r}
#| label: tbl-roc_thresh
#| tbl-cap: "Best ROC Threshold (Youden Index)"
kable(coords(r, "best"), digits = 3)
```

# Questions

1.  For these calculations, do we need to just use those with an OGTT? Or everybody in the database?
