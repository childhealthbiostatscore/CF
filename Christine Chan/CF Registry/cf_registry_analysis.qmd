---
title: "CF Registry Analysis"
author: "Tim Vigers"
date: "today"
date-format: long
format:
  html:
    toc: true
    toc-depth: 5
    toc-float: true
    code-fold: true
    self-contained: true
    fig-cap-location: top
    page-layout: full
execute:
  echo: false
  warning: false
editor: source
---

```{r}
#| include: false
library(Hmisc)
library(tidyverse)
library(forestmodel)
library(childsds)
library(gt)
library(gtsummary)
library(forcats)
library(labelled)
library(parallel)
switch(Sys.info()[["sysname"]],
  Windows = {
    home_dir <- "C:/Users/timvigers/Dropbox/Work/Christine Chan/CF registry data"
  },
  Darwin = {
    home_dir <- "/Users/timvigers/Dropbox/Work/Christine Chan/CF registry data"
  }
)
knitr::opts_knit$set(root.dir = home_dir)
```

# CFRD incidence and prevalence

```{r}
# All data
encounter <- read.csv("./Data_Raw/CFF19_encountersMerged_Del1.csv",
                      na.strings = c("", "N/A")
)
annual <- read.csv("./Data_Raw/CFF19_Annualized_Del1.csv",
                   na.strings = c("", "N/A")
)
encounter <- encounter %>%
  arrange(eDWID, reviewyear, encounternum)
annual = annual %>% arrange(eDWID,ReviewYear)
# Add age
ages <- annual %>% 
  mutate(`Age in 2018` = 2018-(ReviewYear-Age_YrEnd)) %>%
  rename(reviewyear = ReviewYear) %>%
  group_by(eDWID,reviewyear) %>%
  summarise(`Age in 2018` = as.numeric(names(sort(table(`Age in 2018`), 
                                                  decreasing = TRUE)[1])),
            Age = Age_YrEnd[1],.groups = "drop")
encounter = left_join(encounter,ages,by = c("eDWID", "reviewyear"))
encounter$`Age Group 2018` = cut(encounter$`Age in 2018`,
                            c(-Inf,10,19,31,Inf),
                            labels = c("< 10", "10 - 18", "19 - 30", "> 30"),
                            right=F)
encounter$`Age Group` = cut(encounter$Age,
                            c(-Inf,10,19,31,Inf),
                            labels = c("< 10", "10 - 18", "19 - 30", "> 30"),
                            right=F)
# For those with CFRD by OGTT, find first visit with diagnosis
first_cfrd_ogtt <- encounter %>% 
  filter(twohour_bloodglucose >= 200) %>%
  group_by(eDWID) %>%
  filter(row_number()==1) %>%
  select(eDWID, reviewyear, `Age in 2018`) %>%
  rename(first_cfrd_ogtt = reviewyear)
# For those with CFRD by registry criteria, find first visit with diagnosis
first_cfrd_cffpr <- encounter %>% 
  filter(cfrd_status==3) %>%
  group_by(eDWID) %>%
  filter(row_number()==1) %>%
  select(eDWID, reviewyear, `Age in 2018`) %>%
  rename(first_cfrd_cffpr = reviewyear)
# Both
first_cfrd_both <- encounter %>% 
  filter(cfrd_status==3|twohour_bloodglucose >= 200) %>%
  group_by(eDWID) %>%
  filter(row_number()==1) %>%
  select(eDWID, reviewyear, `Age in 2018`) %>%
  rename(first_cfrd_both = reviewyear)
# Add to encounter level data
encounter <- left_join(encounter, first_cfrd_ogtt, by = c("eDWID", "Age in 2018"))
encounter <- left_join(encounter, first_cfrd_cffpr, by = c("eDWID", "Age in 2018"))
encounter <- left_join(encounter, first_cfrd_both,by = c("eDWID", "Age in 2018"))
# Fill down CFRD Yes/No by year
encounter <- encounter %>%
  group_by(eDWID) %>%
  mutate(
    cfrd_ogtt = case_when(
      reviewyear < first_cfrd_ogtt ~ "No",
      reviewyear >= first_cfrd_ogtt ~ "Yes"
    ),
    cfrd_cffpr = case_when(
      reviewyear < first_cfrd_cffpr ~ "No",
      reviewyear >= first_cfrd_cffpr ~ "Yes"
    ),
    cfrd_both = case_when(
      reviewyear < first_cfrd_both ~ "No",
      reviewyear >= first_cfrd_both ~ "Yes"
    )
  ) %>%
  ungroup()
encounter$cfrd_ogtt[is.na(encounter$cfrd_ogtt)] <- "No"
encounter$cfrd_cffpr[is.na(encounter$cfrd_cffpr)] <- "No"
encounter$cfrd_both[is.na(encounter$cfrd_both)] <- "No"
# Ordered factors
encounter$cfrd_ogtt = factor(encounter$cfrd_ogtt,levels = c("No","Yes"),ordered = T)
encounter$cfrd_cffpr = factor(encounter$cfrd_cffpr,levels = c("No","Yes"),ordered = T)
encounter$cfrd_both = factor(encounter$cfrd_both,levels = c("No","Yes"),ordered = T)
# Remove those missing age
encounter = encounter %>% filter(!is.na(Age))
```

```{r}
# For each year, pull everyone with and without CFRD that year
year_inc = function(df=encounter,year,py = 1000){
  # Filter and count
  inc = df %>%  
    filter(reviewyear==year,is.na(first_cfrd_cffpr) | first_cfrd_cffpr >= year) %>%
    group_by(eDWID) %>% filter(row_number() == 1) %>% 
    select(eDWID,`Age Group`,cfrd_cffpr)
  inc = inc %>% group_by(cfrd_cffpr) %>% count(`Age Group`,.drop = F)
  inc = inc[!is.na(inc$`Age Group`),]
  # Calculations
  new_cases = sum(inc$n[inc$cfrd_cffpr=="Yes"])
  total_at_risk = sum(inc$n)
  total_inc = new_cases/(total_at_risk/py)
  
  new_cases_10 = sum(inc$n[inc$cfrd_cffpr=="Yes" & inc$`Age Group` == "< 10"])
  at_risk_10 = sum(inc$n[inc$`Age Group` == "< 10"])
  inc_10 = new_cases_10/(at_risk_10/py)
  
  new_cases_10_18 = sum(inc$n[inc$cfrd_cffpr=="Yes" & inc$`Age Group` == "10 - 18"])
  at_risk_10_18 = sum(inc$n[inc$`Age Group` == "10 - 18"])
  inc_10_18 = new_cases_10_18/(at_risk_10_18/py)
  
  new_cases_19_30 = sum(inc$n[inc$cfrd_cffpr=="Yes" & inc$`Age Group` == "19 - 30"])
  at_risk_19_30 = sum(inc$n[inc$`Age Group` == "19 - 30"])
  inc_19_30 = new_cases_19_30/(at_risk_19_30/py)
  
  new_cases_30 = sum(inc$n[inc$cfrd_cffpr=="Yes" & inc$`Age Group` == "> 30"])
  at_risk_30 = sum(inc$n[inc$`Age Group` == "> 30"])
  inc_30 = new_cases_30/(at_risk_30/py)
  
  # Nice results
  list(`Year` = year,
       `Total New Cases` = new_cases,
       `Total At Risk` = total_at_risk,
       `Total Incidence` = total_inc,
       
       `Total New Cases Age < 10` = new_cases_10,
       `Total At Risk Age < 10` = at_risk_10,
       `Total Incidence Age < 10` = inc_10,
       
       `Total New Cases Age 10-18` = new_cases_10_18,
       `Total At Risk Age 10-18` = at_risk_10_18,
       `Total Incidence Age 10-18` = inc_10_18,
       
       `Total New Cases Age 19-30` = new_cases_19_30,
       `Total At Risk Age 19-30` = at_risk_19_30,
       `Total Incidence Age 19-30` = inc_19_30,
       
       `Total New Cases Age > 30` = new_cases_30,
       `Total At Risk Age > 30` = at_risk_30,
       `Total Incidence Age > 30` = inc_30)
}
incidence = lapply(2003:2018, function(y){year_inc(year = y)})
incidence = data.frame(do.call(rbind,incidence),check.names = F)
incidence = data.frame(lapply(incidence,as.numeric),check.names = F)
kable(incidence,digits = 3)
```

# Data cleaning

```{r}
# Import data and codebook
annual <- read.csv("./Data_Raw/CFF19_Annualized_Del1.csv",
  na.strings = c("", "N/A")
)
data_dict <- readxl::read_excel("./Data_Raw/Copy of Codes for CFFPR_2018.xlsx")
data_dict$var <- paste(data_dict$field_name, data_dict$code_value, sep = "_")
# Remove those with T1D or T2D
annual <- annual %>% arrange(eDWID, ReviewYear)
annual <- annual[!annual$cfrd_status_annual %in% c(4, 5), ]
annual$cfrd_status_annual <- factor(annual$cfrd_status_annual,
  levels = 1:3,
  labels = c("CFRD-", "CFRD-", "CFRD+")
)
annual$age_2018 <- 2018 - (annual$ReviewYear - annual$Age_YrEnd)
annual <- annual %>%
  group_by(eDWID) %>%
  mutate(age_2018 = as.numeric(names(sort(table(age_2018),
    decreasing = TRUE
  )[1])))
# Get mutations
demogs <- read.csv("./Data_Raw/CFF19_DemogCFDiag_Del1.csv")
demogs <- demogs %>% select(eDWID, Gender, MutClass)
annual <- left_join(annual, demogs, by = join_by(eDWID))
# Variable formatting
# If A_supplement_feeding is 0, then A_feeding2 is also 0 because they are not
# on any supplemental feeding
# Include all kinds of tube feeds
annual$A_feeding2[annual$A_supplement_feeding == 0] <- 0
annual$A_feeding3[annual$A_supplement_feeding == 0] <- 0
annual$A_feeding4[annual$A_supplement_feeding == 0] <- 0
tube_fields <- c("A_feeding2", "A_feeding3", "A_feeding4")
annual$tube_feeding <-
  apply(annual[, tube_fields], 1, function(r) {
    if (all(is.na(r))) {
      return(NA)
    } else {
      return(max(as.numeric(r), na.rm = T))
    }
  })
# Liver disease
liver_fields <- c("A_hepatobiliary1_3", paste0("A_hepatobiliary2_", 1:4))
annual$liver_disease <-
  apply(annual[, liver_fields], 1, function(r) {
    if (all(is.na(r))) {
      return(NA)
    } else {
      return(max(as.numeric(r), na.rm = T))
    }
  })
# Calculate percentiles
annual$bmi <- annual$A_weight / ((annual$A_height / 100)^2)
annual$age_perc <- ifelse(annual$Age_YrEnd < 20, annual$Age_YrEnd, 20)
annual$height_perc <- sds(annual$A_height,
  age = annual$age_perc,
  sex = annual$Gender, male = "M", female = "F",
  item = "height2_20", ref = cdc.ref, type = "perc"
) * 100
annual$bmi_perc <- sds(annual$bmi,
  age = annual$age_perc,
  sex = annual$Gender, male = "M", female = "F",
  item = "bmi", ref = cdc.ref, type = "perc"
) * 100
# Format columns
annual$MutClass <- factor(annual$MutClass,
  levels = c("1-3", "4-5", "Oth", "N/A"),
  labels = c("1-3", "4-5", "Oth", "Unknown")
)
annual$NumPulmExacerbation <- cut(annual$NumPulmExacerbation,
  labels = c("0", "1", "2", ">=3"),
  breaks = c(0, 1, 2, 3, Inf), right = F
)
annual$A_FEV1_pct_predicted <- cut(annual$A_FEV1_pct_predicted,
  breaks = c(0, 40, 80, 100, Inf), right = F
)
annual$A_FEV1_pct_predicted <- relevel(annual$A_FEV1_pct_predicted,
  ref = "[100,Inf)"
)
annual$height_perc <- cut(annual$height_perc, breaks = c(0, 10, 25, 50, Inf))
annual$height_perc <- relevel(annual$height_perc, ref = "(50,Inf]")
annual$bmi_perc <- cut(annual$bmi_perc, breaks = c(0, 10, 50, 85, Inf))
annual$bmi_perc <- relevel(annual$bmi_perc, ref = "(50,85]")
annual$age_group <- cut(annual$Age_YrEnd,
  breaks = c(-Inf, 10, 18, 30, Inf),
  right = F
)
annual$age_group <- relevel(annual$age_group, ref = "[10,18)")
# Bugs
bugs <- c(
  "A_pseudomonasaeruginosa", "A_fungalyeast1",
  "A_pulmonarycomplications1", "A_mycocultureresults3"
)
# Yes/No variables
yn_vars <- c(
  "A_IsOnEnzymes", "A_corticosteroids1", "A_feeding2",
  "A_Vx770", "A_VX809comb", bugs, "tube_feeding", "liver_disease"
)
annual[, yn_vars] <- lapply(annual[, yn_vars], factor,
  levels = 0:1,
  labels = c("No", "Yes")
)
annual$A_IsOnEnzymes <- relevel(annual$A_IsOnEnzymes, ref = "Yes")
```

Registry fields included in our liver disease yes/no variable were:

```{r}
data.frame(data_dict$code_meaning[data_dict$var %in%
  sub("A_", "", liver_fields)]) %>%
  gt() %>%
  tab_options(column_labels.hidden = TRUE)
```

Registry fields included in our tube feeding yes/no variable were:

```{r}
data.frame(data_dict$code_meaning[
  paste0(data_dict$field_name, data_dict$code_value) %in%
    sub("A_", "", tube_fields)
]) %>%
  gt() %>%
  tab_options(column_labels.hidden = TRUE)
```

# Logistic analyses

Any participants with T1D or T2D were excluded from these analyses. Variables that were entirely missing in a given year (e.g., `A_Vx770` and `A_VX809comb` in 2005) were excluded from those models. Participants under age 10 at year end were also excluded due to missing PFT data.

```{r}
# Analysis function
log_reg <- function(year, missingness = F) {
  # Clean data
  df <- annual %>%
    filter(ReviewYear == year, Age_YrEnd >= 10) %>%
    select(
      eDWID, age_group, Gender, bmi_perc, MutClass, A_IsOnEnzymes,
      A_FEV1_pct_predicted, tube_feeding, NumPulmExacerbation,
      A_pseudomonasaeruginosa, A_fungalyeast1, A_mycocultureresults3,
      A_pulmonarycomplications1,
      A_corticosteroids1, cfrd_status_annual, A_Vx770, A_VX809comb,
      liver_disease
    )
  # Assume that missing are CFRD- for these models
  df$cfrd_status_annual[is.na(df$cfrd_status_annual)] <- "CFRD-"
  # Relevel age group since we're excluding kids < 10
  df$age_group <- droplevels(df$age_group)
  # Remove all empty columns
  empty <- which(colSums(is.na(df)) == nrow(df))
  if (length(empty) > 0) {
    df <- df[, -empty]
  }
  # Models
  vars <- colnames(df)[which(!colnames(df) %in%
    c(bugs, liver_fields, "cfrd_status_annual", "eDWID"))]
  base_mod <- as.formula(paste0(
    "cfrd_status_annual~",
    paste0(vars, collapse = "+")
  ))
  # Labels
  labels <- list(
    cfrd_status_annual = "CFRD Status", MutClass = "Mutation class",
    Gender = "Sex", A_IsOnEnzymes = "Pancreatic enzyme use",
    A_FEV1_pct_predicted = "FEV1 percent predicted",
    tube_feeding = "Enteric feedings", liver_disease = "Liver disease",
    A_corticosteroids1 = "Use of corticosteroids",
    NumPulmExacerbation = "Admissions for PEx", age_group = "Age group",
    height_perc = "Height percentile", bmi_perc = "BMI percentile",
    A_Vx770 = "Use of CFTR modulator Vx770",
    A_VX809comb = "Use of CFTR modulator Vx809 combination",
    A_pseudomonasaeruginosa = "Pseudomonas aeruginosa",
    A_fungalyeast1 = "Aspergillus (any species)",
    A_pulmonarycomplications1 = "ABPA",
    A_mycocultureresults3 = "Microorganisms in myco culture"
  )
  var_label(df[, vars[which(vars %in% colnames(df))]]) <-
    as.character(labels[vars[which(vars %in% colnames(df))]])
  var_label(df[, bugs[which(bugs %in% colnames(df))]]) <-
    as.character(labels[bugs[which(bugs %in% colnames(df))]])
  # Visualize missingness if required
  if (missingness) {
    cat("\n")
    cat("### Missingness")
    cat("\n")
    cat("\n")
    print(naniar::vis_miss(df))
    cat("\n")
  }
  # Simple models
  mod1 <- glm(base_mod, data = df, family = "binomial")
  # Print results
  cat("\n")
  cat("### Base Model")
  cat("\n")
  cat("\n")
  print(forest_model(mod1, exclude_infinite_cis = F))
  cat("\n")
  if ("A_pseudomonasaeruginosa" %in% colnames(df)) {
    mod2 <- glm(update(base_mod, . ~ . + A_pseudomonasaeruginosa),
      data = df,
      family = "binomial"
    )
    cat("\n")
    cat("### P. aeruginosa")
    cat("\n")
    cat("\n")
    print(forest_model(mod2, exclude_infinite_cis = F))
    cat("\n")
  }
  if ("A_fungalyeast1" %in% colnames(df)) {
    mod3 <- glm(update(base_mod, . ~ . + A_fungalyeast1),
      data = df,
      family = "binomial"
    )
    cat("\n")
    cat("### Aspergillus")
    cat("\n")
    cat("\n")
    print(forest_model(mod3, exclude_infinite_cis = F))
    cat("\n")
  }
  if ("A_pulmonarycomplications1" %in% colnames(df)) {
    mod4 <- glm(update(base_mod, . ~ . + A_pulmonarycomplications1),
      data = df,
      family = "binomial"
    )
    cat("\n")
    cat("### ABPA")
    cat("\n")
    cat("\n")
    print(forest_model(mod4, exclude_infinite_cis = F))
    cat("\n")
  }
  if ("A_mycocultureresults3" %in% colnames(df)) {
    mod5 <- glm(update(base_mod, . ~ . + A_mycocultureresults3),
      data = df,
      family = "binomial"
    )
    cat("\n")
    cat("### Mycobacterium")
    cat("\n")
    cat("\n")
    print(forest_model(mod5, exclude_infinite_cis = F))
    cat("\n")
  }
}
```

```{r results='asis',fig.height=10,fig.width=10}
invisible(lapply(unique(annual$ReviewYear), function(y) {
  cat("\n")
  cat("## ", y)
  cat("\n")
  log_reg(y)
  cat("\n")
}))
```
