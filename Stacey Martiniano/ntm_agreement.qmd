---
title: "NTM CT Scoring Agreement"
author: "Tim Vigers"
date: "today"
date-format: long
format:
  html:
    toc: true
    toc-depth: 5
    toc-float: true
    code-fold: true
    self-contained: true
    fig-cap-location: top
    page-layout: full
    theme:
      light: flatly
      dark: darkly
bibliography: /Users/timvigers/Documents/Miscellaneous/zotero.bib
csl: /Users/timvigers/Documents/Miscellaneous/american-medical-association.csl
editor: source
---

```{r data cleaning}
#| message: false
library(tidyverse)
library(redcapAPI)
library(Hmisc)
library(knitr)
library(fastDummies)
library(lmerTest)
library(performance)
# Import data
api <- read.table("/Users/timvigers/Documents/Work/Vigers/CF/Stacey Martiniano/NTM CT Scoring/api.txt", header = F)
rcon <- redcapConnection(
  url = "https://redcap.ucdenver.edu/api/",
  token = api[1, 1]
)
data <- exportRecordsTyped(rcon, labels = F)
data <- data.frame(lapply(data, as.character))
data$scan_id <- as.numeric(data$scan_id)
# Make scorer IDs by initial
data$scorer <- paste0(
  toupper(substr(data$reader_first_name, 1, 1)),
  toupper(substr(data$reader_last_name, 1, 1))
)
data$scorer[data$scorer == "GG"] <- "GS"
# Deidentify readers
old <- c("AF", "DL", "JW")
new <- c("A", "B", "C")
data$scorer[data$scorer %in% old] <- new[match(data$scorer, old, nomatch = 0)]
# Revert duplicate IDs back to original to match with gold standard
training <- read.csv("/Users/timvigers/Documents/Work/Vigers/CF/Stacey Martiniano/NTM CT Scoring/Data_Clean/training.key.csv")
dups <- read.csv("/Users/timvigers/Documents/Work/Vigers/CF/Stacey Martiniano/NTM CT Scoring/Data_Clean/duplicated.key.csv")
training$Training_id <- as.numeric(sub("T00", "", training$Training_id))
# Change duplicates to OG IDs
old <- dups$duplicated_ssid..dates.shifted..17.days.
new <- dups$original_ssid
data$scan_id[data$scan_id %in% old] <- new[na.omit(match(data$scan_id, old))]
# Change training IDs to OG IDs
old <- training$Training_id
new <- training$Cffid.Scoring.Set
data$scan_id[data$scan_id %in% old] <- new[na.omit(match(data$scan_id, old))]
# Convert to long
data <- data %>%
  select(
    scan_id, scorer, scoresheet_timestamp,
    bronchiectasis_rul:atelectasis___6
  ) %>%
  arrange(scan_id, scorer, scoresheet_timestamp) %>%
  group_by(scan_id, scorer) %>%
  mutate(scorer_repeat = row_number()) %>%
  select(-scoresheet_timestamp) %>%
  pivot_longer(bronchiectasis_rul:atelectasis___6,
    names_to = c("Feature", "Location"),
    names_pattern = "(.*)_(.*)$"
  ) %>%
  mutate(
    Feature = gsub("__", "", Feature),
    Feature = str_to_title(gsub("_", " ", Feature))
  )
data$Location <- factor(data$Location,
  levels = c(
    "1", "2", "3", "4", "5", "6", "ling", "lll",
    "lul", "rll", "rml", "rul"
  ),
  labels = c(
    "RUL", "RML", "RLL", "LUL", "Ling", "LLL",
    "Ling", "LLL", "LUL", "RLL", "RML", "RUL"
  )
)
# Format values
data$value <- factor(data$value,
  levels = c(
    "Absent", "Checked", "Cylindric", "Cystic", "Unchecked", "Varicose"
  ),
  labels = c("Absent", "Present", "Present", "Present", "Absent", "Present"),
  ordered = T
)
# Separate out gold standards and duplicates
data_dups <- data %>% filter(scan_id %in% dups$original_ssid)
data_gs <- data %>% filter(scan_id %in% training$Cffid.Scoring.Set)
data <- data %>%
  filter(!scan_id %in% c(dups$original_ssid, training$Cffid.Scoring.Set))
# Second readings only for comparison to GS
data_gs <- data_gs %>%
  group_by(scan_id, scorer, Feature, Location) %>%
  slice_max(scorer_repeat)
```

# Proportion of agreement

## Singletons

### By Feature

```{r}
#| message: false
data %>%
  group_by(Feature, scan_id, scorer) %>%
  summarise(v = max(value, na.rm = T)) %>%
  summarise(a = sum(v == "Present")) %>%
  summarise(
    `Agreed Feature Was Present` = sum(a == 3),
    `Agreed Feature Was Absent` = sum(a == 0),
    agreed = sum(a == 0 | a == 3),
    disagreed = sum(a == 1 | a == 2),
    proportion = round(agreed / (agreed + disagreed), 3)
  ) %>%
  rename(`Total Agreed` = agreed,`Total Disagreed`=disagreed,
         `Proportion Agreed`=proportion) %>%
  kable()
```

### Feature by lobe

```{r}
#| message: false
data %>%
  group_by(Feature, Location, scan_id) %>%
  summarise(a = factor(sum(value == "Present", na.rm = T))) %>%
  summarise(
    `Agreed Feature Was Present` = sum(a == 3),
    `Agreed Feature Was Absent` = sum(a == 0),
    agreed = sum(a == 0 | a == 3),
    disagreed = sum(a == 1 | a == 2),
    proportion = round(agreed / (agreed + disagreed), 3)
  ) %>%
  rename(`Total Agreed` = agreed,`Total Disagreed`=disagreed,
         `Proportion Agreed`=proportion) %>%
  kable()
```

## Duplicates

### By Feature

```{r}
#| message: false
data_dups %>%
  group_by(Feature, scorer, scan_id, scorer_repeat) %>%
  summarise(v = max(value, na.rm = T)) %>%
  summarise(
    `Agreed Feature Was Present` = sum(v[scorer_repeat == 1] == v[scorer_repeat == 2] & 
                                         v[scorer_repeat == 1] == "Present"),
    `Agreed Feature Was Absent` = sum(v[scorer_repeat == 1] == v[scorer_repeat == 2] & 
                                        v[scorer_repeat == 1] == "Absent"),
    agreed = sum(v[scorer_repeat == 1] == v[scorer_repeat == 2]),
    disagreed = sum(v[scorer_repeat == 1] != v[scorer_repeat == 2]),
    proportion = round(agreed / (agreed + disagreed), 3)
  ) %>% 
  summarise(across(`Agreed Feature Was Present`:disagreed,~sum(.x,na.rm = T)),
            proportion=mean(proportion)) %>%
  rename(`Total Agreed` = agreed,`Total Disagreed`=disagreed,
         `Proportion Agreed`=proportion) %>%
  kable()
```

### Feature by lobe

```{r}
#| message: false
#| warning: false
data_dups %>%
  group_by(Feature, Location, scorer, scan_id, scorer_repeat) %>%
  summarise(v = max(value, na.rm = T)) %>%
  summarise(
    `Agreed Feature Was Present` = sum(v[scorer_repeat == 1] == v[scorer_repeat == 2] & 
                                         v[scorer_repeat == 1] == "Present"),
    `Agreed Feature Was Absent` = sum(v[scorer_repeat == 1] == v[scorer_repeat == 2] & 
                                        v[scorer_repeat == 1] == "Absent"),
    agreed = sum(v[scorer_repeat == 1] == v[scorer_repeat == 2]),
    disagreed = sum(v[scorer_repeat == 1] != v[scorer_repeat == 2]),
    proportion = round(agreed / (agreed + disagreed), 3)
  ) %>% 
  summarise(across(`Agreed Feature Was Present`:disagreed,~sum(.x,na.rm = T)),
            proportion = mean(proportion)) %>%
  rename(`Total Agreed` = agreed,`Total Disagreed`=disagreed,
         `Proportion Agreed`=proportion) %>%
  kable()
```


## Agreement with gold standard

### By Feature

```{r}
#| message: false
data_gs %>%
  group_by(Feature, scan_id, scorer) %>%
  summarise(v = max(value, na.rm = T)) %>%
  summarise(
    ap = v[scorer == "A"] == v[scorer == "GS"] & v[scorer == "A"]=="Present",
    aa = v[scorer == "A"] == v[scorer == "GS"] & v[scorer == "A"]=="Absent",
    pa = v[scorer == "A"] == v[scorer == "GS"],
    bp = v[scorer == "B"] == v[scorer == "GS"] & v[scorer == "B"]=="Present",
    ba = v[scorer == "B"] == v[scorer == "GS"] & v[scorer == "B"]=="Absent",
    pb = v[scorer == "B"] == v[scorer == "GS"],
    cp = v[scorer == "C"] == v[scorer == "GS"] & v[scorer == "C"]=="Present",
    ca= v[scorer == "C"] == v[scorer == "GS"] & v[scorer == "C"]=="Absent",
     pc= v[scorer == "C"] == v[scorer == "GS"]
  ) %>% 
  summarise(
    `A Agreed Feature Was Present` = sum(ap,na.rm=T),
    `A Agreed Feature Was Absent`=sum(aa,na.rm=T),
    `Prop. A Agreed`=mean(pa,na.rm=T),
    `B Agreed Feature Was Present`=sum(bp,na.rm=T),
    `B Agreed Feature Was Absent`=sum(ba,na.rm=T),
    `Prop. B Agreed`=mean(pb,na.rm=T),
    `C Agreed Feature Was Present`=sum(cp,na.rm=T),
    `C Agreed Feature Was Absent`=sum(ca,na.rm=T),
    `Prop. C Agreed`=mean(pc,na.rm=T)
  ) %>%
  kable()
```

### Feature by lobe

Missing values were ignored in creating the table below. So if a scorer marked a feature and location blank on one scan and agreed with the gold standard on 3, their score will be 0.75 rather than 0.6.

```{r}
#| message: false
data_gs %>%
  group_by(Feature, Location, scan_id) %>%
  rename(v=value) %>%
  summarise(
    ap = v[scorer == "A"] == v[scorer == "GS"] & v[scorer == "A"]=="Present",
    aa = v[scorer == "A"] == v[scorer == "GS"] & v[scorer == "A"]=="Absent",
    pa = v[scorer == "A"] == v[scorer == "GS"],
    bp = v[scorer == "B"] == v[scorer == "GS"] & v[scorer == "B"]=="Present",
    ba = v[scorer == "B"] == v[scorer == "GS"] & v[scorer == "B"]=="Absent",
    pb = v[scorer == "B"] == v[scorer == "GS"],
    cp = v[scorer == "C"] == v[scorer == "GS"] & v[scorer == "C"]=="Present",
    ca= v[scorer == "C"] == v[scorer == "GS"] & v[scorer == "C"]=="Absent",
     pc= v[scorer == "C"] == v[scorer == "GS"]
  ) %>% 
  summarise(
    `A Agreed Feature Was Present` = sum(ap,na.rm = T),
    `A Agreed Feature Was Absent`=sum(aa,na.rm = T),
    `Prop. A Agreed`=mean(pa,na.rm = T),
    `B Agreed Feature Was Present`=sum(bp,na.rm = T),
    `B Agreed Feature Was Absent`=sum(ba,na.rm = T),
    `Prop. B Agreed`=mean(pb,na.rm = T),
    `C Agreed Feature Was Present`=sum(cp,na.rm = T),
    `C Agreed Feature Was Absent`=sum(ca,na.rm = T),
    `Prop. C Agreed`=mean(pc,na.rm=T)
  ) %>%
  kable()
```

# Mixed Model Approach

```{r data cleaning 2}
# Import data
api <- read.table("/Users/timvigers/Documents/Work/Vigers/CF/Stacey Martiniano/NTM CT Scoring/api.txt", header = F)
rcon <- redcapConnection(
  url = "https://redcap.ucdenver.edu/api/",
  token = api[1, 1]
)
data <- exportRecordsTyped(rcon, labels = F)
data <- data.frame(lapply(data, as.character))
data$scan_id <- as.numeric(data$scan_id)
# Make scorer IDs by initial
data$scorer <- paste0(
  toupper(substr(data$reader_first_name, 1, 1)),
  toupper(substr(data$reader_last_name, 1, 1))
)
data$scorer[data$scorer == "GG"] <- "GS"
# Deidentify readers
old <- c("AF", "DL", "JW")
new <- c("A", "B", "C")
data$scorer[data$scorer %in% old] <- new[match(data$scorer, old, nomatch = 0)]
# Revert duplicate IDs back to original to match with gold standard
training <- read.csv("/Users/timvigers/Documents/Work/Vigers/CF/Stacey Martiniano/NTM CT Scoring/Data_Clean/training.key.csv")
dups <- read.csv("/Users/timvigers/Documents/Work/Vigers/CF/Stacey Martiniano/NTM CT Scoring/Data_Clean/duplicated.key.csv")
training$Training_id <- as.numeric(sub("T00", "", training$Training_id))
# Change duplicates to OG IDs
old <- dups$duplicated_ssid..dates.shifted..17.days.
new <- dups$original_ssid
data$scan_id[data$scan_id %in% old] <- new[na.omit(match(data$scan_id, old))]
# Change training IDs to OG IDs
old <- training$Training_id
new <- training$Cffid.Scoring.Set
data$scan_id[data$scan_id %in% old] <- new[na.omit(match(data$scan_id, old))]
# Convert to long
data <- data %>%
  select(
    scan_id, scorer, scoresheet_timestamp,
    bronchiectasis_rul:atelectasis___6
  ) %>%
  arrange(scan_id, scorer, scoresheet_timestamp) %>%
  group_by(scan_id, scorer) %>%
  mutate(scorer_repeat = row_number()) %>%
  select(-scoresheet_timestamp) %>%
  pivot_longer(bronchiectasis_rul:atelectasis___6,
    names_to = c("feature", "location"),
    names_pattern = "(.*)_(.*)$"
  ) %>%
  mutate(
    feature = gsub("__", "", feature),
    feature = str_to_title(gsub("_", " ", feature))
  )
data$location <- factor(data$location,
  levels = c(
    "1", "2", "3", "4", "5", "6", "ling", "lll",
    "lul", "rll", "rml", "rul"
  ),
  labels = c(
    "RUL", "RML", "RLL", "LUL", "Ling", "LLL",
    "Ling", "LLL", "LUL", "RLL", "RML", "RUL"
  )
)
# Format values
data$value <- factor(data$value,
  levels = c(
    "Absent", "Checked", "Cylindric", "Cystic", "Unchecked", "Varicose"
  ),
  labels = c("Absent", "Present", "Present", "Present", "Absent", "Present")
)
data$value <- as.numeric(data$value) - 1
# Separate out gold standards and duplicates
data_dups <- data %>% filter(scan_id %in% dups$original_ssid)
data_gs <- data %>% filter(scan_id %in% training$Cffid.Scoring.Set)
data <- data %>%
  filter(!scan_id %in% c(dups$original_ssid, training$Cffid.Scoring.Set))
# Second readings only for comparison to GS
data_gs <- data_gs %>%
  group_by(scan_id, scorer, feature, location) %>%
  slice_max(scorer_repeat)
# Dummy variables for scorer, organize columns
data <- data %>%
  dummy_cols(select_columns = "scorer") %>%
  select(scan_id, feature, location,scorer, scorer_A, scorer_B, scorer_C, value)
```

## Data setup

```{r}
DT::datatable(data)
```

## Model

- Readers $r=1,2,3$
- Scans $s=1,2,...,S$
- Features $f=1,2,...,F$
- Lobes $l=1,2,...,6$
- Outcome $y_{rsfl}$ is binary
- Model notation: $$y_{rsf=1}=\alpha+\beta X_l + b_1+b_2+b_3+\epsilon_{rs}$$

### Bronchiectasis

```{r}
#| code-fold: show
df <- data %>% filter(feature == "Bronchiectasis")
model <- glmer(value ~ location + (1 | scorer),
  family = "binomial", data = df
)
summary(model)
icc(model)
```

### Mucoid Impaction

```{r}
#| code-fold: show
df <- data %>% filter(feature == "Mucoid Impaction")
model <- glmer(value ~ location + (1 | scorer),
  family = "binomial", data = df
)
summary(model)
icc(model)
```

### Cyst

```{r}
#| code-fold: show
df <- data %>% filter(feature == "Cyst")
model <- glmer(value ~ location + (1 | scorer),
  family = "binomial", data = df
)
summary(model)
icc(model)
```

### Cavity

```{r}
#| code-fold: show
df <- data %>% filter(feature == "Cavity")
model <- glmer(value ~ location + (1 | scorer),
  family = "binomial", data = df
)
summary(model)
icc(model)
```

### Consolidation

```{r}
#| code-fold: show
df <- data %>% filter(feature == "Consolidation")
model <- glmer(value ~ location + (1 | scorer),
  family = "binomial", data = df
)
summary(model)
icc(model)
```

### Ground Glass

```{r}
#| code-fold: show
df <- data %>% filter(feature == "Ground Glass")
model <- glmer(value ~ location + (1 | scorer),
  family = "binomial", data = df
)
summary(model)
icc(model)
```

### Nodule

```{r}
#| code-fold: show
df <- data %>% filter(feature == "Nodule")
model <- glmer(value ~ location + (1 | scorer),
  family = "binomial", data = df
)
summary(model)
icc(model)
```

### Tree In Bud

```{r}
#| code-fold: show
df <- data %>% filter(feature == "Tree In Bud")
model <- glmer(value ~ location + (1 | scorer),
  family = "binomial", data = df
)
summary(model)
icc(model)
```

### Atelectasis

```{r}
#| code-fold: show
df <- data %>% filter(feature == "Atelectasis")
model <- glmer(value ~ location + (1 | scorer),
  family = "binomial", data = df
)
summary(model)
icc(model)
```
