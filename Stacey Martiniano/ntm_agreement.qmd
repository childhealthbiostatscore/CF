---
title: "NTM CT Scoring - Initial Agreement"
author: "Tim Vigers"
date: "today"
date-format: long
format:
  html:
    toc: true
    toc-depth: 5
    toc-float: true
    code-fold: true
    self-contained: true
    fig-cap-location: top
    page-layout: full
editor: source
---

```{r}
#| include: false
library(tidyverse)
library(irr)
library(redcapAPI)
library(Hmisc)
library(DT)
library(RColorBrewer)
# Import data
api <- read.table("~/Documents/Work/Vigers/CF/Stacey Martiniano/NTM CT Scoring/api.txt",
                  header = F
)
rcon <- redcapConnection(
  url = "https://redcap.ucdenver.edu/api/",
  token = api[1, 1]
)
data <- exportRecords(rcon, labels = F)
data <- data.frame(lapply(data, as.character))
data$scan_id = as.numeric(data$scan_id)
# Make scorer IDs by initial
data$scorer <- paste0(
  toupper(substr(data$reader_first_name, 1, 1)),
  toupper(substr(data$reader_last_name, 1, 1))
)
data$scorer[data$scorer=="GG"]="GS"
# Revert duplicate IDs back to original to match with gold standard
training = read.csv("~/Documents/Work/Vigers/CF/Stacey Martiniano/NTM CT Scoring/Data_Clean/training.key.csv")
dups = read.csv("~/Documents/Work/Vigers/CF/Stacey Martiniano/NTM CT Scoring/Data_Clean/duplicated.key.csv")
training$Training_id = as.numeric(sub("T00","",training$Training_id))
# Change duplicates to OG IDs
old <- dups$duplicated_ssid..dates.shifted..17.days.
new <- dups$original_ssid
data$scan_id[data$scan_id %in% old] <- new[match(data$scan_id, old, nomatch = 0)]
# Change training IDs to OG IDs
old <- training$Training_id
new = training$Cffid.Scoring.Set
data$scan_id[data$scan_id %in% old] <- new[match(data$scan_id, old, nomatch = 0)]
```

| Cohen's Kappa | Interpretation         |
|---------------|------------------------|
| 0             | No agreement           |
| 0.10 - 0.20   | Slight agreement       |
| 0.21 - 0.40   | Fair agreement         |
| 0.41 - 0.60   | Moderate agreement     |
| 0.61 - 0.80   | Substantial agreement  |
| 0.81 - 0.99   | Near perfect agreement |
| 1             | Perfect agreement      |

# Comparison to gold standards

```{r}
# Gold standard data
gs = data %>% 
  arrange(scan_id, scorer) %>%
  filter(scan_id %in% training$Cffid.Scoring.Set) %>%
  group_by(scorer,scan_id) %>%
  slice_max(scoresheet_timestamp) %>%
  select(scorer, scan_id, bronchiectasis_rul:atelectasis___6) %>%
  ungroup()
# Plot colors
name <- "Accent"
colors <- brewer.pal(6, name)
names(colors) <- c("Checked","Unchecked","Absent","Cylindric","Varicose",NA)
custom_colors <- scale_fill_manual(name = "", values = colors)
# Function
compare = function(df,scan_num){
  id = training$Cffid.Scoring.Set[training$Training_id == scan_num]
  df = df %>% filter(scan_id == id)
  df = df %>% pivot_longer(bronchiectasis_rul:atelectasis___6,
                           names_to = c("feature", "location"),
                           names_pattern = "(.*)_(.*)$"
  ) %>% 
    mutate(
      feature = gsub("__", "", feature),
      feature = str_to_title(gsub("_", " ", feature))
    ) 
  df$location <- factor(df$location,
                        levels = c("1", "2", "3", "4", "5", "6", "ling", "lll", 
                                   "lul", "rll", "rml", "rul"),
                        labels = c("RUL", "RML", "RLL", "LUL", "Ling", "LLL", 
                                   "Ling", "LLL", "LUL", "RLL", "RML", "RUL")
  )
  df$value <- factor(df$value, levels = c("Checked", "Unchecked", "Absent", "Cylindric", "Varicose"))
  # One column per scorer
  df <- df %>% 
    pivot_wider(names_from = scorer, values_from = value) %>%
    arrange(feature,location)
  # Kappa for the whole scan
  fk = kappam.fleiss(df[,c("AF","DL","GS","JW")])
  af = kappa2(df[,c("AF","GS")])
  dl = kappa2(df[,c("DL","GS")])
  jw = kappa2(df[,c("JW","GS")])
  cat("\n")
  cat("### Overall")
  cat("\n")
  p = df %>%
    select(feature, location, AF:JW) %>%
    pivot_longer(AF:JW) %>%
    ggplot(., aes(x = name, y = location, fill = value)) +
    geom_tile(color = "black") +
    theme_bw() +
    labs(fill = "", x = "Scorer", y = "Location") +
    custom_colors +
    facet_wrap(~feature)
  cat("\n")
  print(p)
  cat("\n")
  cat("\n")
  cat("Overall Fleiss' Kappa for this scan was ",round(fk$value,3)," (p = ",
      format.pval(fk$p.value,eps = 0.001,digits = 3),")",sep = "")
  cat("\n")
  cat("\n")
  cat("Cohen's Kappa for AF vs. the gold standard"," was ",round(af$value,3)," (p = ",
      format.pval(af$p.value,eps = 0.001,digits = 3),")",sep = "")
  cat("\n")
  cat("\n")
  cat("Cohen's Kappa for DL vs. the gold standard"," was ",round(dl$value,3)," (p = ",
      format.pval(dl$p.value,eps = 0.001,digits = 3),")",sep = "")
  cat("\n")
  cat("\n")
  cat("Cohen's Kappa for JW vs. the gold standard"," was ",round(jw$value,3)," (p = ",
      format.pval(jw$p.value,eps = 0.001,digits = 3),")",sep = "")
  cat("\n")
  # Analyze by feature
  cat("\n")
  cat("### By Feature and Scorer")
  cat("\n")
  invisible(lapply(levels(factor(df$feature)), function(f){
    t = data.frame(df[df$feature == f,c("AF","DL","GS","JW")])
    rownames(t) = as.character(df$location[df$feature == f])
    fk = kappam.fleiss(t)
    af = kappa2(t[,c("AF","GS")])
    dl = kappa2(t[,c("DL","GS")])
    jw = kappa2(t[,c("JW","GS")])
    p = df %>%
      filter(feature == f) %>%
      select(location, AF:JW) %>%
      pivot_longer(AF:JW) %>%
      ggplot(., aes(x = name, y = location, fill = value)) +
      geom_tile(color = "black") +
      theme_bw() +
      labs(fill = "", x = "Scorer", y = "Location") +
      custom_colors
    cat("\n")
    cat("\n")
    cat("####",f)
    cat("\n")
    cat("\n")
    print(p)
    cat("\n")
    cat("\n")
    cat("Fleiss' Kappa for ",f," was ",round(fk$value,3)," (p = ",
        format.pval(fk$p.value,eps = 0.001,digits = 3),")",sep = "")
    cat("\n")
    cat("\n")
    if(is.nan(af$value)){
      cat("\n")
      cat("Agreement between AF and the gold standard in",f,"was perfect.")
      cat("\n")
    } else {
      cat("\n")
      cat("Cohen's Kappa for AF vs. the gold standard in ",f," was ",round(af$value,3)," (p = ",
          format.pval(af$p.value,eps = 0.001,digits = 3),")",sep = "")
      cat("\n")
    }
    if(is.nan(dl$value)){
      cat("\n")
      cat("Agreement between DL and the gold standard in",f,"was perfect.")
      cat("\n")
    } else {
      cat("\n")
      cat("Cohen's Kappa for DL vs. the gold standard in ",f," was ",round(dl$value,3)," (p = ",
          format.pval(dl$p.value,eps = 0.001,digits = 3),")",sep = "")
      cat("\n")
    }
    if(is.nan(jw$value)){
      cat("\n")
      cat("Agreement between JW and the gold standard in",f,"was perfect.")
      cat("\n")
    } else {
      cat("\n")
      cat("Cohen's Kappa for JW vs. the gold standard in ",f," was ",round(jw$value,3)," (p = ",
          format.pval(jw$p.value,eps = 0.001,digits = 3),")",sep = "")
      cat("\n")
    }
  }))
}
```

## Scan 1

```{r results='asis',warning=FALSE}
compare(df = gs,scan_num = 1)
```

## Scan 2

```{r results='asis',warning=FALSE}
compare(df = gs,scan_num = 2)
```

## Scan 3

```{r results='asis',warning=FALSE}
compare(df = gs,scan_num = 3)
```

## Scan 4

```{r results='asis',warning=FALSE}
compare(df = gs,scan_num = 4)
```

## Scan 5

```{r results='asis',warning=FALSE}
compare(df = gs,scan_num = 5)
```

```{r}
# Save dataset
write.csv(gs,"~/Documents/Work/Vigers/CF/Stacey Martiniano/NTM CT Scoring/Data_Clean/gold_standard_comp.csv",row.names = F,na="")
```

# Duplicates

```{r}
# Gold standard data
dup_df = data %>% 
  arrange(scan_id, scorer) %>%
  filter(scan_id %in% dups$original_ssid) %>%
  select(scorer, scan_id, bronchiectasis_rul:atelectasis___6) %>%
  ungroup()
# Function
compare = function(df,scan_num){
  df = df %>% filter(scan_id == scan_num) %>%
    group_by(scorer,scan_id) %>%
    mutate(n = row_number()) %>% ungroup() %>%
    pivot_longer(bronchiectasis_rul:atelectasis___6,
                           names_to = c("feature", "location"),
                           names_pattern = "(.*)_(.*)$"
  ) %>% 
    mutate(
      feature = gsub("__", "", feature),
      feature = str_to_title(gsub("_", " ", feature))
    ) 
  df$location <- factor(df$location,
                        levels = c("1", "2", "3", "4", "5", "6", "ling", "lll", 
                                   "lul", "rll", "rml", "rul"),
                        labels = c("RUL", "RML", "RLL", "LUL", "Ling", "LLL", 
                                   "Ling", "LLL", "LUL", "RLL", "RML", "RUL")
  )
  df$value <- factor(df$value, levels = c("Checked", "Unchecked", "Absent", "Cylindric", "Varicose"))
  # One column per scorer
  df <- df %>% 
    pivot_wider(names_from = scorer, values_from = value) %>%
    pivot_wider(names_from = n, values_from = AF:JW) %>%
    arrange(feature,location)
  # Kappa for the whole scan
  af = kappa2(df[,c("AF_1","AF_2")])
  dl = kappa2(df[,c("DL_1","DL_2")])
  jw = kappa2(df[,c("JW_1","JW_2")])
  cat("\n")
  cat("### Overall")
  cat("\n")
  p = df %>%
    select(feature, location, AF_1:JW_2) %>%
    pivot_longer(AF_1:JW_2) %>%
    ggplot(., aes(x = name, y = location, fill = value)) +
    geom_tile(color = "black") +
    theme_bw() +
    labs(fill = "", x = "Scorer", y = "Location") +
    custom_colors +
    facet_wrap(~feature)
  cat("\n")
  print(p)
  cat("\n")
  cat("\n")
  cat("Cohen's Kappa for AF"," was ",round(af$value,3)," (p = ",
      format.pval(af$p.value,eps = 0.001,digits = 3),")",sep = "")
  cat("\n")
  cat("\n")
  cat("Cohen's Kappa for DL"," was ",round(dl$value,3)," (p = ",
      format.pval(dl$p.value,eps = 0.001,digits = 3),")",sep = "")
  cat("\n")
  cat("\n")
  cat("Cohen's Kappa for JW"," was ",round(jw$value,3)," (p = ",
      format.pval(jw$p.value,eps = 0.001,digits = 3),")",sep = "")
  cat("\n")
  # Analyze by feature
  cat("\n")
  cat("### By Feature and Scorer")
  cat("\n")
  invisible(lapply(levels(factor(df$feature)), function(f){
    t = data.frame(df[df$feature == f,c("AF_1","AF_2","DL_1","DL_2","JW_1","JW_2")])
    rownames(t) = as.character(df$location[df$feature == f])
    af = kappa2(t[,c("AF_1","AF_2")])
    dl = kappa2(t[,c("DL_1","DL_2")])
    jw = kappa2(t[,c("JW_1","JW_2")])
    p = df %>%
      filter(feature == f) %>%
      select(location, AF_1:JW_2) %>%
      pivot_longer(AF_1:JW_2) %>%
      ggplot(., aes(x = name, y = location, fill = value)) +
      geom_tile(color = "black") +
      theme_bw() +
      labs(fill = "", x = "Scorer", y = "Location") +
      custom_colors
    cat("\n")
    cat("\n")
    cat("####",f)
    cat("\n")
    cat("\n")
    print(p)
    cat("\n")
    cat("\n")
    if(is.nan(af$value)){
      cat("\n")
      cat("Agreement within AF",f,"was perfect.")
      cat("\n")
    } else {
      cat("\n")
      cat("Cohen's Kappa for AF",f," was ",round(af$value,3)," (p = ",
          format.pval(af$p.value,eps = 0.001,digits = 3),")",sep = "")
      cat("\n")
    }
    if(is.nan(dl$value)){
      cat("\n")
      cat("Agreement within DL",f,"was perfect.")
      cat("\n")
    } else {
      cat("\n")
      cat("Cohen's Kappa for DL",f," was ",round(dl$value,3)," (p = ",
          format.pval(dl$p.value,eps = 0.001,digits = 3),")",sep = "")
      cat("\n")
    }
    if(is.nan(jw$value)){
      cat("\n")
      cat("Agreement within JW in",f,"was perfect.")
      cat("\n")
    } else {
      cat("\n")
      cat("Cohen's Kappa for JW",f," was ",round(jw$value,3)," (p = ",
          format.pval(jw$p.value,eps = 0.001,digits = 3),")",sep = "")
      cat("\n")
    }
  }))
}
```

## Scan 1

```{r results='asis',warning=FALSE}
compare(df = dup_df,scan_num = 1062761)
```

## Scan 2

```{r results='asis',warning=FALSE}
compare(df = dup_df,scan_num = 1151991)
```

## Scan 3

```{r results='asis',warning=FALSE}
compare(df = dup_df,scan_num = 1340551)
```

## Scan 4

```{r results='asis',warning=FALSE}
compare(df = dup_df,scan_num = 1419420)
```

## Scan 5

```{r results='asis',warning=FALSE}
compare(df = dup_df,scan_num = 1468121)
```

