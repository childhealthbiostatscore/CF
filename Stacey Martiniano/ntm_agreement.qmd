---
title: "NTM CT Scoring - Initial Agreement"
author: "Tim Vigers"
date: "today"
date-format: long
format:
  html:
    toc: true
    toc-depth: 5
    toc-float: true
    code-fold: true
    self-contained: true
    fig-cap-location: top
    page-layout: full
editor: source
---

```{r}
#| include: false
library(tidyverse)
library(irr)
library(redcapAPI)
library(Hmisc)
library(DT)
library(RColorBrewer)
# Import data
api <- read.table("/Volumes/PEDS/RI Biostatistics Core/Shared/Shared Projects/Vigers/CF/Stacey Martiniano/NTM CT Scoring/api.txt",
  header = F
)
rcon <- redcapConnection(
  url = "https://redcap.ucdenver.edu/api/",
  token = api[1, 1]
)
data <- exportRecords(rcon, labels = F)
data <- data.frame(lapply(data, as.character))
# Make scorer IDs by initial
data$scorer <- paste0(
  toupper(substr(data$reader_first_name, 1, 1)),
  toupper(substr(data$reader_last_name, 1, 1))
)
# Select relevant columns, convert to long data
data <- data %>%
  arrange(scan_id, scorer) %>%
  filter(scan_id > 2) %>%
  select(scorer, scan_id, bronchiectasis_rul:atelectasis___6)
data <- data %>%
  pivot_longer(bronchiectasis_rul:atelectasis___6,
    names_to = c("feature", "location"),
    names_pattern = "(.*)_(.*)$"
  ) %>%
  mutate(
    feature = gsub("__", "", feature),
    feature = str_to_title(gsub("_", " ", feature))
  )
data$location <- factor(data$location,
  levels = c("1", "2", "3", "4", "5", "6", "ling", "lll", "lul", "rll", "rml", "rul"),
  labels = c("RUL", "RML", "RLL", "LUL", "Ling", "LLL", "Ling", "LLL", "LUL", "RLL", "RML", "RUL")
)
data$value <- factor(data$value, levels = c("Checked", "Unchecked", "Absent", "Cylindric", "Varicose"))
vals <- levels(data$value)
# One column per scorer
data <- data %>% pivot_wider(names_from = scorer, values_from = value)
# Find disagreements
data$disagree <- !(data$AF == data$DL & data$DL == data$JW)
# Set colors for whole document
n <- length(vals)
name <- "Accent"
colors <- brewer.pal(n, name)
names(colors) <- vals
custom_colors <- scale_fill_manual(name = "", values = colors)
```

# All disagreements

The table below is sortable and searchable, and includes only the features and locations where there was some disagreement.

```{r}
# Table
data %>%
  filter(disagree == T) %>%
  select(-disagree) %>%
  datatable(., rownames = F)
```

# Plots

## All scans

```{r}
data %>%
  pivot_longer(AF:JW) %>%
  ggplot(., aes(x = name, y = location, fill = value)) +
  geom_tile(color = "black") +
  theme_bw() +
  labs(fill = "", x = "Scorer", y = "Location") +
  custom_colors +
  facet_grid(rows = vars(scan_id), cols = vars(feature))
```

## Scan 3

```{r}
scan <- 3
data %>%
  filter(scan_id == scan) %>%
  select(feature, location, AF:JW) %>%
  pivot_longer(AF:JW) %>%
  ggplot(., aes(x = name, y = location, fill = value)) +
  geom_tile(color = "black") +
  theme_bw() +
  labs(fill = "", x = "Scorer", y = "Location") +
  custom_colors +
  facet_wrap(~feature)
```

## Scan 4

```{r}
scan <- 4
data %>%
  filter(scan_id == scan) %>%
  select(feature, location, AF:JW) %>%
  pivot_longer(AF:JW) %>%
  ggplot(., aes(x = name, y = location, fill = value)) +
  geom_tile(color = "black") +
  theme_bw() +
  labs(fill = "", x = "Scorer", y = "Location") +
  custom_colors +
  facet_wrap(~feature)
```

## Scan 5

```{r}
scan <- 5
data %>%
  filter(scan_id == scan) %>%
  select(feature, location, AF:JW) %>%
  pivot_longer(AF:JW) %>%
  ggplot(., aes(x = name, y = location, fill = value)) +
  geom_tile(color = "black") +
  theme_bw() +
  labs(fill = "", x = "Scorer", y = "Location") +
  custom_colors +
  facet_wrap(~feature)
```

# Agreement by Feature

## Atelectasis

```{r}
feat <- "Atelectasis"
# Statistic
k <- data %>%
  filter(feature == feat) %>%
  select(AF:JW) %>%
  kappam.fleiss(.)
ka <- round(k$value, 3)
p <- format.pval(k$p.value, eps = 0.001, digits = 3)
# Plot
data %>%
  filter(feature == feat) %>%
  select(scan_id, location, AF:JW) %>%
  pivot_longer(AF:JW) %>%
  ggplot(., aes(x = name, y = location, fill = value)) +
  geom_tile(color = "black") +
  theme_bw() +
  labs(fill = "", x = "Scorer", y = "Location") +
  custom_colors +
  facet_wrap(~scan_id)
```

Fleiss' Kappa for multiple raters was `r ka` (p: `r p`) across all scans.

## Bronchiectasis

```{r}
feat <- "Bronchiectasis"
# Statistic
k <- data %>%
  filter(feature == feat) %>%
  select(AF:JW) %>%
  kappam.fleiss(.)
ka <- round(k$value, 3)
p <- format.pval(k$p.value, eps = 0.001, digits = 3)
# Plot
data %>%
  filter(feature == feat) %>%
  select(scan_id, location, AF:JW) %>%
  pivot_longer(AF:JW) %>%
  ggplot(., aes(x = name, y = location, fill = value)) +
  geom_tile(color = "black") +
  theme_bw() +
  labs(fill = "", x = "Scorer", y = "Location") +
  custom_colors +
  facet_wrap(~scan_id)
```

Fleiss' Kappa for multiple raters was `r ka` (p: `r p`) across all scans.

## Cavity

```{r}
feat <- "Cavity"
# Statistic
k <- data %>%
  filter(feature == feat) %>%
  select(AF:JW) %>%
  kappam.fleiss(.)
ka <- round(k$value, 3)
p <- format.pval(k$p.value, eps = 0.001, digits = 3)
# Plot
data %>%
  filter(feature == feat) %>%
  select(scan_id, location, AF:JW) %>%
  pivot_longer(AF:JW) %>%
  ggplot(., aes(x = name, y = location, fill = value)) +
  geom_tile(color = "black") +
  theme_bw() +
  labs(fill = "", x = "Scorer", y = "Location") +
  custom_colors +
  facet_wrap(~scan_id)
```

Fleiss' Kappa for multiple raters was `r ka` (p: `r p`) across all scans.

## Consolidation

```{r}
feat <- "Consolidation"
# Statistic
k <- data %>%
  filter(feature == feat) %>%
  select(AF:JW) %>%
  kappam.fleiss(.)
ka <- round(k$value, 3)
p <- format.pval(k$p.value, eps = 0.001, digits = 3)
# Plot
data %>%
  filter(feature == feat) %>%
  select(scan_id, location, AF:JW) %>%
  pivot_longer(AF:JW) %>%
  ggplot(., aes(x = name, y = location, fill = value)) +
  geom_tile(color = "black") +
  theme_bw() +
  labs(fill = "", x = "Scorer", y = "Location") +
  custom_colors +
  facet_wrap(~scan_id)
```

Fleiss' Kappa for multiple raters was `r ka` (p: `r p`) across all scans.

## Cyst

```{r}
feat <- "Cyst"
# Statistic
k <- data %>%
  filter(feature == feat) %>%
  select(AF:JW) %>%
  kappam.fleiss(.)
ka <- round(k$value, 3)
p <- format.pval(k$p.value, eps = 0.001, digits = 3)
# Plot
data %>%
  filter(feature == feat) %>%
  select(scan_id, location, AF:JW) %>%
  pivot_longer(AF:JW) %>%
  ggplot(., aes(x = name, y = location, fill = value)) +
  geom_tile(color = "black") +
  theme_bw() +
  labs(fill = "", x = "Scorer", y = "Location") +
  custom_colors +
  facet_wrap(~scan_id)
```

Fleiss' Kappa for multiple raters was `r ka` (p: `r p`) across all scans.

## Ground Glass

```{r}
feat <- "Ground Glass"
# Statistic
k <- data %>%
  filter(feature == feat) %>%
  select(AF:JW) %>%
  kappam.fleiss(.)
ka <- round(k$value, 3)
p <- format.pval(k$p.value, eps = 0.001, digits = 3)
# Plot
data %>%
  filter(feature == feat) %>%
  select(scan_id, location, AF:JW) %>%
  pivot_longer(AF:JW) %>%
  ggplot(., aes(x = name, y = location, fill = value)) +
  geom_tile(color = "black") +
  theme_bw() +
  labs(fill = "", x = "Scorer", y = "Location") +
  custom_colors +
  facet_wrap(~scan_id)
```

Fleiss' Kappa for multiple raters was `r ka` (p: `r p`) across all scans.

## Mucoid Impaction

```{r}
feat <- "Mucoid Impaction"
# Statistic
k <- data %>%
  filter(feature == feat) %>%
  select(AF:JW) %>%
  kappam.fleiss(.)
ka <- round(k$value, 3)
p <- format.pval(k$p.value, eps = 0.001, digits = 3)
# Plot
data %>%
  filter(feature == feat) %>%
  select(scan_id, location, AF:JW) %>%
  pivot_longer(AF:JW) %>%
  ggplot(., aes(x = name, y = location, fill = value)) +
  geom_tile(color = "black") +
  theme_bw() +
  labs(fill = "", x = "Scorer", y = "Location") +
  custom_colors +
  facet_wrap(~scan_id)
```

Fleiss' Kappa for multiple raters was `r ka` (p: `r p`) across all scans.

## Nodule

```{r}
feat <- "Nodule"
# Statistic
k <- data %>%
  filter(feature == feat) %>%
  select(AF:JW) %>%
  kappam.fleiss(.)
ka <- round(k$value, 3)
p <- format.pval(k$p.value, eps = 0.001, digits = 3)
# Plot
data %>%
  filter(feature == feat) %>%
  select(scan_id, location, AF:JW) %>%
  pivot_longer(AF:JW) %>%
  ggplot(., aes(x = name, y = location, fill = value)) +
  geom_tile(color = "black") +
  theme_bw() +
  labs(fill = "", x = "Scorer", y = "Location") +
  custom_colors +
  facet_wrap(~scan_id)
```

Fleiss' Kappa for multiple raters was `r ka` (p: `r p`) across all scans.

## Tree in Bud

```{r}
feat <- "Tree In Bud"
# Statistics
k <- data %>%
  filter(feature == feat) %>%
  select(AF:JW) %>%
  kappam.fleiss(.)
ka <- round(k$value, 3)
p <- format.pval(k$p.value, eps = 0.001, digits = 3)
# Plot
data %>%
  filter(feature == feat) %>%
  select(scan_id, location, AF:JW) %>%
  pivot_longer(AF:JW) %>%
  ggplot(., aes(x = name, y = location, fill = value)) +
  geom_tile(color = "black") +
  theme_bw() +
  labs(fill = "", x = "Scorer", y = "Location") +
  custom_colors +
  facet_wrap(~scan_id)
```

Fleiss' Kappa for multiple raters was `r ka` (p: `r p`) across all scans.

# Bootstrap

To calculate bootstrap CIs for an kappa, we generated 1000 bootstrap samples clustered by scan ID and location, and calculated Fleiss' $\kappa$ for each bootstrap sample. Percentile and bias-corrected and accelerated (BCa) intervals are presented below.

```{r}
library(boot)
boot_fleiss <- function(df, i) {
  d <- df[i,c("AF","DL","JW")] # allows boot to select sample
  k = kappam.fleiss(d)
  return(k$value)
}
```

```{r}
# Remove scans and features with no variability
df_list = split.data.frame(data,f = ~ scan_id + feature)
perfect_agreement = lapply(df_list,function(d){
  if(all(d$disagree==FALSE) | all(d$disagree==TRUE)){
    return(names(d))
  } else {
    return(NA)
  }
})
boot_df = data
```

## Kappa

### Overall

```{r}
ka <- boot(data,boot_fleiss,R=1000,strata = interaction(factor(data$scan_id),factor(data$location)))
ci=boot.ci(ka,type = c("perc","bca"))
```

Fleiss' $\kappa$ across all features was `r round(ci$t0,3)` (percentile CI: `r paste(round(ci$percent[4],3),"-",round(ci$percent[5],3))`, BCa CI: `r paste(round(ci$bca[4],3),"-",round(ci$bca[5],3))`)

## Tetra/polychoric correlation

```{r}

```

## Random effects

In this scenario we have multiple crossed random effects. Each scan contains every level of feature and region, and each level of feature contains each level of region (or vice versa).

```{r}
library(lme4)
library(performance)
# Long data for lmer
re_data_no_bronch = data %>% select(-disagree) %>% 
  filter(feature != "Bronchiectasis") %>% # Remove bronchiectasis because it's on a different scale?
  pivot_longer(AF:JW)
re_data_no_bronch$value = factor(as.character(re_data_no_bronch$value),levels = c("Unchecked", "Checked"))
# Logistic model
m = glmer(value~name+(1|scan_id)+(1|feature)+(1|location),
         data = re_data_no_bronch,family="binomial")
summary(m)
# Logistic model
m2 = glmer(value~name+(1|scan_id)+(1|feature),
         data = re_data_no_bronch,family="binomial")
summary(m2)
icc(m2)
icc(m2,by_group = T)
```

There is essentially no variability in the random effect for location (which I think is good?).
